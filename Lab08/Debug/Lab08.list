
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b730  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800b930  0800b930  0001b930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  200001d8  0800c220  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800c220  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020206  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c7b8  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044d1  00000000  00000000  0003ca01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  00040ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ff  00000000  00000000  00042768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c9f9  00000000  00000000  00043a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022ec4  00000000  00000000  00070460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001079e7  00000000  00000000  00093324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000792c  00000000  00000000  0019ad0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001a2638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b918 	.word	0x0800b918

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	0800b918 	.word	0x0800b918

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <printOut>:
#include "Utilities/my_basic.h"

void printOut(const char *text)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET)
 80009dc:	bf00      	nop
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <printOut+0x34>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b40      	cmp	r3, #64	; 0x40
 80009ea:	d1f8      	bne.n	80009de <printOut+0xa>
	{
	}
	HAL_UART_Transmit(&huart3, (uint8_t*) text, strlen(text), 100);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff fc77 	bl	80002e0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <printOut+0x34>)
 80009fc:	f006 f818 	bl	8006a30 <HAL_UART_Transmit>
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200003a4 	.word	0x200003a4

08000a0c <printOutLine>:

void printOutLine(const char *text)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	printOut(text);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ffdd 	bl	80009d4 <printOut>
	printOut("\r\n");
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <printOutLine+0x1c>)
 8000a1c:	f7ff ffda 	bl	80009d4 <printOut>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	0800b930 	.word	0x0800b930

08000a2c <fillScreenColor>:
#include "ILI9341_Touchscreen.h"
#include "ILI9341_STM32_Driver.h"
#include "ILI9341_GFX.h"

void fillScreenColor(uint16_t color)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	ILI9341_Fill_Screen(color);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 f9b7 	bl	8002dac <ILI9341_Fill_Screen>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <clearScreenArea>:

void clearScreenArea(Rectangle area, uint16_t color)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b084      	sub	sp, #16
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a54:	4613      	mov	r3, r2
 8000a56:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(area.x0, area.y0, area.x1, area.y1);
 8000a58:	8938      	ldrh	r0, [r7, #8]
 8000a5a:	8979      	ldrh	r1, [r7, #10]
 8000a5c:	89ba      	ldrh	r2, [r7, #12]
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	f001 ff30 	bl	80028c4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(color, (area.x1 - area.x0) * (area.y1 - area.y0));
 8000a64:	89bb      	ldrh	r3, [r7, #12]
 8000a66:	461a      	mov	r2, r3
 8000a68:	893b      	ldrh	r3, [r7, #8]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	89fa      	ldrh	r2, [r7, #14]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	897a      	ldrh	r2, [r7, #10]
 8000a72:	1a8a      	subs	r2, r1, r2
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	461a      	mov	r2, r3
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 f8f6 	bl	8002c70 <ILI9341_Draw_Colour_Burst>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <setRotation>:

void setRotation(uint8_t rotation)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	ILI9341_Set_Rotation(rotation);
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 ff7d 	bl	8002998 <ILI9341_Set_Rotation>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <drawText>:

void drawText(const char *text, uint8_t x, uint8_t y, uint16_t size)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af02      	add	r7, sp, #8
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	4608      	mov	r0, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	70fb      	strb	r3, [r7, #3]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	70bb      	strb	r3, [r7, #2]
 8000abc:	4613      	mov	r3, r2
 8000abe:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, BLACK, size, WHITE);
 8000ac0:	78ba      	ldrb	r2, [r7, #2]
 8000ac2:	78f9      	ldrb	r1, [r7, #3]
 8000ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	883b      	ldrh	r3, [r7, #0]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f001 fe61 	bl	8002798 <ILI9341_Draw_Text>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <drawTextAtPoint>:

void drawTextAtPoint(const char *text, Point position, uint16_t size)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b084      	sub	sp, #16
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	8139      	strh	r1, [r7, #8]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	80fb      	strh	r3, [r7, #6]
	drawText(text, position.x, position.y, size);
 8000aec:	7a39      	ldrb	r1, [r7, #8]
 8000aee:	7a7a      	ldrb	r2, [r7, #9]
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ffd7 	bl	8000aa6 <drawText>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <drawTextWithColor>:

void drawTextWithColor(const char *text, uint8_t x, uint8_t y, uint16_t color,
		uint16_t size, uint16_t backgroundColor)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	4608      	mov	r0, r1
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4603      	mov	r3, r0
 8000b10:	70fb      	strb	r3, [r7, #3]
 8000b12:	460b      	mov	r3, r1
 8000b14:	70bb      	strb	r3, [r7, #2]
 8000b16:	4613      	mov	r3, r2
 8000b18:	803b      	strh	r3, [r7, #0]
	ILI9341_Draw_Text(text, x, y, color, size, backgroundColor);
 8000b1a:	8838      	ldrh	r0, [r7, #0]
 8000b1c:	78ba      	ldrb	r2, [r7, #2]
 8000b1e:	78f9      	ldrb	r1, [r7, #3]
 8000b20:	8abb      	ldrh	r3, [r7, #20]
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	8a3b      	ldrh	r3, [r7, #16]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f001 fe34 	bl	8002798 <ILI9341_Draw_Text>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <drawFilledRectangleAtCoord>:
{
	ILI9341_Draw_Filled_Rectangle_Coord(x0, y0, x1, y1, color);
}

void drawFilledRectangleAtCoord(Rectangle rectangle, uint16_t color)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af02      	add	r7, sp, #8
 8000b3e:	f107 0308 	add.w	r3, r7, #8
 8000b42:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b46:	4613      	mov	r3, r2
 8000b48:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Rectangle_Coord(rectangle.x0, rectangle.y0, rectangle.x1, rectangle.y1, color);
 8000b4a:	8938      	ldrh	r0, [r7, #8]
 8000b4c:	8979      	ldrh	r1, [r7, #10]
 8000b4e:	89ba      	ldrh	r2, [r7, #12]
 8000b50:	89fc      	ldrh	r4, [r7, #14]
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4623      	mov	r3, r4
 8000b58:	f001 fd25 	bl	80025a6 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd90      	pop	{r4, r7, pc}

08000b64 <drawFilledCircleAtCoord>:
{
	ILI9341_Draw_Filled_Circle(x, y, radius, color);
}

void drawFilledCircleAtCoord(Circle circle, uint16_t color)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b72:	4613      	mov	r3, r2
 8000b74:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Filled_Circle(circle.x, circle.y, circle.radius, color);
 8000b76:	8938      	ldrh	r0, [r7, #8]
 8000b78:	8979      	ldrh	r1, [r7, #10]
 8000b7a:	89ba      	ldrh	r2, [r7, #12]
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	f001 fc8a 	bl	8002496 <ILI9341_Draw_Filled_Circle>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <getCircleEdgeX>:
	ILI9341_Draw_Image(imageArray, orientation);
}


uint16_t getCircleEdgeX(Circle circle)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	463b      	mov	r3, r7
 8000b92:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x + circle.radius;
 8000b96:	883a      	ldrh	r2, [r7, #0]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b29b      	uxth	r3, r3
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <getCircleEdgeY>:

uint16_t getCircleEdgeY(Circle circle)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y + circle.radius;
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <getCircleEdgeXNegative>:

uint16_t getCircleEdgeXNegative(Circle circle)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.x - circle.radius;
 8000bd6:	883a      	ldrh	r2, [r7, #0]
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b29b      	uxth	r3, r3
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <getCircleEdgeYNegative>:

uint16_t getCircleEdgeYNegative(Circle circle)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	e883 0003 	stmia.w	r3, {r0, r1}
	return circle.y - circle.radius;
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	b29b      	uxth	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c20:	4a22      	ldr	r2, [pc, #136]	; (8000cac <MX_ADC1_Init+0xa0>)
 8000c22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c32:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c50:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c72:	f002 fbb5 	bl	80033e0 <HAL_ADC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c7c:	f001 f854 	bl	8001d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c80:	2303      	movs	r3, #3
 8000c82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c92:	f002 fe23 	bl	80038dc <HAL_ADC_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c9c:	f001 f844 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200001f4 	.word	0x200001f4
 8000cac:	40012000 	.word	0x40012000

08000cb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <HAL_ADC_MspInit+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12b      	bne.n	8000d2a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_ADC_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_ADC_MspInit+0x88>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_ADC_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_ADC_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <HAL_ADC_MspInit+0x88>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_ADC_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d02:	2308      	movs	r3, #8
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d06:	2303      	movs	r3, #3
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <HAL_ADC_MspInit+0x8c>)
 8000d16:	f003 f94d 	bl	8003fb4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	2012      	movs	r0, #18
 8000d20:	f003 f911 	bl	8003f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d24:	2012      	movs	r0, #18
 8000d26:	f003 f92a 	bl	8003f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	; 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40012000 	.word	0x40012000
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020000 	.word	0x40020000

08000d40 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
 8000d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d56:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a8c      	ldr	r2, [pc, #560]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d5c:	f043 0310 	orr.w	r3, r3, #16
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b8a      	ldr	r3, [pc, #552]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	4b87      	ldr	r3, [pc, #540]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a86      	ldr	r2, [pc, #536]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b84      	ldr	r3, [pc, #528]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d86:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a80      	ldr	r2, [pc, #512]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b7e      	ldr	r3, [pc, #504]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b7b      	ldr	r3, [pc, #492]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a7a      	ldr	r2, [pc, #488]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b78      	ldr	r3, [pc, #480]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a74      	ldr	r2, [pc, #464]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b72      	ldr	r3, [pc, #456]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dce:	4b6f      	ldr	r3, [pc, #444]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a6e      	ldr	r2, [pc, #440]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b6c      	ldr	r3, [pc, #432]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de6:	4b69      	ldr	r3, [pc, #420]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a68      	ldr	r2, [pc, #416]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b66      	ldr	r3, [pc, #408]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfe:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a62      	ldr	r2, [pc, #392]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <MX_GPIO_Init+0x24c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2168      	movs	r1, #104	; 0x68
 8000e1a:	485d      	ldr	r0, [pc, #372]	; (8000f90 <MX_GPIO_Init+0x250>)
 8000e1c:	f003 fb9a 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f244 0181 	movw	r1, #16513	; 0x4081
 8000e26:	485b      	ldr	r0, [pc, #364]	; (8000f94 <MX_GPIO_Init+0x254>)
 8000e28:	f003 fb94 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	4859      	ldr	r0, [pc, #356]	; (8000f98 <MX_GPIO_Init+0x258>)
 8000e32:	f003 fb8f 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000e3c:	4857      	ldr	r0, [pc, #348]	; (8000f9c <MX_GPIO_Init+0x25c>)
 8000e3e:	f003 fb89 	bl	8004554 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000e42:	2314      	movs	r3, #20
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	484e      	ldr	r0, [pc, #312]	; (8000f90 <MX_GPIO_Init+0x250>)
 8000e56:	f003 f8ad 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8000e5a:	2368      	movs	r3, #104	; 0x68
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4847      	ldr	r0, [pc, #284]	; (8000f90 <MX_GPIO_Init+0x250>)
 8000e72:	f003 f89f 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4844      	ldr	r0, [pc, #272]	; (8000f9c <MX_GPIO_Init+0x25c>)
 8000e8c:	f003 f892 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e90:	2332      	movs	r3, #50	; 0x32
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea0:	230b      	movs	r3, #11
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483c      	ldr	r0, [pc, #240]	; (8000f9c <MX_GPIO_Init+0x25c>)
 8000eac:	f003 f882 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eb0:	2386      	movs	r3, #134	; 0x86
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4835      	ldr	r0, [pc, #212]	; (8000fa0 <MX_GPIO_Init+0x260>)
 8000ecc:	f003 f872 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8000ed0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	482a      	ldr	r0, [pc, #168]	; (8000f94 <MX_GPIO_Init+0x254>)
 8000eea:	f003 f863 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f00:	230b      	movs	r3, #11
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4822      	ldr	r0, [pc, #136]	; (8000f94 <MX_GPIO_Init+0x254>)
 8000f0c:	f003 f852 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f10:	2340      	movs	r3, #64	; 0x40
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	481c      	ldr	r0, [pc, #112]	; (8000f98 <MX_GPIO_Init+0x258>)
 8000f28:	f003 f844 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4816      	ldr	r0, [pc, #88]	; (8000f98 <MX_GPIO_Init+0x258>)
 8000f40:	f003 f838 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000f44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <MX_GPIO_Init+0x25c>)
 8000f5e:	f003 f829 	bl	8003fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f74:	230b      	movs	r3, #11
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_GPIO_Init+0x258>)
 8000f80:	f003 f818 	bl	8003fb4 <HAL_GPIO_Init>

}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	; 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_I2C1_Init+0x74>)
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MX_I2C1_Init+0x78>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <MX_I2C1_Init+0x7c>)
 8000fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fe0:	f003 fad2 	bl	8004588 <HAL_I2C_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fea:	f000 fe9d 	bl	8001d28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_I2C1_Init+0x74>)
 8000ff2:	f003 fb59 	bl	80046a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 fe94 	bl	8001d28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_I2C1_Init+0x74>)
 8001004:	f003 fb9b 	bl	800473e <HAL_I2CEx_ConfigDigitalFilter>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100e:	f000 fe8b 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000023c 	.word	0x2000023c
 800101c:	40005400 	.word	0x40005400
 8001020:	20404768 	.word	0x20404768

08001024 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ae      	sub	sp, #184	; 0xb8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2290      	movs	r2, #144	; 0x90
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 f8f6 	bl	8008236 <memset>
  if(i2cHandle->Instance==I2C1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a22      	ldr	r2, [pc, #136]	; (80010d8 <HAL_I2C_MspInit+0xb4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d13c      	bne.n	80010ce <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001058:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800105a:	2300      	movs	r3, #0
 800105c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4618      	mov	r0, r3
 8001064:	f004 f8ec 	bl	8005240 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800106e:	f000 fe5b 	bl	8001d28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_I2C_MspInit+0xb8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_I2C_MspInit+0xb8>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_I2C_MspInit+0xb8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800108a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800108e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	2312      	movs	r3, #18
 8001094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010a4:	2304      	movs	r3, #4
 80010a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010ae:	4619      	mov	r1, r3
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <HAL_I2C_MspInit+0xbc>)
 80010b2:	f002 ff7f 	bl	8003fb4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_I2C_MspInit+0xb8>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_I2C_MspInit+0xb8>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_I2C_MspInit+0xb8>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	37b8      	adds	r7, #184	; 0xb8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40005400 	.word	0x40005400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400

080010e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010e8:	f3bf 8f4f 	dsb	sy
}
 80010ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ee:	f3bf 8f6f 	isb	sy
}
 80010f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <SCB_EnableICache+0x48>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fc:	f3bf 8f4f 	dsb	sy
}
 8001100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001102:	f3bf 8f6f 	isb	sy
}
 8001106:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <SCB_EnableICache+0x48>)
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <SCB_EnableICache+0x48>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001112:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001114:	f3bf 8f4f 	dsb	sy
}
 8001118:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800111a:	f3bf 8f6f 	isb	sy
}
 800111e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001136:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <SCB_EnableDCache+0x84>)
 8001138:	2200      	movs	r2, #0
 800113a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800113e:	f3bf 8f4f 	dsb	sy
}
 8001142:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <SCB_EnableDCache+0x84>)
 8001146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800114a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0b5b      	lsrs	r3, r3, #13
 8001150:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001154:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800115e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001168:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800116e:	4911      	ldr	r1, [pc, #68]	; (80011b4 <SCB_EnableDCache+0x84>)
 8001170:	4313      	orrs	r3, r2
 8001172:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1e5a      	subs	r2, r3, #1
 800117a:	60ba      	str	r2, [r7, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1ef      	bne.n	8001160 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1e5a      	subs	r2, r3, #1
 8001184:	60fa      	str	r2, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1e5      	bne.n	8001156 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
}
 800118e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <SCB_EnableDCache+0x84>)
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <SCB_EnableDCache+0x84>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800119c:	f3bf 8f4f 	dsb	sy
}
 80011a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011a2:	f3bf 8f6f 	isb	sy
}
 80011a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <getTemperature>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getTemperature(float *temperature) {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	// In celcius
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <getTemperatureString>:

void getTemperatureString(float temperature, char *temperatureString) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80011d6:	6038      	str	r0, [r7, #0]
	sprintf(temperatureString, "%.1f C", temperature);
 80011d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e0:	ec53 2b17 	vmov	r2, r3, d7
 80011e4:	4903      	ldr	r1, [pc, #12]	; (80011f4 <getTemperatureString+0x28>)
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f006 ffc2 	bl	8008170 <siprintf>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0800b934 	.word	0x0800b934

080011f8 <getHumidity>:

void getHumidity(float *humidity) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	// In Relative Humidity, %RH
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <getHumidityString>:

void getHumidityString(float humidity, char *humidityString) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
 8001216:	6038      	str	r0, [r7, #0]
	sprintf(humidityString, "%.1f %%RH", humidity);
 8001218:	edd7 7a01 	vldr	s15, [r7, #4]
 800121c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001220:	ec53 2b17 	vmov	r2, r3, d7
 8001224:	4903      	ldr	r1, [pc, #12]	; (8001234 <getHumidityString+0x28>)
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f006 ffa2 	bl	8008170 <siprintf>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0800b93c 	.word	0x0800b93c

08001238 <convertColorToRgb565>:

void drawHueCircle(ColorInfo colorInfo) {
	drawFilledCircleAtCoord(colorInfo.circle, colorInfo.color);
}

uint16_t convertColorToRgb565(float redIntensity, float greenIntensity, float blueIntensity) {
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001242:	edc7 0a02 	vstr	s1, [r7, #8]
 8001246:	ed87 1a01 	vstr	s2, [r7, #4]
  uint16_t red = (uint16_t)(redIntensity * 31.0 + 0.5);
 800124a:	edd7 7a03 	vldr	s15, [r7, #12]
 800124e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001252:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 8001256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800125a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800125e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001262:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001266:	ee17 3a90 	vmov	r3, s15
 800126a:	82fb      	strh	r3, [r7, #22]
  uint16_t green = (uint16_t)(greenIntensity * 63.0 + 0.5);
 800126c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001270:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001274:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80012d8 <convertColorToRgb565+0xa0>
 8001278:	ee27 7b06 	vmul.f64	d7, d7, d6
 800127c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001280:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001284:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001288:	ee17 3a90 	vmov	r3, s15
 800128c:	82bb      	strh	r3, [r7, #20]
  uint16_t blue = (uint16_t)(blueIntensity * 31.0 + 0.5);
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001296:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 800129a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800129e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80012a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012a6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012aa:	ee17 3a90 	vmov	r3, s15
 80012ae:	827b      	strh	r3, [r7, #18]

  uint16_t color = (red << 11) | (green << 5) | blue;
 80012b0:	8afb      	ldrh	r3, [r7, #22]
 80012b2:	02db      	lsls	r3, r3, #11
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	8abb      	ldrh	r3, [r7, #20]
 80012b8:	015b      	lsls	r3, r3, #5
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b21a      	sxth	r2, r3
 80012c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	823b      	strh	r3, [r7, #16]

  return color;
 80012ca:	8a3b      	ldrh	r3, [r7, #16]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	371c      	adds	r7, #28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	00000000 	.word	0x00000000
 80012dc:	404f8000 	.word	0x404f8000

080012e0 <createColorBox>:

Rectangle createColorBox(Circle circle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	e883 0006 	stmia.w	r3, {r1, r2}
	const uint16_t BOX_WIDTH = 150;
 80012ee:	2396      	movs	r3, #150	; 0x96
 80012f0:	83fb      	strh	r3, [r7, #30]
	const uint16_t BOX_HEIGHT = 20;
 80012f2:	2314      	movs	r3, #20
 80012f4:	83bb      	strh	r3, [r7, #28]
	const uint16_t GAP_X_CIRCLE_AND_BOX = 15;
 80012f6:	230f      	movs	r3, #15
 80012f8:	837b      	strh	r3, [r7, #26]

	Rectangle rectangle = {
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX,
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001300:	f7ff fc43 	bl	8000b8a <getCircleEdgeX>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	8b7b      	ldrh	r3, [r7, #26]
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800130e:	823b      	strh	r3, [r7, #16]
			circle.y - (circle.radius / 2),
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	893b      	ldrh	r3, [r7, #8]
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	b29b      	uxth	r3, r3
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 800131c:	827b      	strh	r3, [r7, #18]
			getCircleEdgeX(circle) + GAP_X_CIRCLE_AND_BOX + BOX_WIDTH,
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001324:	f7ff fc31 	bl	8000b8a <getCircleEdgeX>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	8b7b      	ldrh	r3, [r7, #26]
 800132e:	4413      	add	r3, r2
 8001330:	b29a      	uxth	r2, r3
 8001332:	8bfb      	ldrh	r3, [r7, #30]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 8001338:	82bb      	strh	r3, [r7, #20]
			circle.y + BOX_HEIGHT
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	8bbb      	ldrh	r3, [r7, #28]
 800133e:	4413      	add	r3, r2
 8001340:	b29b      	uxth	r3, r3
	Rectangle rectangle = {
 8001342:	82fb      	strh	r3, [r7, #22]
	};
	return rectangle;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	461a      	mov	r2, r3
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	cb03      	ldmia	r3!, {r0, r1}
 800134e:	6010      	str	r0, [r2, #0]
 8001350:	6051      	str	r1, [r2, #4]
}
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <createColorIntensityBar>:

Rectangle createColorIntensityBar(Rectangle refRectangle, float colorIntensity)
{
 800135a:	b480      	push	{r7}
 800135c:	b089      	sub	sp, #36	; 0x24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	e883 0006 	stmia.w	r3, {r1, r2}
 8001368:	ed87 0a00 	vstr	s0, [r7]
	const uint16_t BOX_WIDTH = 150;
 800136c:	2396      	movs	r3, #150	; 0x96
 800136e:	83fb      	strh	r3, [r7, #30]

	Rectangle intensityBar = {
			refRectangle.x0,
 8001370:	88bb      	ldrh	r3, [r7, #4]
	Rectangle intensityBar = {
 8001372:	82bb      	strh	r3, [r7, #20]
			refRectangle.y0,
 8001374:	88fb      	ldrh	r3, [r7, #6]
	Rectangle intensityBar = {
 8001376:	82fb      	strh	r3, [r7, #22]
			refRectangle.x0 + (int) (colorIntensity * BOX_WIDTH),
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	8bfb      	ldrh	r3, [r7, #30]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001384:	edd7 7a00 	vldr	s15, [r7]
 8001388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b29b      	uxth	r3, r3
	Rectangle intensityBar = {
 800139a:	833b      	strh	r3, [r7, #24]
			refRectangle.y1
 800139c:	897b      	ldrh	r3, [r7, #10]
	Rectangle intensityBar = {
 800139e:	837b      	strh	r3, [r7, #26]
	};
	return intensityBar;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	cb03      	ldmia	r3!, {r0, r1}
 80013aa:	6010      	str	r0, [r2, #0]
 80013ac:	6051      	str	r1, [r2, #4]
}
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <drawRgbInfo>:

void drawRgbInfo(ColorInfo redColor, ColorInfo greenColor, ColorInfo blueColor, ColorInfo mixedColor) {
 80013bc:	b082      	sub	sp, #8
 80013be:	b590      	push	{r4, r7, lr}
 80013c0:	b09b      	sub	sp, #108	; 0x6c
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	1d3c      	adds	r4, r7, #4
 80013c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013ca:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint16_t BRIGHT_RED = 0xff3c;
 80013cc:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80013d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	const uint16_t BRIGHT_GREEN = 0xcff9;
 80013d4:	f64c 73f9 	movw	r3, #53241	; 0xcff9
 80013d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	const uint16_t BRIGHT_BLUE = 0xe73f;
 80013dc:	f24e 733f 	movw	r3, #59199	; 0xe73f
 80013e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	Rectangle redBox = createColorBox(redColor.circle);
 80013e4:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013ee:	f7ff ff77 	bl	80012e0 <createColorBox>
	Rectangle greenBox = createColorBox(greenColor.circle);
 80013f2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80013f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80013fe:	f7ff ff6f 	bl	80012e0 <createColorBox>
	Rectangle blueBox = createColorBox(blueColor.circle);
 8001402:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001406:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800140a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800140e:	f7ff ff67 	bl	80012e0 <createColorBox>

	Rectangle redIntensityBar = createColorIntensityBar(redBox, redColor.intensity);
 8001412:	edd7 7a03 	vldr	s15, [r7, #12]
 8001416:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001422:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001426:	f7ff ff98 	bl	800135a <createColorIntensityBar>
	Rectangle greenIntensityBar = createColorIntensityBar(greenBox, greenColor.intensity);
 800142a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800142e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800143a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800143e:	f7ff ff8c 	bl	800135a <createColorIntensityBar>
	Rectangle blueIntensityBar = createColorIntensityBar(blueBox, blueColor.intensity);
 8001442:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001446:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001452:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001456:	f7ff ff80 	bl	800135a <createColorIntensityBar>

	const uint8_t GAP_X_BOX_AND_PERCENTAGE = 10;
 800145a:	230a      	movs	r3, #10
 800145c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Point redPercentagePos = {redBox.x1 + GAP_X_BOX_AND_PERCENTAGE, redBox.y0};
 8001460:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001464:	b2da      	uxtb	r2, r3
 8001466:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800146a:	4413      	add	r3, r2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001472:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	Point greenPercentagePos = {greenBox.x1 + GAP_X_BOX_AND_PERCENTAGE, greenBox.y0};
 800147c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001480:	b2da      	uxtb	r2, r3
 8001482:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001486:	4413      	add	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800148e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Point bluePercentagePos = {blueBox.x1 + GAP_X_BOX_AND_PERCENTAGE, blueBox.y0};
 8001498:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800149c:	b2da      	uxtb	r2, r3
 800149e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80014a2:	4413      	add	r3, r2
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80014aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	drawFilledCircleAtCoord(redColor.circle, redColor.color);
 80014b4:	897b      	ldrh	r3, [r7, #10]
 80014b6:	461a      	mov	r2, r3
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014be:	f7ff fb51 	bl	8000b64 <drawFilledCircleAtCoord>
	drawFilledCircleAtCoord(greenColor.circle, greenColor.color);
 80014c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80014c6:	461a      	mov	r2, r3
 80014c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d0:	f7ff fb48 	bl	8000b64 <drawFilledCircleAtCoord>
	drawFilledCircleAtCoord(blueColor.circle, blueColor.color);
 80014d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80014d8:	461a      	mov	r2, r3
 80014da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014e2:	f7ff fb3f 	bl	8000b64 <drawFilledCircleAtCoord>

	drawFilledCircleAtCoord(mixedColor.circle, mixedColor.color);
 80014e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80014ea:	461a      	mov	r2, r3
 80014ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014f4:	f7ff fb36 	bl	8000b64 <drawFilledCircleAtCoord>

	drawFilledRectangleAtCoord(redBox, BRIGHT_RED);
 80014f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014fc:	461a      	mov	r2, r3
 80014fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001502:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001506:	f7ff fb17 	bl	8000b38 <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(greenBox, BRIGHT_GREEN);
 800150a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800150e:	461a      	mov	r2, r3
 8001510:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001514:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001518:	f7ff fb0e 	bl	8000b38 <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(blueBox, BRIGHT_BLUE);
 800151c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001520:	461a      	mov	r2, r3
 8001522:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001526:	e893 0003 	ldmia.w	r3, {r0, r1}
 800152a:	f7ff fb05 	bl	8000b38 <drawFilledRectangleAtCoord>

	drawFilledRectangleAtCoord(redIntensityBar, RED);
 800152e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001532:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001536:	e893 0003 	ldmia.w	r3, {r0, r1}
 800153a:	f7ff fafd 	bl	8000b38 <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(greenIntensityBar, GREEN);
 800153e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001546:	e893 0003 	ldmia.w	r3, {r0, r1}
 800154a:	f7ff faf5 	bl	8000b38 <drawFilledRectangleAtCoord>
	drawFilledRectangleAtCoord(blueIntensityBar, BLUE);
 800154e:	221f      	movs	r2, #31
 8001550:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001554:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001558:	f7ff faee 	bl	8000b38 <drawFilledRectangleAtCoord>

	char text[10];
	const uint8_t COLOR_PERCENTAGE_FONT_SIZE = 2;
 800155c:	2302      	movs	r3, #2
 800155e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

	Rectangle clearArea = {redPercentagePos.x, redPercentagePos.y, bluePercentagePos.x + 50, bluePercentagePos.y + 50};
 8001562:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001566:	b29b      	uxth	r3, r3
 8001568:	823b      	strh	r3, [r7, #16]
 800156a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800156e:	b29b      	uxth	r3, r3
 8001570:	827b      	strh	r3, [r7, #18]
 8001572:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001576:	b29b      	uxth	r3, r3
 8001578:	3332      	adds	r3, #50	; 0x32
 800157a:	b29b      	uxth	r3, r3
 800157c:	82bb      	strh	r3, [r7, #20]
 800157e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001582:	b29b      	uxth	r3, r3
 8001584:	3332      	adds	r3, #50	; 0x32
 8001586:	b29b      	uxth	r3, r3
 8001588:	82fb      	strh	r3, [r7, #22]
	clearScreenArea(clearArea, WHITE);
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001596:	f7ff fa56 	bl	8000a46 <clearScreenArea>

	sprintf(text, "%d", (int) (redColor.intensity * 100));
 800159a:	edd7 7a03 	vldr	s15, [r7, #12]
 800159e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001640 <drawRgbInfo+0x284>
 80015a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015aa:	f107 0318 	add.w	r3, r7, #24
 80015ae:	ee17 2a90 	vmov	r2, s15
 80015b2:	4924      	ldr	r1, [pc, #144]	; (8001644 <drawRgbInfo+0x288>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 fddb 	bl	8008170 <siprintf>
	drawTextAtPoint(text, redPercentagePos, COLOR_PERCENTAGE_FONT_SIZE);
 80015ba:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fa89 	bl	8000ade <drawTextAtPoint>

	sprintf(text, "%d", (int) (greenColor.intensity * 100));
 80015cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80015d0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001640 <drawRgbInfo+0x284>
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	ee17 2a90 	vmov	r2, s15
 80015e4:	4917      	ldr	r1, [pc, #92]	; (8001644 <drawRgbInfo+0x288>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 fdc2 	bl	8008170 <siprintf>
	drawTextAtPoint(text, greenPercentagePos, COLOR_PERCENTAGE_FONT_SIZE);
 80015ec:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 0318 	add.w	r3, r7, #24
 80015f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fa70 	bl	8000ade <drawTextAtPoint>

	sprintf(text, "%d", (int) (blueColor.intensity * 100));
 80015fe:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001602:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001640 <drawRgbInfo+0x284>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	ee17 2a90 	vmov	r2, s15
 8001616:	490b      	ldr	r1, [pc, #44]	; (8001644 <drawRgbInfo+0x288>)
 8001618:	4618      	mov	r0, r3
 800161a:	f006 fda9 	bl	8008170 <siprintf>
	drawTextAtPoint(text, bluePercentagePos, COLOR_PERCENTAGE_FONT_SIZE);
 800161e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001622:	b29a      	uxth	r2, r3
 8001624:	f107 0318 	add.w	r3, r7, #24
 8001628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fa57 	bl	8000ade <drawTextAtPoint>
}
 8001630:	bf00      	nop
 8001632:	376c      	adds	r7, #108	; 0x6c
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800163a:	b002      	add	sp, #8
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	42c80000 	.word	0x42c80000
 8001644:	0800b948 	.word	0x0800b948

08001648 <isTouchWithinCircle>:

uint8_t isTouchWithinCircle(Circle circle, uint16_t xPos, uint16_t yPos)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	f107 0408 	add.w	r4, r7, #8
 8001652:	e884 0003 	stmia.w	r4, {r0, r1}
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	460b      	mov	r3, r1
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	4613      	mov	r3, r2
 8001660:	80bb      	strh	r3, [r7, #4]
	uint16_t xPositive = getCircleEdgeX(circle);
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	e893 0003 	ldmia.w	r3, {r0, r1}
 800166a:	f7ff fa8e 	bl	8000b8a <getCircleEdgeX>
 800166e:	4603      	mov	r3, r0
 8001670:	82fb      	strh	r3, [r7, #22]
	uint16_t xNegative = getCircleEdgeXNegative(circle);
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800167a:	f7ff faa6 	bl	8000bca <getCircleEdgeXNegative>
 800167e:	4603      	mov	r3, r0
 8001680:	82bb      	strh	r3, [r7, #20]
	uint16_t yPositive = getCircleEdgeY(circle);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	e893 0003 	ldmia.w	r3, {r0, r1}
 800168a:	f7ff fa8e 	bl	8000baa <getCircleEdgeY>
 800168e:	4603      	mov	r3, r0
 8001690:	827b      	strh	r3, [r7, #18]
	uint16_t yNegative = getCircleEdgeYNegative(circle);
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	e893 0003 	ldmia.w	r3, {r0, r1}
 800169a:	f7ff faa6 	bl	8000bea <getCircleEdgeYNegative>
 800169e:	4603      	mov	r3, r0
 80016a0:	823b      	strh	r3, [r7, #16]

	if (xPos > xNegative && xPos < xPositive && yPos > yNegative && yPos < yPositive)
 80016a2:	88fa      	ldrh	r2, [r7, #6]
 80016a4:	8abb      	ldrh	r3, [r7, #20]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d90d      	bls.n	80016c6 <isTouchWithinCircle+0x7e>
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	8afb      	ldrh	r3, [r7, #22]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d209      	bcs.n	80016c6 <isTouchWithinCircle+0x7e>
 80016b2:	88ba      	ldrh	r2, [r7, #4]
 80016b4:	8a3b      	ldrh	r3, [r7, #16]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d905      	bls.n	80016c6 <isTouchWithinCircle+0x7e>
 80016ba:	88ba      	ldrh	r2, [r7, #4]
 80016bc:	8a7b      	ldrh	r3, [r7, #18]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d201      	bcs.n	80016c6 <isTouchWithinCircle+0x7e>
	{
		return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <isTouchWithinCircle+0x80>
	} else
		return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <addColorIntensity>:

void addColorIntensity(ColorInfo *colorInfo)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	const float MAX_INTENSITY = 1.0;
 80016d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016dc:	60fb      	str	r3, [r7, #12]
	const float STEP_INTENSITY = 0.1;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <addColorIntensity+0x50>)
 80016e0:	60bb      	str	r3, [r7, #8]

	if (colorInfo->intensity >= MAX_INTENSITY) {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80016e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	d804      	bhi.n	8001700 <addColorIntensity+0x30>
		colorInfo->intensity = 0.0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
	} else {
		colorInfo->intensity += STEP_INTENSITY;
	}
}
 80016fe:	e009      	b.n	8001714 <addColorIntensity+0x44>
		colorInfo->intensity += STEP_INTENSITY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	ed93 7a02 	vldr	s14, [r3, #8]
 8001706:	edd7 7a02 	vldr	s15, [r7, #8]
 800170a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	3dcccccd 	.word	0x3dcccccd

08001724 <checkTouchHueCircle>:
		}
	}
}

void checkTouchHueCircle(ColorInfo *redColor, ColorInfo *greenColor, ColorInfo *blueColor, ColorInfo *mixedColor)
{
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af08      	add	r7, sp, #32
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
	uint16_t xPos = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	83fb      	strh	r3, [r7, #30]
	uint16_t yPos = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	83bb      	strh	r3, [r7, #28]

	int isEndShowing = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]

	while (!isEndShowing) {
 800173e:	e080      	b.n	8001842 <checkTouchHueCircle+0x11e>
		HAL_Delay(10);
 8001740:	200a      	movs	r0, #10
 8001742:	f001 fe29 	bl	8003398 <HAL_Delay>

		if (TP_Touchpad_Pressed()) {
 8001746:	f001 fdb1 	bl	80032ac <TP_Touchpad_Pressed>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d078      	beq.n	8001842 <checkTouchHueCircle+0x11e>

			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fce7 	bl	8003128 <TP_Read_Coordinates>
 800175a:	4603      	mov	r3, r0
 800175c:	2b01      	cmp	r3, #1
 800175e:	d112      	bne.n	8001786 <checkTouchHueCircle+0x62>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 8001760:	2301      	movs	r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d106      	bne.n	8001774 <checkTouchHueCircle+0x50>
				{
					xPos = position_array[1];
 8001766:	8afb      	ldrh	r3, [r7, #22]
 8001768:	83fb      	strh	r3, [r7, #30]
					yPos = SCREEN_HEIGHT - position_array[0];
 800176a:	8abb      	ldrh	r3, [r7, #20]
 800176c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001770:	83bb      	strh	r3, [r7, #28]
 8001772:	e008      	b.n	8001786 <checkTouchHueCircle+0x62>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 8001774:	2301      	movs	r3, #1
 8001776:	2b03      	cmp	r3, #3
 8001778:	d105      	bne.n	8001786 <checkTouchHueCircle+0x62>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 800177a:	8afb      	ldrh	r3, [r7, #22]
 800177c:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001780:	83fb      	strh	r3, [r7, #30]
					yPos = position_array[0];
 8001782:	8abb      	ldrh	r3, [r7, #20]
 8001784:	83bb      	strh	r3, [r7, #28]
				}
			}

			if (isTouchWithinCircle(redColor->circle, xPos, yPos))
 8001786:	8bbb      	ldrh	r3, [r7, #28]
 8001788:	8bfa      	ldrh	r2, [r7, #30]
 800178a:	68f9      	ldr	r1, [r7, #12]
 800178c:	c903      	ldmia	r1, {r0, r1}
 800178e:	f7ff ff5b 	bl	8001648 <isTouchWithinCircle>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <checkTouchHueCircle+0x7c>
			{
				addColorIntensity(redColor);
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff ff99 	bl	80016d0 <addColorIntensity>
 800179e:	e024      	b.n	80017ea <checkTouchHueCircle+0xc6>
			}
			else if (isTouchWithinCircle(greenColor->circle, xPos, yPos))
 80017a0:	8bbb      	ldrh	r3, [r7, #28]
 80017a2:	8bfa      	ldrh	r2, [r7, #30]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	c903      	ldmia	r1, {r0, r1}
 80017a8:	f7ff ff4e 	bl	8001648 <isTouchWithinCircle>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <checkTouchHueCircle+0x96>
			{
				addColorIntensity(greenColor);
 80017b2:	68b8      	ldr	r0, [r7, #8]
 80017b4:	f7ff ff8c 	bl	80016d0 <addColorIntensity>
 80017b8:	e017      	b.n	80017ea <checkTouchHueCircle+0xc6>
			}
			else if (isTouchWithinCircle(blueColor->circle, xPos, yPos))
 80017ba:	8bbb      	ldrh	r3, [r7, #28]
 80017bc:	8bfa      	ldrh	r2, [r7, #30]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	c903      	ldmia	r1, {r0, r1}
 80017c2:	f7ff ff41 	bl	8001648 <isTouchWithinCircle>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <checkTouchHueCircle+0xb0>
			{
				addColorIntensity(blueColor);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff7f 	bl	80016d0 <addColorIntensity>
 80017d2:	e00a      	b.n	80017ea <checkTouchHueCircle+0xc6>
			} else if (isTouchWithinCircle(mixedColor->circle, xPos, yPos))
 80017d4:	8bbb      	ldrh	r3, [r7, #28]
 80017d6:	8bfa      	ldrh	r2, [r7, #30]
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	c903      	ldmia	r1, {r0, r1}
 80017dc:	f7ff ff34 	bl	8001648 <isTouchWithinCircle>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <checkTouchHueCircle+0xc6>
			{
				isEndShowing = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61bb      	str	r3, [r7, #24]
			}
			mixedColor->color = convertColorToRgb565(redColor->intensity, greenColor->intensity, blueColor->intensity);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80017fc:	eeb0 1a66 	vmov.f32	s2, s13
 8001800:	eef0 0a47 	vmov.f32	s1, s14
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	f7ff fd16 	bl	8001238 <convertColorToRgb565>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	80da      	strh	r2, [r3, #6]

			drawRgbInfo(*redColor, *greenColor, *blueColor, *mixedColor);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	68fc      	ldr	r4, [r7, #12]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	ad05      	add	r5, sp, #20
 800181c:	ca07      	ldmia	r2, {r0, r1, r2}
 800181e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	ad02      	add	r5, sp, #8
 8001826:	ca07      	ldmia	r2, {r0, r1, r2}
 8001828:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800182c:	466d      	mov	r5, sp
 800182e:	1d1a      	adds	r2, r3, #4
 8001830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001834:	e885 0003 	stmia.w	r5, {r0, r1}
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800183e:	f7ff fdbd 	bl	80013bc <drawRgbInfo>
	while (!isEndShowing) {
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f43f af7b 	beq.w	8001740 <checkTouchHueCircle+0x1c>
		}
	}
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bdb0      	pop	{r4, r5, r7, pc}

08001854 <startTimer>:
{

}

void startTimer()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	count = 0;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <startTimer+0x20>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Init(&htim2);
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <startTimer+0x24>)
 8001860:	f004 fce2 	bl	8006228 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start(&htim2);
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <startTimer+0x24>)
 8001866:	f004 fd93 	bl	8006390 <HAL_TIM_Base_Start>

	HAL_ADC_Start_IT(&hadc1);
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <startTimer+0x28>)
 800186c:	f001 fdfc 	bl	8003468 <HAL_ADC_Start_IT>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000290 	.word	0x20000290
 8001878:	20000358 	.word	0x20000358
 800187c:	200001f4 	.word	0x200001f4

08001880 <stopTimer>:

void stopTimer()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8001884:	4803      	ldr	r0, [pc, #12]	; (8001894 <stopTimer+0x14>)
 8001886:	f004 fd26 	bl	80062d6 <HAL_TIM_Base_DeInit>
	HAL_ADC_Stop_IT(&hadc1);
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <stopTimer+0x18>)
 800188c:	f001 fec4 	bl	8003618 <HAL_ADC_Stop_IT>
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000358 	.word	0x20000358
 8001898:	200001f4 	.word	0x200001f4

0800189c <drawStudentInfoPage>:

void drawStudentInfoPage(ColorInfo colorInfo)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b097      	sub	sp, #92	; 0x5c
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	char *picArray;
//	fillScreenColor(WHITE);

	char *group = "G03";
 80018a8:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <drawStudentInfoPage+0x168>)
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48
	char *firstName = "Natchanon";
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <drawStudentInfoPage+0x16c>)
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
	char *lastName = "Bunyachawaset";
 80018b0:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <drawStudentInfoPage+0x170>)
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
	char *myId = "64011113";
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <drawStudentInfoPage+0x174>)
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	Point infoPos = {SCREEN_WIDTH/2 - 50, 100};
 80018b8:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <drawStudentInfoPage+0x178>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
	const int LINE_SPACEING_SIZE = 20;
 80018be:	2314      	movs	r3, #20
 80018c0:	63bb      	str	r3, [r7, #56]	; 0x38
	const int FONT_SIZE = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34

	uint16_t color = colorInfo.color;
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	867b      	strh	r3, [r7, #50]	; 0x32

	int isEndShowing = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	fillScreenColor(WHITE);
 80018ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018d2:	f7ff f8ab 	bl	8000a2c <fillScreenColor>
//	drawImage((const char*) testPic1, SCREEN_VERTICAL_1);
	drawTextWithColor(group, infoPos.x, infoPos.y, color, FONT_SIZE, WHITE);
 80018d6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80018da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 80018e4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80018e8:	9401      	str	r4, [sp, #4]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4603      	mov	r3, r0
 80018ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80018f0:	f7ff f906 	bl	8000b00 <drawTextWithColor>
	drawTextWithColor(firstName, infoPos.x, infoPos.y + LINE_SPACEING_SIZE, color, FONT_SIZE, WHITE);
 80018f4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80018f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	4413      	add	r3, r2
 8001902:	b2da      	uxtb	r2, r3
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	b29b      	uxth	r3, r3
 8001908:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 800190a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800190e:	9401      	str	r4, [sp, #4]
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	4603      	mov	r3, r0
 8001914:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001916:	f7ff f8f3 	bl	8000b00 <drawTextWithColor>
	drawTextWithColor(lastName, infoPos.x, infoPos.y + 2 *LINE_SPACEING_SIZE, color, FONT_SIZE, WHITE);
 800191a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800191e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	b2db      	uxtb	r3, r3
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b2da      	uxtb	r2, r3
 800192e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001930:	b29b      	uxth	r3, r3
 8001932:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8001934:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001938:	9401      	str	r4, [sp, #4]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	4603      	mov	r3, r0
 800193e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001940:	f7ff f8de 	bl	8000b00 <drawTextWithColor>
	drawTextWithColor(myId, infoPos.x, infoPos.y + 3*LINE_SPACEING_SIZE, color, FONT_SIZE, WHITE);
 8001944:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8001948:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800194c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194e:	b2db      	uxtb	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	0040      	lsls	r0, r0, #1
 8001954:	4403      	add	r3, r0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b2da      	uxtb	r2, r3
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	b29b      	uxth	r3, r3
 8001960:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8001962:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001966:	9401      	str	r4, [sp, #4]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	4603      	mov	r3, r0
 800196c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800196e:	f7ff f8c7 	bl	8000b00 <drawTextWithColor>

	uint16_t xPos = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	863b      	strh	r3, [r7, #48]	; 0x30
	uint16_t yPos = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	85fb      	strh	r3, [r7, #46]	; 0x2e

	startTimer();
 800197a:	f7ff ff6b 	bl	8001854 <startTimer>
	while (!isEndShowing) {
 800197e:	e037      	b.n	80019f0 <drawStudentInfoPage+0x154>
		char txt[20];
		sprintf(txt, "Count: %d", count);
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <drawStudentInfoPage+0x17c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	4924      	ldr	r1, [pc, #144]	; (8001a1c <drawStudentInfoPage+0x180>)
 800198a:	4618      	mov	r0, r3
 800198c:	f006 fbf0 	bl	8008170 <siprintf>
		drawText(txt, 10, 10, 3);
 8001990:	f107 0018 	add.w	r0, r7, #24
 8001994:	2303      	movs	r3, #3
 8001996:	220a      	movs	r2, #10
 8001998:	210a      	movs	r1, #10
 800199a:	f7ff f884 	bl	8000aa6 <drawText>
		if (count > 4)
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <drawStudentInfoPage+0x17c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d902      	bls.n	80019ac <drawStudentInfoPage+0x110>
		{
			isEndShowing = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019aa:	e021      	b.n	80019f0 <drawStudentInfoPage+0x154>
		} else if (TP_Touchpad_Pressed())
 80019ac:	f001 fc7e 	bl	80032ac <TP_Touchpad_Pressed>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d01c      	beq.n	80019f0 <drawStudentInfoPage+0x154>
		{
			uint16_t position_array[2];

			if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4618      	mov	r0, r3
 80019bc:	f001 fbb4 	bl	8003128 <TP_Read_Coordinates>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d112      	bne.n	80019ec <drawStudentInfoPage+0x150>
			{
				if (SCREEN_ROTATION == SCREEN_HORIZONTAL_1)
 80019c6:	2301      	movs	r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <drawStudentInfoPage+0x13e>
				{
					xPos = position_array[1];
 80019cc:	8afb      	ldrh	r3, [r7, #22]
 80019ce:	863b      	strh	r3, [r7, #48]	; 0x30
					yPos = SCREEN_HEIGHT - position_array[0];
 80019d0:	8abb      	ldrh	r3, [r7, #20]
 80019d2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80019d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019d8:	e008      	b.n	80019ec <drawStudentInfoPage+0x150>
				} else if (SCREEN_ROTATION == SCREEN_HORIZONTAL_2)
 80019da:	2301      	movs	r3, #1
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d105      	bne.n	80019ec <drawStudentInfoPage+0x150>
				{
					xPos = SCREEN_WIDTH - position_array[1];
 80019e0:	8afb      	ldrh	r3, [r7, #22]
 80019e2:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 80019e6:	863b      	strh	r3, [r7, #48]	; 0x30
					yPos = position_array[0];
 80019e8:	8abb      	ldrh	r3, [r7, #20]
 80019ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
				}
			}
			isEndShowing = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (!isEndShowing) {
 80019f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0c4      	beq.n	8001980 <drawStudentInfoPage+0xe4>
		}
	}
	stopTimer();
 80019f6:	f7ff ff43 	bl	8001880 <stopTimer>
}
 80019fa:	bf00      	nop
 80019fc:	3754      	adds	r7, #84	; 0x54
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd90      	pop	{r4, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	0800b94c 	.word	0x0800b94c
 8001a08:	0800b950 	.word	0x0800b950
 8001a0c:	0800b95c 	.word	0x0800b95c
 8001a10:	0800b96c 	.word	0x0800b96c
 8001a14:	0800b984 	.word	0x0800b984
 8001a18:	20000290 	.word	0x20000290
 8001a1c:	0800b978 	.word	0x0800b978

08001a20 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	count++;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x20>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_ADC_ConvCpltCallback+0x20>)
 8001a30:	6013      	str	r3, [r2, #0]
	printOutLine("COUNT");
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <HAL_ADC_ConvCpltCallback+0x24>)
 8001a34:	f7fe ffea 	bl	8000a0c <printOutLine>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000290 	.word	0x20000290
 8001a44:	0800b988 	.word	0x0800b988

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b0b1      	sub	sp, #196	; 0xc4
 8001a4c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001a4e:	f7ff fb49 	bl	80010e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001a52:	f7ff fb6d 	bl	8001130 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a56:	f001 fc39 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5a:	f000 f8f5 	bl	8001c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f7ff f96f 	bl	8000d40 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a62:	f000 fc5f 	bl	8002324 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001a66:	f000 f9ad 	bl	8001dc4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001a6a:	f000 fb39 	bl	80020e0 <MX_TIM1_Init>
  MX_RNG_Init();
 8001a6e:	f000 f961 	bl	8001d34 <MX_RNG_Init>
  MX_I2C1_Init();
 8001a72:	f7ff fa97 	bl	8000fa4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001a76:	f000 fb87 	bl	8002188 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001a7a:	f7ff f8c7 	bl	8000c0c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); // initial driver setup to drive ili9341
 8001a7e:	f000 ffe9 	bl	8002a54 <ILI9341_Init>

	float temperature = 10.1;
 8001a82:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <main+0x1ec>)
 8001a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float humidity = 40.1;
 8001a88:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <main+0x1f0>)
 8001a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	char temperatureString[10];
	char humidityString[10];

	uint16_t radius = 20;
 8001a8e:	2314      	movs	r3, #20
 8001a90:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

	ColorInfo redColor = {{ 30, SCREEN_HEIGHT / 4 + 35, radius }, RED, 0};
 8001a94:	231e      	movs	r3, #30
 8001a96:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001a9a:	235f      	movs	r3, #95	; 0x5f
 8001a9c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001aa0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001aa4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8001aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aac:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	677b      	str	r3, [r7, #116]	; 0x74
	ColorInfo greenColor = {{ 30, getCircleEdgeY(redColor.circle) + radius + 15, radius }, GREEN, 0};
 8001ab6:	231e      	movs	r3, #30
 8001ab8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8001abc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ac0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac4:	f7ff f871 	bl	8000baa <getCircleEdgeY>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	330f      	adds	r3, #15
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001adc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001ae0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001ae4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ae8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	66bb      	str	r3, [r7, #104]	; 0x68
	ColorInfo blueColor = {{ 30, getCircleEdgeY(greenColor.circle) + radius + 15, radius }, BLUE, 0};
 8001af2:	231e      	movs	r3, #30
 8001af4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8001af8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001afc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b00:	f7ff f853 	bl	8000baa <getCircleEdgeY>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	330f      	adds	r3, #15
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001b18:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001b1c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001b20:	231f      	movs	r3, #31
 8001b22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
	ColorInfo mixedColor = {
 8001b2c:	2387      	movs	r3, #135	; 0x87
 8001b2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b32:	232d      	movs	r3, #45	; 0x2d
 8001b34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001b38:	2319      	movs	r3, #25
 8001b3a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			{ SCREEN_WIDTH / 2 - 25, 45, 25 },
			convertColorToRgb565(redColor.intensity, greenColor.intensity, blueColor.intensity),
 8001b3e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b42:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001b46:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001b4a:	eeb0 1a66 	vmov.f32	s2, s13
 8001b4e:	eef0 0a47 	vmov.f32	s1, s14
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	f7ff fb6f 	bl	8001238 <convertColorToRgb565>
 8001b5a:	4603      	mov	r3, r0
	ColorInfo mixedColor = {
 8001b5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	653b      	str	r3, [r7, #80]	; 0x50
			0
	};

	getTemperature(&temperature);
 8001b66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fb24 	bl	80011b8 <getTemperature>
	getTemperatureString(temperature, temperatureString);
 8001b70:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001b74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b78:	4618      	mov	r0, r3
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	f7ff fb25 	bl	80011cc <getTemperatureString>

	getHumidity(&humidity);
 8001b82:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fb36 	bl	80011f8 <getHumidity>
	getHumidityString(humidity, humidityString);
 8001b8c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b90:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b94:	4618      	mov	r0, r3
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	f7ff fb37 	bl	800120c <getHumidityString>

	Point temperaturePosition = { 25, 30 };
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <main+0x1f4>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	Point humidityPosition = { SCREEN_WIDTH / 2 + 10, 30 };
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <main+0x1f8>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	int fontSize = 2;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	uint8_t cmdBuffer[3];
	uint8_t dataBuffer[8];

	char str[50];
	sprintf(str, "\n\rAM2320 I2C DEMO Starting ...");
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4923      	ldr	r1, [pc, #140]	; (8001c44 <main+0x1fc>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f006 fad9 	bl	8008170 <siprintf>
	printOutLine(str);
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ff23 	bl	8000a0c <printOutLine>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		fillScreenColor(WHITE);
 8001bc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bca:	f7fe ff2f 	bl	8000a2c <fillScreenColor>
		setRotation(SCREEN_ROTATION);
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe ff5b 	bl	8000a8c <setRotation>

//		drawTextByPoint(temperatureString, temperaturePosition, fontSize);
//		drawTextByPoint(humidityString, humidityPosition, fontSize);
		drawRgbInfo(redColor, greenColor, blueColor, mixedColor);
 8001bd6:	ac05      	add	r4, sp, #20
 8001bd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001be0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001be4:	ac02      	add	r4, sp, #8
 8001be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001bf2:	466a      	mov	r2, sp
 8001bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bfc:	e882 0003 	stmia.w	r2, {r0, r1}
 8001c00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c02:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c08:	f7ff fbd8 	bl	80013bc <drawRgbInfo>
		checkTouchHueCircle(&redColor, &greenColor, &blueColor, &mixedColor);
 8001c0c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c10:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001c14:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001c18:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001c1c:	f7ff fd82 	bl	8001724 <checkTouchHueCircle>

		drawStudentInfoPage(mixedColor);
 8001c20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c28:	f7ff fe38 	bl	800189c <drawStudentInfoPage>

		HAL_Delay(10);
 8001c2c:	200a      	movs	r0, #10
 8001c2e:	f001 fbb3 	bl	8003398 <HAL_Delay>
		fillScreenColor(WHITE);
 8001c32:	e7c8      	b.n	8001bc6 <main+0x17e>
 8001c34:	4121999a 	.word	0x4121999a
 8001c38:	42206666 	.word	0x42206666
 8001c3c:	0800b9b0 	.word	0x0800b9b0
 8001c40:	0800b9b4 	.word	0x0800b9b4
 8001c44:	0800b990 	.word	0x0800b990

08001c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	; 0x50
 8001c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	2234      	movs	r2, #52	; 0x34
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f006 faed 	bl	8008236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c6c:	f002 fdb4 	bl	80047d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <SystemClock_Config+0xd8>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <SystemClock_Config+0xd8>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <SystemClock_Config+0xd8>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <SystemClock_Config+0xdc>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <SystemClock_Config+0xdc>)
 8001c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <SystemClock_Config+0xdc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ca4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ca8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001caa:	2302      	movs	r3, #2
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001cb8:	23d8      	movs	r3, #216	; 0xd8
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001cc0:	2309      	movs	r3, #9
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 fde3 	bl	8004898 <HAL_RCC_OscConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd8:	f000 f826 	bl	8001d28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cdc:	f002 fd8c 	bl	80047f8 <HAL_PWREx_EnableOverDrive>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001ce6:	f000 f81f 	bl	8001d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cea:	230f      	movs	r3, #15
 8001cec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cf6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	2107      	movs	r1, #7
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 f873 	bl	8004df4 <HAL_RCC_ClockConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d14:	f000 f808 	bl	8001d28 <Error_Handler>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3750      	adds	r7, #80	; 0x50
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2c:	b672      	cpsid	i
}
 8001d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d30:	e7fe      	b.n	8001d30 <Error_Handler+0x8>
	...

08001d34 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_RNG_Init+0x20>)
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <MX_RNG_Init+0x24>)
 8001d3c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_RNG_Init+0x20>)
 8001d40:	f003 fea6 	bl	8005a90 <HAL_RNG_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001d4a:	f7ff ffed 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000294 	.word	0x20000294
 8001d58:	50060800 	.word	0x50060800

08001d5c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a8      	sub	sp, #160	; 0xa0
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2290      	movs	r2, #144	; 0x90
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 fa62 	bl	8008236 <memset>
  if(rngHandle->Instance==RNG)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_RNG_MspInit+0x60>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d11b      	bne.n	8001db4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f003 fa57 	bl	8005240 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8001d98:	f7ff ffc6 	bl	8001d28 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_RNG_MspInit+0x64>)
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_RNG_MspInit+0x64>)
 8001da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da6:	6353      	str	r3, [r2, #52]	; 0x34
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RNG_MspInit+0x64>)
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001db4:	bf00      	nop
 8001db6:	37a0      	adds	r7, #160	; 0xa0
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	50060800 	.word	0x50060800
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_SPI5_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001dd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001dde:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001de2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e12:	2207      	movs	r2, #7
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_SPI5_Init+0x74>)
 8001e24:	f003 fe5e 	bl	8005ae4 <HAL_SPI_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f7ff ff7b 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200002a4 	.word	0x200002a4
 8001e3c:	40015000 	.word	0x40015000

08001e40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	; (8001ebc <HAL_SPI_MspInit+0x7c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d128      	bne.n	8001eb4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e62:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_SPI_MspInit+0x80>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <HAL_SPI_MspInit+0x80>)
 8001e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_SPI_MspInit+0x80>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <HAL_SPI_MspInit+0x80>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a10      	ldr	r2, [pc, #64]	; (8001ec0 <HAL_SPI_MspInit+0x80>)
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_SPI_MspInit+0x80>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e92:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_SPI_MspInit+0x84>)
 8001eb0:	f002 f880 	bl	8003fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	; 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40015000 	.word	0x40015000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40021400 	.word	0x40021400

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_MspInit+0x44>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x44>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x44>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x44>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f14:	f001 fa20 	bl	8003358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <ADC_IRQHandler+0x10>)
 8001f22:	f001 fbb7 	bl	8003694 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200001f4 	.word	0x200001f4

08001f30 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
	return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_kill>:

int _kill(int pid, int sig) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001f4a:	f006 f9c7 	bl	80082dc <__errno>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2216      	movs	r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
	return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_exit>:

void _exit(int status) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe7 	bl	8001f40 <_kill>
	while (1) {
 8001f72:	e7fe      	b.n	8001f72 <_exit+0x12>

08001f74 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e00a      	b.n	8001f9c <_read+0x28>
		*ptr++ = __io_getchar();
 8001f86:	f3af 8000 	nop.w
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbf0      	blt.n	8001f86 <_read+0x12>
	}

	return len;
 8001fa4:	687b      	ldr	r3, [r7, #4]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e009      	b.n	8001fd4 <_write+0x26>
		__io_putchar(*ptr++);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbf1      	blt.n	8001fc0 <_write+0x12>
	}
	return len;
 8001fdc:	687b      	ldr	r3, [r7, #4]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_close>:

int _close(int file) {
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_fstat>:

int _fstat(int file, struct stat *st) {
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200e:	605a      	str	r2, [r3, #4]
	return 0;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_isatty>:

int _isatty(int file) {
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <_sbrk+0x64>)
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <_sbrk+0x68>)
 8002070:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d207      	bcs.n	8002090 <_sbrk+0x40>
		errno = ENOMEM;
 8002080:	f006 f92c 	bl	80082dc <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	220c      	movs	r2, #12
 8002088:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e009      	b.n	80020a4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <_sbrk+0x64>)
 80020a0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20080000 	.word	0x20080000
 80020b0:	00000400 	.word	0x00000400
 80020b4:	20000308 	.word	0x20000308
 80020b8:	20000580 	.word	0x20000580

080020bc <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <SystemInit+0x20>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <SystemInit+0x20>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <MX_TIM1_Init+0xa0>)
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <MX_TIM1_Init+0xa4>)
 8002102:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <MX_TIM1_Init+0xa0>)
 8002106:	f242 720f 	movw	r2, #9999	; 0x270f
 800210a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <MX_TIM1_Init+0xa0>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <MX_TIM1_Init+0xa0>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_TIM1_Init+0xa0>)
 800211a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <MX_TIM1_Init+0xa0>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <MX_TIM1_Init+0xa0>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800212c:	4814      	ldr	r0, [pc, #80]	; (8002180 <MX_TIM1_Init+0xa0>)
 800212e:	f004 f87b 	bl	8006228 <HAL_TIM_Base_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002138:	f7ff fdf6 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002140:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <MX_TIM1_Init+0xa0>)
 800214a:	f004 f991 	bl	8006470 <HAL_TIM_ConfigClockSource>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002154:	f7ff fde8 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_TIM1_Init+0xa0>)
 800216a:	f004 fb85 	bl	8006878 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002174:	f7ff fdd8 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	2000030c 	.word	0x2000030c
 8002184:	40010000 	.word	0x40010000

08002188 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_TIM2_Init+0x98>)
 80021a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <MX_TIM2_Init+0x98>)
 80021b0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80021b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_TIM2_Init+0x98>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MX_TIM2_Init+0x98>)
 80021be:	f242 720f 	movw	r2, #9999	; 0x270f
 80021c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MX_TIM2_Init+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_TIM2_Init+0x98>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021d0:	4813      	ldr	r0, [pc, #76]	; (8002220 <MX_TIM2_Init+0x98>)
 80021d2:	f004 f829 	bl	8006228 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021dc:	f7ff fda4 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <MX_TIM2_Init+0x98>)
 80021ee:	f004 f93f 	bl	8006470 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80021f8:	f7ff fd96 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021fc:	2320      	movs	r3, #32
 80021fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_TIM2_Init+0x98>)
 800220a:	f004 fb35 	bl	8006878 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002214:	f7ff fd88 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000358 	.word	0x20000358

08002224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_TIM_Base_MspInit+0xa0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10c      	bne.n	8002260 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800225e:	e02c      	b.n	80022ba <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002268:	d127      	bne.n	80022ba <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_TIM_Base_MspInit+0xa4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800229a:	2320      	movs	r3, #32
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_TIM_Base_MspInit+0xa8>)
 80022b6:	f001 fe7d 	bl	8003fb4 <HAL_GPIO_Init>
}
 80022ba:	bf00      	nop
 80022bc:	3728      	adds	r7, #40	; 0x28
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020000 	.word	0x40020000

080022d0 <HAL_TIM_Base_MspDeInit>:

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <HAL_TIM_Base_MspDeInit+0x48>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d106      	bne.n	80022f0 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_TIM_Base_MspDeInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_TIM_Base_MspDeInit+0x4c>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44

  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }
}
 80022ee:	e00e      	b.n	800230e <HAL_TIM_Base_MspDeInit+0x3e>
  else if(tim_baseHandle->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d109      	bne.n	800230e <HAL_TIM_Base_MspDeInit+0x3e>
    __HAL_RCC_TIM2_CLK_DISABLE();
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_TIM_Base_MspDeInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_TIM_Base_MspDeInit+0x4c>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5);
 8002306:	2120      	movs	r1, #32
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <HAL_TIM_Base_MspDeInit+0x50>)
 800230a:	f001 ffff 	bl	800430c <HAL_GPIO_DeInit>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000

08002324 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <MX_USART3_UART_Init+0x58>)
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <MX_USART3_UART_Init+0x5c>)
 800232c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b11      	ldr	r3, [pc, #68]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <MX_USART3_UART_Init+0x58>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <MX_USART3_UART_Init+0x58>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <MX_USART3_UART_Init+0x58>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_USART3_UART_Init+0x58>)
 8002368:	f004 fb14 	bl	8006994 <HAL_UART_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002372:	f7ff fcd9 	bl	8001d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200003a4 	.word	0x200003a4
 8002380:	40004800 	.word	0x40004800

08002384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b0ae      	sub	sp, #184	; 0xb8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2290      	movs	r2, #144	; 0x90
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f005 ff46 	bl	8008236 <memset>
  if(uartHandle->Instance==USART3)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a22      	ldr	r2, [pc, #136]	; (8002438 <HAL_UART_MspInit+0xb4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d13c      	bne.n	800242e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 ff3c 	bl	8005240 <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023ce:	f7ff fcab 	bl	8001d28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023d2:	4b1a      	ldr	r3, [pc, #104]	; (800243c <HAL_UART_MspInit+0xb8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a19      	ldr	r2, [pc, #100]	; (800243c <HAL_UART_MspInit+0xb8>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_UART_MspInit+0xb8>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_UART_MspInit+0xb8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_UART_MspInit+0xb8>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <HAL_UART_MspInit+0xb8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002406:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800241c:	2307      	movs	r3, #7
 800241e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002422:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002426:	4619      	mov	r1, r3
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <HAL_UART_MspInit+0xbc>)
 800242a:	f001 fdc3 	bl	8003fb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800242e:	bf00      	nop
 8002430:	37b8      	adds	r7, #184	; 0xb8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40004800 	.word	0x40004800
 800243c:	40023800 	.word	0x40023800
 8002440:	40020c00 	.word	0x40020c00

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800244a:	490e      	ldr	r1, [pc, #56]	; (8002484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800244c:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002460:	4c0b      	ldr	r4, [pc, #44]	; (8002490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800246e:	f7ff fe25 	bl	80020bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f005 ff39 	bl	80082e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7ff fae7 	bl	8001a48 <main>
  bx  lr    
 800247a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002484:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002488:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 800248c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002490:	2000057c 	.word	0x2000057c

08002494 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <BusFault_Handler>

08002496 <ILI9341_Draw_Filled_Circle>:
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour)
{
 8002496:	b590      	push	{r4, r7, lr}
 8002498:	b08b      	sub	sp, #44	; 0x2c
 800249a:	af00      	add	r7, sp, #0
 800249c:	4604      	mov	r4, r0
 800249e:	4608      	mov	r0, r1
 80024a0:	4611      	mov	r1, r2
 80024a2:	461a      	mov	r2, r3
 80024a4:	4623      	mov	r3, r4
 80024a6:	80fb      	strh	r3, [r7, #6]
 80024a8:	4603      	mov	r3, r0
 80024aa:	80bb      	strh	r3, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	807b      	strh	r3, [r7, #2]
 80024b0:	4613      	mov	r3, r2
 80024b2:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	f1c3 0301 	rsb	r3, r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]

	while (x >= y)
 80024ce:	e061      	b.n	8002594 <ILI9341_Draw_Filled_Circle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e018      	b.n	800250c <ILI9341_Draw_Filled_Circle+0x76>
		{
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	b298      	uxth	r0, r3
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	4413      	add	r3, r2
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	883a      	ldrh	r2, [r7, #0]
 80024ea:	4619      	mov	r1, r3
 80024ec:	f000 fc84 	bl	8002df8 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	b298      	uxth	r0, r3
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	88ba      	ldrh	r2, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	883a      	ldrh	r2, [r7, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	f000 fc79 	bl	8002df8 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	3301      	adds	r3, #1
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	4413      	add	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	429a      	cmp	r2, r3
 8002516:	dde0      	ble.n	80024da <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++)
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	e018      	b.n	8002554 <ILI9341_Draw_Filled_Circle+0xbe>
		{
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	b298      	uxth	r0, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	b29a      	uxth	r2, r3
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	883a      	ldrh	r2, [r7, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	f000 fc60 	bl	8002df8 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	b298      	uxth	r0, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	b29b      	uxth	r3, r3
 8002540:	88ba      	ldrh	r2, [r7, #4]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	883a      	ldrh	r2, [r7, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f000 fc55 	bl	8002df8 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3301      	adds	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	4413      	add	r3, r2
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	dde0      	ble.n	8002522 <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	3301      	adds	r3, #1
 8002564:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4413      	add	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
		yChange += 2;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3302      	adds	r3, #2
 8002572:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005a      	lsls	r2, r3, #1
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	4413      	add	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	dd09      	ble.n	8002594 <ILI9341_Draw_Filled_Circle+0xfe>
		{
			x--;
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	3b01      	subs	r3, #1
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	617b      	str	r3, [r7, #20]
			xChange += 2;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3302      	adds	r3, #2
 8002592:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	da99      	bge.n	80024d0 <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	372c      	adds	r7, #44	; 0x2c
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}

080025a6 <ILI9341_Draw_Filled_Rectangle_Coord>:
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1,
		uint16_t Y1, uint16_t Colour)
{
 80025a6:	b590      	push	{r4, r7, lr}
 80025a8:	b089      	sub	sp, #36	; 0x24
 80025aa:	af02      	add	r7, sp, #8
 80025ac:	4604      	mov	r4, r0
 80025ae:	4608      	mov	r0, r1
 80025b0:	4611      	mov	r1, r2
 80025b2:	461a      	mov	r2, r3
 80025b4:	4623      	mov	r3, r4
 80025b6:	80fb      	strh	r3, [r7, #6]
 80025b8:	4603      	mov	r3, r0
 80025ba:	80bb      	strh	r3, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	803b      	strh	r3, [r7, #0]
	uint16_t X_length = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	82fb      	strh	r3, [r7, #22]
	uint16_t Y_length = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	82bb      	strh	r3, [r7, #20]
	uint8_t Negative_X = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	74fb      	strb	r3, [r7, #19]
	uint8_t Negative_Y = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	74bb      	strb	r3, [r7, #18]
	int32_t Calc_Negative = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60bb      	str	r3, [r7, #8]

	uint16_t X0_true = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	81fb      	strh	r3, [r7, #14]

	Calc_Negative = X1 - X0;
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	da01      	bge.n	80025f2 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
		Negative_X = 1;
 80025ee:	2301      	movs	r3, #1
 80025f0:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]

	Calc_Negative = Y1 - Y0;
 80025f6:	883a      	ldrh	r2, [r7, #0]
 80025f8:	88bb      	ldrh	r3, [r7, #4]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	60bb      	str	r3, [r7, #8]
	if (Calc_Negative < 0)
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	da01      	bge.n	8002608 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
		Negative_Y = 1;
 8002604:	2301      	movs	r3, #1
 8002606:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if (!Negative_X)
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	823b      	strh	r3, [r7, #16]
 800261a:	e005      	b.n	8002628 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800261c:	88fa      	ldrh	r2, [r7, #6]
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	823b      	strh	r3, [r7, #16]
	}

	//DRAW VERTICAL!
	if (!Negative_Y)
 8002628:	7cbb      	ldrb	r3, [r7, #18]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800262e:	883a      	ldrh	r2, [r7, #0]
 8002630:	88bb      	ldrh	r3, [r7, #4]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;
 8002636:	88bb      	ldrh	r3, [r7, #4]
 8002638:	81fb      	strh	r3, [r7, #14]
 800263a:	e005      	b.n	8002648 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 800263c:	88ba      	ldrh	r2, [r7, #4]
 800263e:	883b      	ldrh	r3, [r7, #0]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;
 8002644:	883b      	ldrh	r3, [r7, #0]
 8002646:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);
 8002648:	8abc      	ldrh	r4, [r7, #20]
 800264a:	8afa      	ldrh	r2, [r7, #22]
 800264c:	89f9      	ldrh	r1, [r7, #14]
 800264e:	8a38      	ldrh	r0, [r7, #16]
 8002650:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4623      	mov	r3, r4
 8002656:	f000 fca9 	bl	8002fac <ILI9341_Draw_Rectangle>
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
	...

08002664 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af02      	add	r7, sp, #8
 800266a:	4604      	mov	r4, r0
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	4623      	mov	r3, r4
 8002674:	71fb      	strb	r3, [r7, #7]
 8002676:	4603      	mov	r3, r0
 8002678:	71bb      	strb	r3, [r7, #6]
 800267a:	460b      	mov	r3, r1
 800267c:	717b      	strb	r3, [r7, #5]
 800267e:	4613      	mov	r3, r2
 8002680:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ')
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b1f      	cmp	r3, #31
 800268a:	d802      	bhi.n	8002692 <ILI9341_Draw_Char+0x2e>
	{
		Character = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	e002      	b.n	8002698 <ILI9341_Draw_Char+0x34>
	}
	else
	{
		function_char -= 32;
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	3b20      	subs	r3, #32
 8002696:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 8002698:	2300      	movs	r3, #0
 800269a:	753b      	strb	r3, [r7, #20]
 800269c:	e012      	b.n	80026c4 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800269e:	7dfa      	ldrb	r2, [r7, #23]
 80026a0:	7d38      	ldrb	r0, [r7, #20]
 80026a2:	7d39      	ldrb	r1, [r7, #20]
 80026a4:	4c3b      	ldr	r4, [pc, #236]	; (8002794 <ILI9341_Draw_Char+0x130>)
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4423      	add	r3, r4
 80026b0:	4403      	add	r3, r0
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	f101 0318 	add.w	r3, r1, #24
 80026b8:	443b      	add	r3, r7
 80026ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++)
 80026be:	7d3b      	ldrb	r3, [r7, #20]
 80026c0:	3301      	adds	r3, #1
 80026c2:	753b      	strb	r3, [r7, #20]
 80026c4:	7d3b      	ldrb	r3, [r7, #20]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d9e9      	bls.n	800269e <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 80026ca:	79bb      	ldrb	r3, [r7, #6]
 80026cc:	b298      	uxth	r0, r3
 80026ce:	797b      	ldrb	r3, [r7, #5]
 80026d0:	b299      	uxth	r1, r3
 80026d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026d4:	461a      	mov	r2, r3
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	4413      	add	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	b29c      	uxth	r4, r3
 80026e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4623      	mov	r3, r4
 80026ea:	f000 fc5f 	bl	8002fac <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	757b      	strb	r3, [r7, #21]
 80026f2:	e047      	b.n	8002784 <ILI9341_Draw_Char+0x120>
	{
		for (i = 0; i < CHAR_HEIGHT; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	75bb      	strb	r3, [r7, #22]
 80026f8:	e03e      	b.n	8002778 <ILI9341_Draw_Char+0x114>
		{
			if (temp[j] & (1 << i))
 80026fa:	7d7b      	ldrb	r3, [r7, #21]
 80026fc:	3318      	adds	r3, #24
 80026fe:	443b      	add	r3, r7
 8002700:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002704:	461a      	mov	r2, r3
 8002706:	7dbb      	ldrb	r3, [r7, #22]
 8002708:	fa42 f303 	asr.w	r3, r2, r3
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d02e      	beq.n	8002772 <ILI9341_Draw_Char+0x10e>
			{
				if (Size == 1)
 8002714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002716:	2b01      	cmp	r3, #1
 8002718:	d110      	bne.n	800273c <ILI9341_Draw_Char+0xd8>
				{
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	b29a      	uxth	r2, r3
 800271e:	7d7b      	ldrb	r3, [r7, #21]
 8002720:	b29b      	uxth	r3, r3
 8002722:	4413      	add	r3, r2
 8002724:	b298      	uxth	r0, r3
 8002726:	797b      	ldrb	r3, [r7, #5]
 8002728:	b29a      	uxth	r2, r3
 800272a:	7dbb      	ldrb	r3, [r7, #22]
 800272c:	b29b      	uxth	r3, r3
 800272e:	4413      	add	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	4619      	mov	r1, r3
 8002736:	f000 fb5f 	bl	8002df8 <ILI9341_Draw_Pixel>
 800273a:	e01a      	b.n	8002772 <ILI9341_Draw_Char+0x10e>
				}
				else
				{
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 800273c:	79bb      	ldrb	r3, [r7, #6]
 800273e:	b29a      	uxth	r2, r3
 8002740:	7d7b      	ldrb	r3, [r7, #21]
 8002742:	b29b      	uxth	r3, r3
 8002744:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002746:	fb11 f303 	smulbb	r3, r1, r3
 800274a:	b29b      	uxth	r3, r3
 800274c:	4413      	add	r3, r2
 800274e:	b298      	uxth	r0, r3
 8002750:	797b      	ldrb	r3, [r7, #5]
 8002752:	b29a      	uxth	r2, r3
 8002754:	7dbb      	ldrb	r3, [r7, #22]
 8002756:	b29b      	uxth	r3, r3
 8002758:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800275a:	fb11 f303 	smulbb	r3, r1, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	4413      	add	r3, r2
 8002762:	b299      	uxth	r1, r3
 8002764:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002766:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	4623      	mov	r3, r4
 800276e:	f000 fc1d 	bl	8002fac <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++)
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	3301      	adds	r3, #1
 8002776:	75bb      	strb	r3, [r7, #22]
 8002778:	7dbb      	ldrb	r3, [r7, #22]
 800277a:	2b07      	cmp	r3, #7
 800277c:	d9bd      	bls.n	80026fa <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++)
 800277e:	7d7b      	ldrb	r3, [r7, #21]
 8002780:	3301      	adds	r3, #1
 8002782:	757b      	strb	r3, [r7, #21]
 8002784:	7d7b      	ldrb	r3, [r7, #21]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d9b4      	bls.n	80026f4 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	0800b9d0 	.word	0x0800b9d0

08002798 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b085      	sub	sp, #20
 800279c:	af02      	add	r7, sp, #8
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	70fb      	strb	r3, [r7, #3]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70bb      	strb	r3, [r7, #2]
 80027ae:	4613      	mov	r3, r2
 80027b0:	803b      	strh	r3, [r7, #0]
	while (*Text)
 80027b2:	e017      	b.n	80027e4 <ILI9341_Draw_Text+0x4c>
	{
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	7818      	ldrb	r0, [r3, #0]
 80027bc:	883c      	ldrh	r4, [r7, #0]
 80027be:	78ba      	ldrb	r2, [r7, #2]
 80027c0:	78f9      	ldrb	r1, [r7, #3]
 80027c2:	8bbb      	ldrh	r3, [r7, #28]
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	8b3b      	ldrh	r3, [r7, #24]
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	4623      	mov	r3, r4
 80027cc:	f7ff ff4a 	bl	8002664 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 80027d0:	8b3b      	ldrh	r3, [r7, #24]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	0052      	lsls	r2, r2, #1
 80027d8:	4413      	add	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	78fb      	ldrb	r3, [r7, #3]
 80027e0:	4413      	add	r3, r2
 80027e2:	70fb      	strb	r3, [r7, #3]
	while (*Text)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e3      	bne.n	80027b4 <ILI9341_Draw_Text+0x1c>
	}
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
	...

080027f8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	MX_SPI5_Init();													//SPI INIT
 80027fc:	f7ff fae2 	bl	8001dc4 <MX_SPI5_Init>
	MX_GPIO_Init();													//GPIO INIT
 8002800:	f7fe fa9e 	bl	8000d40 <MX_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002804:	2200      	movs	r2, #0
 8002806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800280a:	4802      	ldr	r0, [pc, #8]	; (8002814 <ILI9341_SPI_Init+0x1c>)
 800280c:	f001 fea2 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40020800 	.word	0x40020800

08002818 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002822:	1df9      	adds	r1, r7, #7
 8002824:	2301      	movs	r3, #1
 8002826:	2201      	movs	r2, #1
 8002828:	4803      	ldr	r0, [pc, #12]	; (8002838 <ILI9341_SPI_Send+0x20>)
 800282a:	f003 fa06 	bl	8005c3a <HAL_SPI_Transmit>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200002a4 	.word	0x200002a4

0800283c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284c:	480b      	ldr	r0, [pc, #44]	; (800287c <ILI9341_Write_Command+0x40>)
 800284e:	f001 fe81 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002852:	2200      	movs	r2, #0
 8002854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002858:	4808      	ldr	r0, [pc, #32]	; (800287c <ILI9341_Write_Command+0x40>)
 800285a:	f001 fe7b 	bl	8004554 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ffd9 	bl	8002818 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <ILI9341_Write_Command+0x40>)
 800286e:	f001 fe71 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40020800 	.word	0x40020800

08002880 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <ILI9341_Write_Data+0x40>)
 8002892:	f001 fe5f 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289c:	4808      	ldr	r0, [pc, #32]	; (80028c0 <ILI9341_Write_Data+0x40>)
 800289e:	f001 fe59 	bl	8004554 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ffb7 	bl	8002818 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <ILI9341_Write_Data+0x40>)
 80028b2:	f001 fe4f 	bl	8004554 <HAL_GPIO_WritePin>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020800 	.word	0x40020800

080028c4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	80fb      	strh	r3, [r7, #6]
 80028d6:	4603      	mov	r3, r0
 80028d8:	80bb      	strh	r3, [r7, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	807b      	strh	r3, [r7, #2]
 80028de:	4613      	mov	r3, r2
 80028e0:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80028e2:	202a      	movs	r0, #42	; 0x2a
 80028e4:	f7ff ffaa 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(X1 >> 8);
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	0a1b      	lsrs	r3, r3, #8
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ffc5 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ffc0 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2 >> 8);
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ffb9 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ffb4 	bl	8002880 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8002918:	202b      	movs	r0, #43	; 0x2b
 800291a:	f7ff ff8f 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1 >> 8);
 800291e:	88bb      	ldrh	r3, [r7, #4]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	b29b      	uxth	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ffaa 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 800292c:	88bb      	ldrh	r3, [r7, #4]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ffa5 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2 >> 8);
 8002936:	883b      	ldrh	r3, [r7, #0]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	b29b      	uxth	r3, r3
 800293c:	b2db      	uxtb	r3, r3
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff9e 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8002944:	883b      	ldrh	r3, [r7, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff99 	bl	8002880 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 800294e:	202c      	movs	r0, #44	; 0x2c
 8002950:	f7ff ff74 	bl	800283c <ILI9341_Write_Command>
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}

0800295c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002966:	480b      	ldr	r0, [pc, #44]	; (8002994 <ILI9341_Reset+0x38>)
 8002968:	f001 fdf4 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800296c:	20c8      	movs	r0, #200	; 0xc8
 800296e:	f000 fd13 	bl	8003398 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002972:	2200      	movs	r2, #0
 8002974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002978:	4806      	ldr	r0, [pc, #24]	; (8002994 <ILI9341_Reset+0x38>)
 800297a:	f001 fdeb 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800297e:	20c8      	movs	r0, #200	; 0xc8
 8002980:	f000 fd0a 	bl	8003398 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002984:	2201      	movs	r2, #1
 8002986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800298a:	4802      	ldr	r0, [pc, #8]	; (8002994 <ILI9341_Reset+0x38>)
 800298c:	f001 fde2 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40020800 	.word	0x40020800

08002998 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = Rotation;
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	73fb      	strb	r3, [r7, #15]

	ILI9341_Write_Command(0x36);
 80029a6:	2036      	movs	r0, #54	; 0x36
 80029a8:	f7ff ff48 	bl	800283c <ILI9341_Write_Command>
	HAL_Delay(1);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f000 fcf3 	bl	8003398 <HAL_Delay>

	switch (screen_rotation)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d837      	bhi.n	8002a28 <ILI9341_Set_Rotation+0x90>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <ILI9341_Set_Rotation+0x28>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029e7 	.word	0x080029e7
 80029c8:	080029fd 	.word	0x080029fd
 80029cc:	08002a13 	.word	0x08002a13
	{
	case SCREEN_VERTICAL_1:
		ILI9341_Write_Data(0x40 | 0x08);
 80029d0:	2048      	movs	r0, #72	; 0x48
 80029d2:	f7ff ff55 	bl	8002880 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <ILI9341_Set_Rotation+0x9c>)
 80029d8:	22f0      	movs	r2, #240	; 0xf0
 80029da:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <ILI9341_Set_Rotation+0xa0>)
 80029de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029e2:	801a      	strh	r2, [r3, #0]
		break;
 80029e4:	e021      	b.n	8002a2a <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_1:
		ILI9341_Write_Data(0x20 | 0x08);
 80029e6:	2028      	movs	r0, #40	; 0x28
 80029e8:	f7ff ff4a 	bl	8002880 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <ILI9341_Set_Rotation+0x9c>)
 80029ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029f2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <ILI9341_Set_Rotation+0xa0>)
 80029f6:	22f0      	movs	r2, #240	; 0xf0
 80029f8:	801a      	strh	r2, [r3, #0]
		break;
 80029fa:	e016      	b.n	8002a2a <ILI9341_Set_Rotation+0x92>
	case SCREEN_VERTICAL_2:
		ILI9341_Write_Data(0x80 | 0x08);
 80029fc:	2088      	movs	r0, #136	; 0x88
 80029fe:	f7ff ff3f 	bl	8002880 <ILI9341_Write_Data>
		LCD_WIDTH = 240;
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <ILI9341_Set_Rotation+0x9c>)
 8002a04:	22f0      	movs	r2, #240	; 0xf0
 8002a06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <ILI9341_Set_Rotation+0xa0>)
 8002a0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a0e:	801a      	strh	r2, [r3, #0]
		break;
 8002a10:	e00b      	b.n	8002a2a <ILI9341_Set_Rotation+0x92>
	case SCREEN_HORIZONTAL_2:
		ILI9341_Write_Data(0x40 | 0x80 | 0x20 | 0x08);
 8002a12:	20e8      	movs	r0, #232	; 0xe8
 8002a14:	f7ff ff34 	bl	8002880 <ILI9341_Write_Data>
		LCD_WIDTH = 320;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <ILI9341_Set_Rotation+0x9c>)
 8002a1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <ILI9341_Set_Rotation+0xa0>)
 8002a22:	22f0      	movs	r2, #240	; 0xf0
 8002a24:	801a      	strh	r2, [r3, #0]
		break;
 8002a26:	e000      	b.n	8002a2a <ILI9341_Set_Rotation+0x92>
	default:
		//EXIT IF SCREEN ROTATION NOT VALID!
		break;
 8002a28:	bf00      	nop
	}
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000006 	.word	0x20000006
 8002a38:	20000004 	.word	0x20000004

08002a3c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002a40:	2201      	movs	r2, #1
 8002a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a46:	4802      	ldr	r0, [pc, #8]	; (8002a50 <ILI9341_Enable+0x14>)
 8002a48:	f001 fd84 	bl	8004554 <HAL_GPIO_WritePin>
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40020800 	.word	0x40020800

08002a54 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8002a58:	f7ff fff0 	bl	8002a3c <ILI9341_Enable>
	ILI9341_SPI_Init();
 8002a5c:	f7ff fecc 	bl	80027f8 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8002a60:	f7ff ff7c 	bl	800295c <ILI9341_Reset>

//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8002a64:	2001      	movs	r0, #1
 8002a66:	f7ff fee9 	bl	800283c <ILI9341_Write_Command>
	HAL_Delay(1000);
 8002a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a6e:	f000 fc93 	bl	8003398 <HAL_Delay>

//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8002a72:	20cb      	movs	r0, #203	; 0xcb
 8002a74:	f7ff fee2 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8002a78:	2039      	movs	r0, #57	; 0x39
 8002a7a:	f7ff ff01 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8002a7e:	202c      	movs	r0, #44	; 0x2c
 8002a80:	f7ff fefe 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7ff fefb 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8002a8a:	2034      	movs	r0, #52	; 0x34
 8002a8c:	f7ff fef8 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8002a90:	2002      	movs	r0, #2
 8002a92:	f7ff fef5 	bl	8002880 <ILI9341_Write_Data>

//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8002a96:	20cf      	movs	r0, #207	; 0xcf
 8002a98:	f7ff fed0 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff feef 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002aa2:	20c1      	movs	r0, #193	; 0xc1
 8002aa4:	f7ff feec 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8002aa8:	2030      	movs	r0, #48	; 0x30
 8002aaa:	f7ff fee9 	bl	8002880 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8002aae:	20e8      	movs	r0, #232	; 0xe8
 8002ab0:	f7ff fec4 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8002ab4:	2085      	movs	r0, #133	; 0x85
 8002ab6:	f7ff fee3 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7ff fee0 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8002ac0:	2078      	movs	r0, #120	; 0x78
 8002ac2:	f7ff fedd 	bl	8002880 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8002ac6:	20ea      	movs	r0, #234	; 0xea
 8002ac8:	f7ff feb8 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7ff fed7 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7ff fed4 	bl	8002880 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8002ad8:	20ed      	movs	r0, #237	; 0xed
 8002ada:	f7ff feaf 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8002ade:	2064      	movs	r0, #100	; 0x64
 8002ae0:	f7ff fece 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f7ff fecb 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8002aea:	2012      	movs	r0, #18
 8002aec:	f7ff fec8 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8002af0:	2081      	movs	r0, #129	; 0x81
 8002af2:	f7ff fec5 	bl	8002880 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8002af6:	20f7      	movs	r0, #247	; 0xf7
 8002af8:	f7ff fea0 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8002afc:	2020      	movs	r0, #32
 8002afe:	f7ff febf 	bl	8002880 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8002b02:	20c0      	movs	r0, #192	; 0xc0
 8002b04:	f7ff fe9a 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8002b08:	2023      	movs	r0, #35	; 0x23
 8002b0a:	f7ff feb9 	bl	8002880 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8002b0e:	20c1      	movs	r0, #193	; 0xc1
 8002b10:	f7ff fe94 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8002b14:	2010      	movs	r0, #16
 8002b16:	f7ff feb3 	bl	8002880 <ILI9341_Write_Data>

//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8002b1a:	20c5      	movs	r0, #197	; 0xc5
 8002b1c:	f7ff fe8e 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8002b20:	203e      	movs	r0, #62	; 0x3e
 8002b22:	f7ff fead 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8002b26:	2028      	movs	r0, #40	; 0x28
 8002b28:	f7ff feaa 	bl	8002880 <ILI9341_Write_Data>

//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8002b2c:	20c7      	movs	r0, #199	; 0xc7
 8002b2e:	f7ff fe85 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8002b32:	2086      	movs	r0, #134	; 0x86
 8002b34:	f7ff fea4 	bl	8002880 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8002b38:	2036      	movs	r0, #54	; 0x36
 8002b3a:	f7ff fe7f 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8002b3e:	2048      	movs	r0, #72	; 0x48
 8002b40:	f7ff fe9e 	bl	8002880 <ILI9341_Write_Data>

//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8002b44:	203a      	movs	r0, #58	; 0x3a
 8002b46:	f7ff fe79 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8002b4a:	2055      	movs	r0, #85	; 0x55
 8002b4c:	f7ff fe98 	bl	8002880 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8002b50:	20b1      	movs	r0, #177	; 0xb1
 8002b52:	f7ff fe73 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff fe92 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8002b5c:	2018      	movs	r0, #24
 8002b5e:	f7ff fe8f 	bl	8002880 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8002b62:	20b6      	movs	r0, #182	; 0xb6
 8002b64:	f7ff fe6a 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8002b68:	2008      	movs	r0, #8
 8002b6a:	f7ff fe89 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8002b6e:	2082      	movs	r0, #130	; 0x82
 8002b70:	f7ff fe86 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8002b74:	2027      	movs	r0, #39	; 0x27
 8002b76:	f7ff fe83 	bl	8002880 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8002b7a:	20f2      	movs	r0, #242	; 0xf2
 8002b7c:	f7ff fe5e 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7ff fe7d 	bl	8002880 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8002b86:	2026      	movs	r0, #38	; 0x26
 8002b88:	f7ff fe58 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	f7ff fe77 	bl	8002880 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8002b92:	20e0      	movs	r0, #224	; 0xe0
 8002b94:	f7ff fe52 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8002b98:	200f      	movs	r0, #15
 8002b9a:	f7ff fe71 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002b9e:	2031      	movs	r0, #49	; 0x31
 8002ba0:	f7ff fe6e 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8002ba4:	202b      	movs	r0, #43	; 0x2b
 8002ba6:	f7ff fe6b 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002baa:	200c      	movs	r0, #12
 8002bac:	f7ff fe68 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002bb0:	200e      	movs	r0, #14
 8002bb2:	f7ff fe65 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002bb6:	2008      	movs	r0, #8
 8002bb8:	f7ff fe62 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8002bbc:	204e      	movs	r0, #78	; 0x4e
 8002bbe:	f7ff fe5f 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8002bc2:	20f1      	movs	r0, #241	; 0xf1
 8002bc4:	f7ff fe5c 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8002bc8:	2037      	movs	r0, #55	; 0x37
 8002bca:	f7ff fe59 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002bce:	2007      	movs	r0, #7
 8002bd0:	f7ff fe56 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8002bd4:	2010      	movs	r0, #16
 8002bd6:	f7ff fe53 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002bda:	2003      	movs	r0, #3
 8002bdc:	f7ff fe50 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002be0:	200e      	movs	r0, #14
 8002be2:	f7ff fe4d 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8002be6:	2009      	movs	r0, #9
 8002be8:	f7ff fe4a 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff fe47 	bl	8002880 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8002bf2:	20e1      	movs	r0, #225	; 0xe1
 8002bf4:	f7ff fe22 	bl	800283c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7ff fe41 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8002bfe:	200e      	movs	r0, #14
 8002c00:	f7ff fe3e 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8002c04:	2014      	movs	r0, #20
 8002c06:	f7ff fe3b 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f7ff fe38 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8002c10:	2011      	movs	r0, #17
 8002c12:	f7ff fe35 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8002c16:	2007      	movs	r0, #7
 8002c18:	f7ff fe32 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002c1c:	2031      	movs	r0, #49	; 0x31
 8002c1e:	f7ff fe2f 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8002c22:	20c1      	movs	r0, #193	; 0xc1
 8002c24:	f7ff fe2c 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8002c28:	2048      	movs	r0, #72	; 0x48
 8002c2a:	f7ff fe29 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8002c2e:	2008      	movs	r0, #8
 8002c30:	f7ff fe26 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002c34:	200f      	movs	r0, #15
 8002c36:	f7ff fe23 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8002c3a:	200c      	movs	r0, #12
 8002c3c:	f7ff fe20 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8002c40:	2031      	movs	r0, #49	; 0x31
 8002c42:	f7ff fe1d 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8002c46:	2036      	movs	r0, #54	; 0x36
 8002c48:	f7ff fe1a 	bl	8002880 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8002c4c:	200f      	movs	r0, #15
 8002c4e:	f7ff fe17 	bl	8002880 <ILI9341_Write_Data>

//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8002c52:	2011      	movs	r0, #17
 8002c54:	f7ff fdf2 	bl	800283c <ILI9341_Write_Command>
	HAL_Delay(120);
 8002c58:	2078      	movs	r0, #120	; 0x78
 8002c5a:	f000 fb9d 	bl	8003398 <HAL_Delay>

//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8002c5e:	2029      	movs	r0, #41	; 0x29
 8002c60:	f7ff fdec 	bl	800283c <ILI9341_Write_Command>

//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7ff fe97 	bl	8002998 <ILI9341_Set_Rotation>
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c74:	b08d      	sub	sp, #52	; 0x34
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	6039      	str	r1, [r7, #0]
 8002c7c:	80fb      	strh	r3, [r7, #6]
 8002c7e:	466b      	mov	r3, sp
 8002c80:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c8e:	d202      	bcs.n	8002c96 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	e002      	b.n	8002c9c <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8002c96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca2:	4840      	ldr	r0, [pc, #256]	; (8002da4 <ILI9341_Draw_Colour_Burst+0x134>)
 8002ca4:	f001 fc56 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cae:	483d      	ldr	r0, [pc, #244]	; (8002da4 <ILI9341_Draw_Colour_Burst+0x134>)
 8002cb0:	f001 fc50 	bl	8004554 <HAL_GPIO_WritePin>

	unsigned char chifted = Colour >> 8;
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	;
	unsigned char burst_buffer[Buffer_Size];
 8002cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4688      	mov	r8, r1
 8002cca:	4699      	mov	r9, r3
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	461d      	mov	r5, r3
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	00eb      	lsls	r3, r5, #3
 8002cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf4:	00e2      	lsls	r2, r4, #3
 8002cf6:	1dcb      	adds	r3, r1, #7
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	ebad 0d03 	sub.w	sp, sp, r3
 8002d00:	466b      	mov	r3, sp
 8002d02:	3300      	adds	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d0a:	e00e      	b.n	8002d2a <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = chifted;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	4413      	add	r3, r2
 8002d12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d16:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = Colour;
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	88fa      	ldrh	r2, [r7, #6]
 8002d1e:	b2d1      	uxtb	r1, r2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 2)
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	3302      	adds	r3, #2
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3ec      	bcc.n	8002d0c <ILI9341_Draw_Colour_Burst+0x9c>
	}

	uint32_t Sending_Size = Size * 2;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d46:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d4c:	fb01 f202 	mul.w	r2, r1, r2
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d010      	beq.n	8002d7c <ILI9341_Draw_Colour_Burst+0x10c>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	e009      	b.n	8002d74 <ILI9341_Draw_Colour_Burst+0x104>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	230a      	movs	r3, #10
 8002d66:	69b9      	ldr	r1, [r7, #24]
 8002d68:	480f      	ldr	r0, [pc, #60]	; (8002da8 <ILI9341_Draw_Colour_Burst+0x138>)
 8002d6a:	f002 ff66 	bl	8005c3a <HAL_SPI_Transmit>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	3301      	adds	r3, #1
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3f1      	bcc.n	8002d60 <ILI9341_Draw_Colour_Burst+0xf0>
					Buffer_Size, 10);
		}
	}

//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) burst_buffer,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	230a      	movs	r3, #10
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	4808      	ldr	r0, [pc, #32]	; (8002da8 <ILI9341_Draw_Colour_Burst+0x138>)
 8002d86:	f002 ff58 	bl	8005c3a <HAL_SPI_Transmit>
			Remainder_from_block, 10);

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d90:	4804      	ldr	r0, [pc, #16]	; (8002da4 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d92:	f001 fbdf 	bl	8004554 <HAL_GPIO_WritePin>
 8002d96:	46b5      	mov	sp, r6
}
 8002d98:	bf00      	nop
 8002d9a:	3734      	adds	r7, #52	; 0x34
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002da2:	bf00      	nop
 8002da4:	40020800 	.word	0x40020800
 8002da8:	200002a4 	.word	0x200002a4

08002dac <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <ILI9341_Fill_Screen+0x44>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <ILI9341_Fill_Screen+0x48>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff fd7d 	bl	80028c4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH * LCD_HEIGHT);
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <ILI9341_Fill_Screen+0x44>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <ILI9341_Fill_Screen+0x48>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff44 	bl	8002c70 <ILI9341_Draw_Colour_Burst>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000006 	.word	0x20000006
 8002df4:	20000004 	.word	0x20000004

08002df8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X, uint16_t Y, uint16_t Colour)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
 8002e02:	460b      	mov	r3, r1
 8002e04:	80bb      	strh	r3, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	807b      	strh	r3, [r7, #2]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8002e0a:	4b64      	ldr	r3, [pc, #400]	; (8002f9c <ILI9341_Draw_Pixel+0x1a4>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	f080 80be 	bcs.w	8002f94 <ILI9341_Draw_Pixel+0x19c>
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <ILI9341_Draw_Pixel+0x1a8>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	88ba      	ldrh	r2, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f080 80b7 	bcs.w	8002f94 <ILI9341_Draw_Pixel+0x19c>
		return;	//OUT OF BOUNDS!

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e2c:	485d      	ldr	r0, [pc, #372]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002e2e:	f001 fb91 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
 8002e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e38:	485a      	ldr	r0, [pc, #360]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002e3a:	f001 fb8b 	bl	8004554 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2A);
 8002e3e:	202a      	movs	r0, #42	; 0x2a
 8002e40:	f7ff fcea 	bl	8002818 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002e44:	2201      	movs	r2, #1
 8002e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e4a:	4856      	ldr	r0, [pc, #344]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002e4c:	f001 fb82 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e50:	2201      	movs	r2, #1
 8002e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e56:	4853      	ldr	r0, [pc, #332]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002e58:	f001 fb7c 	bl	8004554 <HAL_GPIO_WritePin>

//XDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e62:	4850      	ldr	r0, [pc, #320]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002e64:	f001 fb76 	bl	8004554 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer[4] =
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	753b      	strb	r3, [r7, #20]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	757b      	strb	r3, [r7, #21]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	75bb      	strb	r3, [r7, #22]
	{ X >> 8, X, (X + 1) >> 8, (X + 1) };
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 8002e8a:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002e8c:	f107 0114 	add.w	r1, r7, #20
 8002e90:	2301      	movs	r3, #1
 8002e92:	2204      	movs	r2, #4
 8002e94:	4844      	ldr	r0, [pc, #272]	; (8002fa8 <ILI9341_Draw_Pixel+0x1b0>)
 8002e96:	f002 fed0 	bl	8005c3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ea0:	4840      	ldr	r0, [pc, #256]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002ea2:	f001 fb57 	bl	8004554 <HAL_GPIO_WritePin>

//ADDRESS
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eac:	483d      	ldr	r0, [pc, #244]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002eae:	f001 fb51 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eb8:	483a      	ldr	r0, [pc, #232]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002eba:	f001 fb4b 	bl	8004554 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2B);
 8002ebe:	202b      	movs	r0, #43	; 0x2b
 8002ec0:	f7ff fcaa 	bl	8002818 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eca:	4836      	ldr	r0, [pc, #216]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002ecc:	f001 fb42 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ed6:	4833      	ldr	r0, [pc, #204]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002ed8:	f001 fb3c 	bl	8004554 <HAL_GPIO_WritePin>

//YDATA
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ee2:	4830      	ldr	r0, [pc, #192]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002ee4:	f001 fb36 	bl	8004554 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer1[4] =
 8002ee8:	88bb      	ldrh	r3, [r7, #4]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	743b      	strb	r3, [r7, #16]
 8002ef2:	88bb      	ldrh	r3, [r7, #4]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	747b      	strb	r3, [r7, #17]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	3301      	adds	r3, #1
 8002efc:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	74bb      	strb	r3, [r7, #18]
	{ Y >> 8, Y, (Y + 1) >> 8, (Y + 1) };
 8002f02:	88bb      	ldrh	r3, [r7, #4]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 8002f0a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002f0c:	f107 0110 	add.w	r1, r7, #16
 8002f10:	2301      	movs	r3, #1
 8002f12:	2204      	movs	r2, #4
 8002f14:	4824      	ldr	r0, [pc, #144]	; (8002fa8 <ILI9341_Draw_Pixel+0x1b0>)
 8002f16:	f002 fe90 	bl	8005c3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f20:	4820      	ldr	r0, [pc, #128]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f22:	f001 fb17 	bl	8004554 <HAL_GPIO_WritePin>

//ADDRESS	
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8002f26:	2200      	movs	r2, #0
 8002f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f2c:	481d      	ldr	r0, [pc, #116]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f2e:	f001 fb11 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f32:	2200      	movs	r2, #0
 8002f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f38:	481a      	ldr	r0, [pc, #104]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f3a:	f001 fb0b 	bl	8004554 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8002f3e:	202c      	movs	r0, #44	; 0x2c
 8002f40:	f7ff fc6a 	bl	8002818 <ILI9341_SPI_Send>
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002f44:	2201      	movs	r2, #1
 8002f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f4a:	4816      	ldr	r0, [pc, #88]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f4c:	f001 fb02 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f50:	2201      	movs	r2, #1
 8002f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f56:	4813      	ldr	r0, [pc, #76]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f58:	f001 fafc 	bl	8004554 <HAL_GPIO_WritePin>

//COLOUR	
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f62:	4810      	ldr	r0, [pc, #64]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f64:	f001 faf6 	bl	8004554 <HAL_GPIO_WritePin>
	unsigned char Temp_Buffer2[2] =
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	733b      	strb	r3, [r7, #12]
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	737b      	strb	r3, [r7, #13]
	{ Colour >> 8, Colour };
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002f78:	f107 010c 	add.w	r1, r7, #12
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <ILI9341_Draw_Pixel+0x1b0>)
 8002f82:	f002 fe5a 	bl	8005c3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f86:	2201      	movs	r2, #1
 8002f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f8c:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <ILI9341_Draw_Pixel+0x1ac>)
 8002f8e:	f001 fae1 	bl	8004554 <HAL_GPIO_WritePin>
 8002f92:	e000      	b.n	8002f96 <ILI9341_Draw_Pixel+0x19e>
		return;	//OUT OF BOUNDS!
 8002f94:	bf00      	nop

}
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000006 	.word	0x20000006
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	200002a4 	.word	0x200002a4

08002fac <ILI9341_Draw_Rectangle>:
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width,
		uint16_t Height, uint16_t Colour)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	80fb      	strh	r3, [r7, #6]
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80bb      	strh	r3, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	803b      	strh	r3, [r7, #0]
	if ((X >= LCD_WIDTH) || (Y >= LCD_HEIGHT))
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <ILI9341_Draw_Rectangle+0xb0>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d23d      	bcs.n	8003052 <ILI9341_Draw_Rectangle+0xa6>
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <ILI9341_Draw_Rectangle+0xb4>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	88ba      	ldrh	r2, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d237      	bcs.n	8003052 <ILI9341_Draw_Rectangle+0xa6>
		return;
	if ((X + Width - 1) >= LCD_WIDTH)
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a1c      	ldr	r2, [pc, #112]	; (800305c <ILI9341_Draw_Rectangle+0xb0>)
 8002fea:	8812      	ldrh	r2, [r2, #0]
 8002fec:	b292      	uxth	r2, r2
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	dd05      	ble.n	8002ffe <ILI9341_Draw_Rectangle+0x52>
	{
		Width = LCD_WIDTH - X;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <ILI9341_Draw_Rectangle+0xb0>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	807b      	strh	r3, [r7, #2]
	}
	if ((Y + Height - 1) >= LCD_HEIGHT)
 8002ffe:	88ba      	ldrh	r2, [r7, #4]
 8003000:	883b      	ldrh	r3, [r7, #0]
 8003002:	4413      	add	r3, r2
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <ILI9341_Draw_Rectangle+0xb4>)
 8003006:	8812      	ldrh	r2, [r2, #0]
 8003008:	b292      	uxth	r2, r2
 800300a:	4293      	cmp	r3, r2
 800300c:	dd05      	ble.n	800301a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height = LCD_HEIGHT - Y;
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <ILI9341_Draw_Rectangle+0xb4>)
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29a      	uxth	r2, r3
 8003014:	88bb      	ldrh	r3, [r7, #4]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	803b      	strh	r3, [r7, #0]
	}
	ILI9341_Set_Address(X, Y, X + Width - 1, Y + Height - 1);
 800301a:	88fa      	ldrh	r2, [r7, #6]
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	4413      	add	r3, r2
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29c      	uxth	r4, r3
 8003026:	88ba      	ldrh	r2, [r7, #4]
 8003028:	883b      	ldrh	r3, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	88b9      	ldrh	r1, [r7, #4]
 8003034:	88f8      	ldrh	r0, [r7, #6]
 8003036:	4622      	mov	r2, r4
 8003038:	f7ff fc44 	bl	80028c4 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height * Width);
 800303c:	883b      	ldrh	r3, [r7, #0]
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	fb02 f303 	mul.w	r3, r2, r3
 8003044:	461a      	mov	r2, r3
 8003046:	8b3b      	ldrh	r3, [r7, #24]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fe10 	bl	8002c70 <ILI9341_Draw_Colour_Burst>
 8003050:	e000      	b.n	8003054 <ILI9341_Draw_Rectangle+0xa8>
		return;
 8003052:	bf00      	nop
}
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}
 800305a:	bf00      	nop
 800305c:	20000006 	.word	0x20000006
 8003060:	20000004 	.word	0x20000004

08003064 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	uint8_t i = 16;
 800306a:	2310      	movs	r3, #16
 800306c:	71fb      	strb	r3, [r7, #7]
	uint16_t value = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	80bb      	strh	r3, [r7, #4]

	while (i > 0x00)
 8003072:	e019      	b.n	80030a8 <TP_Read+0x44>
	{
		value <<= 1;
 8003074:	88bb      	ldrh	r3, [r7, #4]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	80bb      	strh	r3, [r7, #4]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800307a:	2201      	movs	r2, #1
 800307c:	2108      	movs	r1, #8
 800307e:	480e      	ldr	r0, [pc, #56]	; (80030b8 <TP_Read+0x54>)
 8003080:	f001 fa68 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	2108      	movs	r1, #8
 8003088:	480b      	ldr	r0, [pc, #44]	; (80030b8 <TP_Read+0x54>)
 800308a:	f001 fa63 	bl	8004554 <HAL_GPIO_WritePin>

		if (HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 800308e:	2110      	movs	r1, #16
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <TP_Read+0x54>)
 8003092:	f001 fa47 	bl	8004524 <HAL_GPIO_ReadPin>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <TP_Read+0x3e>
		{
			value++;
 800309c:	88bb      	ldrh	r3, [r7, #4]
 800309e:	3301      	adds	r3, #1
 80030a0:	80bb      	strh	r3, [r7, #4]
		}

		i--;
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	71fb      	strb	r3, [r7, #7]
	while (i > 0x00)
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e2      	bne.n	8003074 <TP_Read+0x10>
	};

	return value;
 80030ae:	88bb      	ldrh	r3, [r7, #4]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000

080030bc <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0x08;
 80030c6:	2308      	movs	r3, #8
 80030c8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2108      	movs	r1, #8
 80030ce:	4815      	ldr	r0, [pc, #84]	; (8003124 <TP_Write+0x68>)
 80030d0:	f001 fa40 	bl	8004554 <HAL_GPIO_WritePin>

	while (i > 0)
 80030d4:	e01e      	b.n	8003114 <TP_Write+0x58>
	{
		if ((value & 0x80) != 0x00)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	da05      	bge.n	80030ea <TP_Write+0x2e>
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 80030de:	2201      	movs	r2, #1
 80030e0:	2120      	movs	r1, #32
 80030e2:	4810      	ldr	r0, [pc, #64]	; (8003124 <TP_Write+0x68>)
 80030e4:	f001 fa36 	bl	8004554 <HAL_GPIO_WritePin>
 80030e8:	e004      	b.n	80030f4 <TP_Write+0x38>
		}
		else
		{
			HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2120      	movs	r1, #32
 80030ee:	480d      	ldr	r0, [pc, #52]	; (8003124 <TP_Write+0x68>)
 80030f0:	f001 fa30 	bl	8004554 <HAL_GPIO_WritePin>
		}

		value <<= 1;
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80030fa:	2201      	movs	r2, #1
 80030fc:	2108      	movs	r1, #8
 80030fe:	4809      	ldr	r0, [pc, #36]	; (8003124 <TP_Write+0x68>)
 8003100:	f001 fa28 	bl	8004554 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003104:	2200      	movs	r2, #0
 8003106:	2108      	movs	r1, #8
 8003108:	4806      	ldr	r0, [pc, #24]	; (8003124 <TP_Write+0x68>)
 800310a:	f001 fa23 	bl	8004554 <HAL_GPIO_WritePin>
		i--;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	3b01      	subs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
	while (i > 0)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1dd      	bne.n	80030d6 <TP_Write+0x1a>
	};
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000

08003128 <TP_Read_Coordinates>:

//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003130:	2201      	movs	r2, #1
 8003132:	2108      	movs	r1, #8
 8003134:	485a      	ldr	r0, [pc, #360]	; (80032a0 <TP_Read_Coordinates+0x178>)
 8003136:	f001 fa0d 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800313a:	2201      	movs	r2, #1
 800313c:	2120      	movs	r1, #32
 800313e:	4858      	ldr	r0, [pc, #352]	; (80032a0 <TP_Read_Coordinates+0x178>)
 8003140:	f001 fa08 	bl	8004554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003144:	2201      	movs	r2, #1
 8003146:	2140      	movs	r1, #64	; 0x40
 8003148:	4855      	ldr	r0, [pc, #340]	; (80032a0 <TP_Read_Coordinates+0x178>)
 800314a:	f001 fa03 	bl	8004554 <HAL_GPIO_WritePin>

	uint32_t avg_x, avg_y = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
	uint16_t rawx, rawy = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	81fb      	strh	r3, [r7, #14]
	uint32_t calculating_x, calculating_y = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	61bb      	str	r3, [r7, #24]

	uint32_t samples = NO_OF_POSITION_SAMPLES;
 800315a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800315e:	617b      	str	r3, [r7, #20]
	uint32_t counted_samples = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	484d      	ldr	r0, [pc, #308]	; (80032a0 <TP_Read_Coordinates+0x178>)
 800316a:	f001 f9f3 	bl	8004554 <HAL_GPIO_WritePin>

	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800316e:	e023      	b.n	80031b8 <TP_Read_Coordinates+0x90>
	{
		TP_Write(CMD_RDY);
 8003170:	2090      	movs	r0, #144	; 0x90
 8003172:	f7ff ffa3 	bl	80030bc <TP_Write>

		rawy = TP_Read();
 8003176:	f7ff ff75 	bl	8003064 <TP_Read>
 800317a:	4603      	mov	r3, r0
 800317c:	81fb      	strh	r3, [r7, #14]
		avg_y += rawy;
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	4413      	add	r3, r2
 8003184:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4413      	add	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]

		TP_Write(CMD_RDX);
 800318e:	20d0      	movs	r0, #208	; 0xd0
 8003190:	f7ff ff94 	bl	80030bc <TP_Write>
		rawx = TP_Read();
 8003194:	f7ff ff66 	bl	8003064 <TP_Read>
 8003198:	4603      	mov	r3, r0
 800319a:	81bb      	strh	r3, [r7, #12]
		avg_x += rawx;
 800319c:	89bb      	ldrh	r3, [r7, #12]
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4413      	add	r3, r2
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80031a4:	89bb      	ldrh	r3, [r7, #12]
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	61fb      	str	r3, [r7, #28]
		samples--;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3301      	adds	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
	while ((samples > 0) && (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <TP_Read_Coordinates+0xa4>
 80031be:	2104      	movs	r1, #4
 80031c0:	4837      	ldr	r0, [pc, #220]	; (80032a0 <TP_Read_Coordinates+0x178>)
 80031c2:	f001 f9af 	bl	8004524 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0d1      	beq.n	8003170 <TP_Read_Coordinates+0x48>
	};

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80031cc:	2201      	movs	r2, #1
 80031ce:	2140      	movs	r1, #64	; 0x40
 80031d0:	4833      	ldr	r0, [pc, #204]	; (80032a0 <TP_Read_Coordinates+0x178>)
 80031d2:	f001 f9bf 	bl	8004554 <HAL_GPIO_WritePin>

	if ((counted_samples == NO_OF_POSITION_SAMPLES)
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031dc:	d14d      	bne.n	800327a <TP_Read_Coordinates+0x152>
			&& (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80031de:	2104      	movs	r1, #4
 80031e0:	482f      	ldr	r0, [pc, #188]	; (80032a0 <TP_Read_Coordinates+0x178>)
 80031e2:	f001 f99f 	bl	8004524 <HAL_GPIO_ReadPin>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d146      	bne.n	800327a <TP_Read_Coordinates+0x152>
	{

		calculating_x /= counted_samples;
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	81fb      	strh	r3, [r7, #14]

		rawx *= -1;
 8003208:	89bb      	ldrh	r3, [r7, #12]
 800320a:	425b      	negs	r3, r3
 800320c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 800320e:	89fb      	ldrh	r3, [r7, #14]
 8003210:	425b      	negs	r3, r3
 8003212:	81fb      	strh	r3, [r7, #14]

		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 8003214:	89ba      	ldrh	r2, [r7, #12]
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <TP_Read_Coordinates+0x17c>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	1ad2      	subs	r2, r2, r3
 800321e:	0852      	lsrs	r2, r2, #1
 8003220:	4413      	add	r3, r2
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	b29b      	uxth	r3, r3
 8003226:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
				* X_MAGNITUDE;
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003232:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003298 <TP_Read_Coordinates+0x170>
 8003236:	ee27 7b06 	vmul.f64	d7, d7, d6
		Coordinates[0] = ((240 - (rawx / X_TRANSLATION)) - X_OFFSET)
 800323a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800323e:	ee17 3a90 	vmov	r3, s15
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy / Y_TRANSLATION) - Y_OFFSET) * Y_MAGNITUDE;
 8003248:	89fb      	ldrh	r3, [r7, #14]
 800324a:	4a17      	ldr	r2, [pc, #92]	; (80032a8 <TP_Read_Coordinates+0x180>)
 800324c:	fba2 2303 	umull	r2, r3, r2, r3
 8003250:	09db      	lsrs	r3, r3, #7
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b0f      	subs	r3, #15
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800325e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003298 <TP_Read_Coordinates+0x170>
 8003262:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3302      	adds	r3, #2
 800326a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800326e:	ee17 2a90 	vmov	r2, s15
 8003272:	b292      	uxth	r2, r2
 8003274:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 8003276:	2301      	movs	r3, #1
 8003278:	e007      	b.n	800328a <TP_Read_Coordinates+0x162>
	}
	else
	{
		Coordinates[0] = 0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = 0;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3302      	adds	r3, #2
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
		return TOUCHPAD_DATA_NOISY;
 8003288:	2300      	movs	r3, #0
	}
}
 800328a:	4618      	mov	r0, r3
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	f3af 8000 	nop.w
 8003298:	28f5c28f 	.word	0x28f5c28f
 800329c:	3ff28f5c 	.word	0x3ff28f5c
 80032a0:	40021000 	.word	0x40021000
 80032a4:	e01e01e1 	.word	0xe01e01e1
 80032a8:	a0a0a0a1 	.word	0xa0a0a0a1

080032ac <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 80032b0:	2104      	movs	r1, #4
 80032b2:	4805      	ldr	r0, [pc, #20]	; (80032c8 <TP_Touchpad_Pressed+0x1c>)
 80032b4:	f001 f936 	bl	8004524 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 80032c2:	2300      	movs	r3, #0
	}
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <HAL_Init+0x28>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a07      	ldr	r2, [pc, #28]	; (80032f4 <HAL_Init+0x28>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032dc:	2003      	movs	r0, #3
 80032de:	f000 fe27 	bl	8003f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f000 f808 	bl	80032f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e8:	f7fe fdee 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40023c00 	.word	0x40023c00

080032f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_InitTick+0x54>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_InitTick+0x58>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4619      	mov	r1, r3
 800330a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800330e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fe3f 	bl	8003f9a <HAL_SYSTICK_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e00e      	b.n	8003344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b0f      	cmp	r3, #15
 800332a:	d80a      	bhi.n	8003342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332c:	2200      	movs	r2, #0
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	f000 fe07 	bl	8003f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003338:	4a06      	ldr	r2, [pc, #24]	; (8003354 <HAL_InitTick+0x5c>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e000      	b.n	8003344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000000 	.word	0x20000000
 8003350:	2000000c 	.word	0x2000000c
 8003354:	20000008 	.word	0x20000008

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_IncTick+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_IncTick+0x24>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	2000000c 	.word	0x2000000c
 800337c:	2000042c 	.word	0x2000042c

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000042c 	.word	0x2000042c

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff ffee 	bl	8003380 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffde 	bl	8003380 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e031      	b.n	800345a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fc56 	bl	8000cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d116      	bne.n	800344c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003422:	4b10      	ldr	r3, [pc, #64]	; (8003464 <HAL_ADC_Init+0x84>)
 8003424:	4013      	ands	r3, r2
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fbaa 	bl	8003b88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f023 0303 	bic.w	r3, r3, #3
 8003442:	f043 0201 	orr.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
 800344a:	e001      	b.n	8003450 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	ffffeefd 	.word	0xffffeefd

08003468 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_ADC_Start_IT+0x1a>
 800347e:	2302      	movs	r3, #2
 8003480:	e0b5      	b.n	80035ee <HAL_ADC_Start_IT+0x186>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d018      	beq.n	80034ca <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80034a8:	4b54      	ldr	r3, [pc, #336]	; (80035fc <HAL_ADC_Start_IT+0x194>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a54      	ldr	r2, [pc, #336]	; (8003600 <HAL_ADC_Start_IT+0x198>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9a      	lsrs	r2, r3, #18
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80034bc:	e002      	b.n	80034c4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f9      	bne.n	80034be <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d17d      	bne.n	80035d4 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034dc:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_ADC_Start_IT+0x19c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d007      	beq.n	8003506 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003512:	d106      	bne.n	8003522 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f023 0206 	bic.w	r2, r3, #6
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
 8003520:	e002      	b.n	8003528 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003538:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b30      	ldr	r3, [pc, #192]	; (8003608 <HAL_ADC_Start_IT+0x1a0>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800354a:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_ADC_Start_IT+0x1a4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d143      	bne.n	80035ec <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e03a      	b.n	80035ec <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a25      	ldr	r2, [pc, #148]	; (8003610 <HAL_ADC_Start_IT+0x1a8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10e      	bne.n	800359e <HAL_ADC_Start_IT+0x136>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d107      	bne.n	800359e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800359c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_ADC_Start_IT+0x1a4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d120      	bne.n	80035ec <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a19      	ldr	r2, [pc, #100]	; (8003614 <HAL_ADC_Start_IT+0x1ac>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d11b      	bne.n	80035ec <HAL_ADC_Start_IT+0x184>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d114      	bne.n	80035ec <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	e00b      	b.n	80035ec <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0210 	orr.w	r2, r3, #16
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000000 	.word	0x20000000
 8003600:	431bde83 	.word	0x431bde83
 8003604:	fffff8fe 	.word	0xfffff8fe
 8003608:	04000020 	.word	0x04000020
 800360c:	40012300 	.word	0x40012300
 8003610:	40012000 	.word	0x40012000
 8003614:	40012200 	.word	0x40012200

08003618 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_ADC_Stop_IT+0x16>
 800362a:	2302      	movs	r3, #2
 800362c:	e027      	b.n	800367e <HAL_ADC_Stop_IT+0x66>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10f      	bne.n	8003674 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_ADC_Stop_IT+0x74>)
 8003660:	400b      	ands	r3, r1
 8003662:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_ADC_Stop_IT+0x78>)
 800366a:	4013      	ands	r3, r2
 800366c:	f043 0201 	orr.w	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	fbffffdf 	.word	0xfbffffdf
 8003690:	ffffeefe 	.word	0xffffeefe

08003694 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d049      	beq.n	800375e <HAL_ADC_IRQHandler+0xca>
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d046      	beq.n	800375e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d12b      	bne.n	800374e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d127      	bne.n	800374e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003716:	2b00      	cmp	r3, #0
 8003718:	d119      	bne.n	800374e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0220 	bic.w	r2, r2, #32
 8003728:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d105      	bne.n	800374e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe f966 	bl	8001a20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f06f 0212 	mvn.w	r2, #18
 800375c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d057      	beq.n	8003824 <HAL_ADC_IRQHandler+0x190>
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d054      	beq.n	8003824 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d105      	bne.n	8003792 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d139      	bne.n	8003814 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d12b      	bne.n	8003814 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d124      	bne.n	8003814 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d11d      	bne.n	8003814 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d119      	bne.n	8003814 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fab1 	bl	8003d7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 020c 	mvn.w	r2, #12
 8003822:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003832:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d017      	beq.n	800386a <HAL_ADC_IRQHandler+0x1d6>
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d014      	beq.n	800386a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d10d      	bne.n	800386a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f82a 	bl	80038b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0201 	mvn.w	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003878:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_ADC_IRQHandler+0x218>
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d012      	beq.n	80038ac <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 0220 	mvn.w	r2, #32
 800389a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f813 	bl	80038c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f06f 0220 	mvn.w	r2, #32
 80038aa:	601a      	str	r2, [r3, #0]
  }
}
 80038ac:	bf00      	nop
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x1c>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e136      	b.n	8003b66 <HAL_ADC_ConfigChannel+0x28a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b09      	cmp	r3, #9
 8003906:	d93a      	bls.n	800397e <HAL_ADC_ConfigChannel+0xa2>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003910:	d035      	beq.n	800397e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68d9      	ldr	r1, [r3, #12]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	3b1e      	subs	r3, #30
 8003928:	2207      	movs	r2, #7
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	400a      	ands	r2, r1
 8003936:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a8d      	ldr	r2, [pc, #564]	; (8003b74 <HAL_ADC_ConfigChannel+0x298>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10a      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68d9      	ldr	r1, [r3, #12]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	061a      	lsls	r2, r3, #24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003956:	e035      	b.n	80039c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68d9      	ldr	r1, [r3, #12]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	4618      	mov	r0, r3
 800396a:	4603      	mov	r3, r0
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4403      	add	r3, r0
 8003970:	3b1e      	subs	r3, #30
 8003972:	409a      	lsls	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800397c:	e022      	b.n	80039c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6919      	ldr	r1, [r3, #16]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	4613      	mov	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4413      	add	r3, r2
 8003992:	2207      	movs	r2, #7
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43da      	mvns	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	400a      	ands	r2, r1
 80039a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6919      	ldr	r1, [r3, #16]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	4403      	add	r3, r0
 80039ba:	409a      	lsls	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d824      	bhi.n	8003a16 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	3b05      	subs	r3, #5
 80039de:	221f      	movs	r2, #31
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43da      	mvns	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	400a      	ands	r2, r1
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4618      	mov	r0, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	3b05      	subs	r3, #5
 8003a08:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	635a      	str	r2, [r3, #52]	; 0x34
 8003a14:	e04c      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d824      	bhi.n	8003a68 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3b23      	subs	r3, #35	; 0x23
 8003a30:	221f      	movs	r2, #31
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3b23      	subs	r3, #35	; 0x23
 8003a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
 8003a66:	e023      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	3b41      	subs	r3, #65	; 0x41
 8003a7a:	221f      	movs	r2, #31
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43da      	mvns	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	400a      	ands	r2, r1
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	4618      	mov	r0, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3b41      	subs	r3, #65	; 0x41
 8003aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a30      	ldr	r2, [pc, #192]	; (8003b78 <HAL_ADC_ConfigChannel+0x29c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1f4>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac2:	d105      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003aca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003ace:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <HAL_ADC_ConfigChannel+0x29c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10f      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x21e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b12      	cmp	r3, #18
 8003ae0:	d10b      	bne.n	8003afa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4a25      	ldr	r2, [pc, #148]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003ae8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aec:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003af4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003af8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_ADC_ConfigChannel+0x29c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d12b      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x280>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1a      	ldr	r2, [pc, #104]	; (8003b74 <HAL_ADC_ConfigChannel+0x298>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <HAL_ADC_ConfigChannel+0x23a>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b11      	cmp	r3, #17
 8003b14:	d122      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003b16:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b20:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_ADC_ConfigChannel+0x2a0>)
 8003b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b2c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a10      	ldr	r2, [pc, #64]	; (8003b74 <HAL_ADC_ConfigChannel+0x298>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d111      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_ADC_ConfigChannel+0x2a4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <HAL_ADC_ConfigChannel+0x2a8>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0c9a      	lsrs	r2, r3, #18
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b4e:	e002      	b.n	8003b56 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f9      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	10000012 	.word	0x10000012
 8003b78:	40012000 	.word	0x40012000
 8003b7c:	40012300 	.word	0x40012300
 8003b80:	20000000 	.word	0x20000000
 8003b84:	431bde83 	.word	0x431bde83

08003b88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b90:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <ADC_Init+0x1ec>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a77      	ldr	r2, [pc, #476]	; (8003d74 <ADC_Init+0x1ec>)
 8003b96:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b9a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b9c:	4b75      	ldr	r3, [pc, #468]	; (8003d74 <ADC_Init+0x1ec>)
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4973      	ldr	r1, [pc, #460]	; (8003d74 <ADC_Init+0x1ec>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	021a      	lsls	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <ADC_Init+0x1f0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	e00f      	b.n	8003c82 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0202 	bic.w	r2, r2, #2
 8003c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	005a      	lsls	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	035a      	lsls	r2, r3, #13
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e007      	b.n	8003cf8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	051a      	lsls	r2, r3, #20
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6899      	ldr	r1, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3a:	025a      	lsls	r2, r3, #9
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6899      	ldr	r1, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	029a      	lsls	r2, r3, #10
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012300 	.word	0x40012300
 8003d78:	0f000001 	.word	0x0f000001

08003d7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <__NVIC_SetPriorityGrouping>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00
 8003dd4:	05fa0000 	.word	0x05fa0000

08003dd8 <__NVIC_GetPriorityGrouping>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <__NVIC_GetPriorityGrouping+0x18>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	f003 0307 	and.w	r3, r3, #7
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_EnableIRQ>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db0b      	blt.n	8003e1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	f003 021f 	and.w	r2, r3, #31
 8003e0c:	4907      	ldr	r1, [pc, #28]	; (8003e2c <__NVIC_EnableIRQ+0x38>)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2001      	movs	r0, #1
 8003e16:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e100 	.word	0xe000e100

08003e30 <__NVIC_SetPriority>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	db0a      	blt.n	8003e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	490c      	ldr	r1, [pc, #48]	; (8003e7c <__NVIC_SetPriority+0x4c>)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	0112      	lsls	r2, r2, #4
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	440b      	add	r3, r1
 8003e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e58:	e00a      	b.n	8003e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4908      	ldr	r1, [pc, #32]	; (8003e80 <__NVIC_SetPriority+0x50>)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	3b04      	subs	r3, #4
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	761a      	strb	r2, [r3, #24]
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000e100 	.word	0xe000e100
 8003e80:	e000ed00 	.word	0xe000ed00

08003e84 <NVIC_EncodePriority>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f1c3 0307 	rsb	r3, r3, #7
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	bf28      	it	cs
 8003ea2:	2304      	movcs	r3, #4
 8003ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d902      	bls.n	8003eb4 <NVIC_EncodePriority+0x30>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3b03      	subs	r3, #3
 8003eb2:	e000      	b.n	8003eb6 <NVIC_EncodePriority+0x32>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	4313      	orrs	r3, r2
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003efc:	d301      	bcc.n	8003f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003efe:	2301      	movs	r3, #1
 8003f00:	e00f      	b.n	8003f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <SysTick_Config+0x40>)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f0a:	210f      	movs	r1, #15
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	f7ff ff8e 	bl	8003e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <SysTick_Config+0x40>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <SysTick_Config+0x40>)
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	e000e010 	.word	0xe000e010

08003f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff29 	bl	8003d90 <__NVIC_SetPriorityGrouping>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b086      	sub	sp, #24
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	60b9      	str	r1, [r7, #8]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f58:	f7ff ff3e 	bl	8003dd8 <__NVIC_GetPriorityGrouping>
 8003f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	6978      	ldr	r0, [r7, #20]
 8003f64:	f7ff ff8e 	bl	8003e84 <NVIC_EncodePriority>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff ff5d 	bl	8003e30 <__NVIC_SetPriority>
}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4603      	mov	r3, r0
 8003f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff31 	bl	8003df4 <__NVIC_EnableIRQ>
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ffa2 	bl	8003eec <SysTick_Config>
 8003fa8:	4603      	mov	r3, r0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
 8003fd2:	e175      	b.n	80042c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	f040 8164 	bne.w	80042ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d005      	beq.n	800400a <HAL_GPIO_Init+0x56>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d130      	bne.n	800406c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	2203      	movs	r2, #3
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 0201 	and.w	r2, r3, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b03      	cmp	r3, #3
 8004076:	d017      	beq.n	80040a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d123      	bne.n	80040fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	08da      	lsrs	r2, r3, #3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3208      	adds	r2, #8
 80040bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	220f      	movs	r2, #15
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	69b9      	ldr	r1, [r7, #24]
 80040f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	2203      	movs	r2, #3
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80be 	beq.w	80042ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413e:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_GPIO_Init+0x324>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_GPIO_Init+0x324>)
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	6453      	str	r3, [r2, #68]	; 0x44
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_GPIO_Init+0x324>)
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004156:	4a61      	ldr	r2, [pc, #388]	; (80042dc <HAL_GPIO_Init+0x328>)
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	3302      	adds	r3, #2
 800415e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a58      	ldr	r2, [pc, #352]	; (80042e0 <HAL_GPIO_Init+0x32c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d037      	beq.n	80041f2 <HAL_GPIO_Init+0x23e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a57      	ldr	r2, [pc, #348]	; (80042e4 <HAL_GPIO_Init+0x330>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d031      	beq.n	80041ee <HAL_GPIO_Init+0x23a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a56      	ldr	r2, [pc, #344]	; (80042e8 <HAL_GPIO_Init+0x334>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d02b      	beq.n	80041ea <HAL_GPIO_Init+0x236>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a55      	ldr	r2, [pc, #340]	; (80042ec <HAL_GPIO_Init+0x338>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d025      	beq.n	80041e6 <HAL_GPIO_Init+0x232>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a54      	ldr	r2, [pc, #336]	; (80042f0 <HAL_GPIO_Init+0x33c>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d01f      	beq.n	80041e2 <HAL_GPIO_Init+0x22e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a53      	ldr	r2, [pc, #332]	; (80042f4 <HAL_GPIO_Init+0x340>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d019      	beq.n	80041de <HAL_GPIO_Init+0x22a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <HAL_GPIO_Init+0x344>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <HAL_GPIO_Init+0x226>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a51      	ldr	r2, [pc, #324]	; (80042fc <HAL_GPIO_Init+0x348>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00d      	beq.n	80041d6 <HAL_GPIO_Init+0x222>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a50      	ldr	r2, [pc, #320]	; (8004300 <HAL_GPIO_Init+0x34c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_GPIO_Init+0x21e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4f      	ldr	r2, [pc, #316]	; (8004304 <HAL_GPIO_Init+0x350>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_GPIO_Init+0x21a>
 80041ca:	2309      	movs	r3, #9
 80041cc:	e012      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041ce:	230a      	movs	r3, #10
 80041d0:	e010      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041d2:	2308      	movs	r3, #8
 80041d4:	e00e      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041d6:	2307      	movs	r3, #7
 80041d8:	e00c      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041da:	2306      	movs	r3, #6
 80041dc:	e00a      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041de:	2305      	movs	r3, #5
 80041e0:	e008      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041e2:	2304      	movs	r3, #4
 80041e4:	e006      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041e6:	2303      	movs	r3, #3
 80041e8:	e004      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e002      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <HAL_GPIO_Init+0x240>
 80041f2:	2300      	movs	r3, #0
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	f002 0203 	and.w	r2, r2, #3
 80041fa:	0092      	lsls	r2, r2, #2
 80041fc:	4093      	lsls	r3, r2
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004204:	4935      	ldr	r1, [pc, #212]	; (80042dc <HAL_GPIO_Init+0x328>)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	089b      	lsrs	r3, r3, #2
 800420a:	3302      	adds	r3, #2
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_GPIO_Init+0x354>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	43db      	mvns	r3, r3
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	4013      	ands	r3, r2
 8004220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004236:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_GPIO_Init+0x354>)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800423c:	4b32      	ldr	r3, [pc, #200]	; (8004308 <HAL_GPIO_Init+0x354>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <HAL_GPIO_Init+0x354>)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_GPIO_Init+0x354>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	43db      	mvns	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800428a:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <HAL_GPIO_Init+0x354>)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_GPIO_Init+0x354>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_GPIO_Init+0x354>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3301      	adds	r3, #1
 80042be:	61fb      	str	r3, [r7, #28]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b0f      	cmp	r3, #15
 80042c4:	f67f ae86 	bls.w	8003fd4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40020400 	.word	0x40020400
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40021000 	.word	0x40021000
 80042f4:	40021400 	.word	0x40021400
 80042f8:	40021800 	.word	0x40021800
 80042fc:	40021c00 	.word	0x40021c00
 8004300:	40022000 	.word	0x40022000
 8004304:	40022400 	.word	0x40022400
 8004308:	40013c00 	.word	0x40013c00

0800430c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	e0d9      	b.n	80044dc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004328:	2201      	movs	r2, #1
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	f040 80c9 	bne.w	80044d6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004344:	4a6b      	ldr	r2, [pc, #428]	; (80044f4 <HAL_GPIO_DeInit+0x1e8>)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	3302      	adds	r3, #2
 800434c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004350:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0303 	and.w	r3, r3, #3
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	220f      	movs	r2, #15
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a63      	ldr	r2, [pc, #396]	; (80044f8 <HAL_GPIO_DeInit+0x1ec>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d037      	beq.n	80043de <HAL_GPIO_DeInit+0xd2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a62      	ldr	r2, [pc, #392]	; (80044fc <HAL_GPIO_DeInit+0x1f0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <HAL_GPIO_DeInit+0xce>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a61      	ldr	r2, [pc, #388]	; (8004500 <HAL_GPIO_DeInit+0x1f4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d02b      	beq.n	80043d6 <HAL_GPIO_DeInit+0xca>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a60      	ldr	r2, [pc, #384]	; (8004504 <HAL_GPIO_DeInit+0x1f8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d025      	beq.n	80043d2 <HAL_GPIO_DeInit+0xc6>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a5f      	ldr	r2, [pc, #380]	; (8004508 <HAL_GPIO_DeInit+0x1fc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d01f      	beq.n	80043ce <HAL_GPIO_DeInit+0xc2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a5e      	ldr	r2, [pc, #376]	; (800450c <HAL_GPIO_DeInit+0x200>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d019      	beq.n	80043ca <HAL_GPIO_DeInit+0xbe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a5d      	ldr	r2, [pc, #372]	; (8004510 <HAL_GPIO_DeInit+0x204>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <HAL_GPIO_DeInit+0xba>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a5c      	ldr	r2, [pc, #368]	; (8004514 <HAL_GPIO_DeInit+0x208>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00d      	beq.n	80043c2 <HAL_GPIO_DeInit+0xb6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a5b      	ldr	r2, [pc, #364]	; (8004518 <HAL_GPIO_DeInit+0x20c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d007      	beq.n	80043be <HAL_GPIO_DeInit+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a5a      	ldr	r2, [pc, #360]	; (800451c <HAL_GPIO_DeInit+0x210>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d101      	bne.n	80043ba <HAL_GPIO_DeInit+0xae>
 80043b6:	2309      	movs	r3, #9
 80043b8:	e012      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043ba:	230a      	movs	r3, #10
 80043bc:	e010      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043be:	2308      	movs	r3, #8
 80043c0:	e00e      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043c2:	2307      	movs	r3, #7
 80043c4:	e00c      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043c6:	2306      	movs	r3, #6
 80043c8:	e00a      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043ca:	2305      	movs	r3, #5
 80043cc:	e008      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043ce:	2304      	movs	r3, #4
 80043d0:	e006      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043d2:	2303      	movs	r3, #3
 80043d4:	e004      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e002      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_GPIO_DeInit+0xd4>
 80043de:	2300      	movs	r3, #0
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	f002 0203 	and.w	r2, r2, #3
 80043e6:	0092      	lsls	r2, r2, #2
 80043e8:	4093      	lsls	r3, r2
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d132      	bne.n	8004456 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80043f0:	4b4b      	ldr	r3, [pc, #300]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	4949      	ldr	r1, [pc, #292]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80043fe:	4b48      	ldr	r3, [pc, #288]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	43db      	mvns	r3, r3
 8004406:	4946      	ldr	r1, [pc, #280]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 8004408:	4013      	ands	r3, r2
 800440a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800440c:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	43db      	mvns	r3, r3
 8004414:	4942      	ldr	r1, [pc, #264]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 8004416:	4013      	ands	r3, r2
 8004418:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 800441c:	689a      	ldr	r2, [r3, #8]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	43db      	mvns	r3, r3
 8004422:	493f      	ldr	r1, [pc, #252]	; (8004520 <HAL_GPIO_DeInit+0x214>)
 8004424:	4013      	ands	r3, r2
 8004426:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	220f      	movs	r2, #15
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004438:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <HAL_GPIO_DeInit+0x1e8>)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	43da      	mvns	r2, r3
 8004448:	482a      	ldr	r0, [pc, #168]	; (80044f4 <HAL_GPIO_DeInit+0x1e8>)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	089b      	lsrs	r3, r3, #2
 800444e:	400a      	ands	r2, r1
 8004450:	3302      	adds	r3, #2
 8004452:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	2103      	movs	r1, #3
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	401a      	ands	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	08da      	lsrs	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3208      	adds	r2, #8
 8004474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	08d2      	lsrs	r2, r2, #3
 800448c:	4019      	ands	r1, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3208      	adds	r2, #8
 8004492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	2103      	movs	r1, #3
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	43db      	mvns	r3, r3
 80044a6:	401a      	ands	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	2101      	movs	r1, #1
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	401a      	ands	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2103      	movs	r1, #3
 80044ca:	fa01 f303 	lsl.w	r3, r1, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	401a      	ands	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3301      	adds	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b0f      	cmp	r3, #15
 80044e0:	f67f af22 	bls.w	8004328 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800
 8004504:	40020c00 	.word	0x40020c00
 8004508:	40021000 	.word	0x40021000
 800450c:	40021400 	.word	0x40021400
 8004510:	40021800 	.word	0x40021800
 8004514:	40021c00 	.word	0x40021c00
 8004518:	40022000 	.word	0x40022000
 800451c:	40022400 	.word	0x40022400
 8004520:	40013c00 	.word	0x40013c00

08004524 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800453c:	2301      	movs	r3, #1
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e001      	b.n	8004546 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	807b      	strh	r3, [r7, #2]
 8004560:	4613      	mov	r3, r2
 8004562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004564:	787b      	ldrb	r3, [r7, #1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456a:	887a      	ldrh	r2, [r7, #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004570:	e003      	b.n	800457a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004572:	887b      	ldrh	r3, [r7, #2]
 8004574:	041a      	lsls	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	619a      	str	r2, [r3, #24]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07f      	b.n	800469a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fd38 	bl	8001024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2224      	movs	r2, #36	; 0x24
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d107      	bne.n	8004602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	e006      	b.n	8004610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800460e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d104      	bne.n	8004622 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_I2C_Init+0x11c>)
 800462e:	430b      	orrs	r3, r1
 8004630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1a      	ldr	r2, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	02008000 	.word	0x02008000

080046a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d138      	bne.n	8004730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e032      	b.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6819      	ldr	r1, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b20      	cmp	r3, #32
 8004752:	d139      	bne.n	80047c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800475e:	2302      	movs	r3, #2
 8004760:	e033      	b.n	80047ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2224      	movs	r2, #36	; 0x24
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40007000 	.word	0x40007000

080047f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	4b23      	ldr	r3, [pc, #140]	; (8004890 <HAL_PWREx_EnableOverDrive+0x98>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_PWREx_EnableOverDrive+0x98>)
 8004808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480c:	6413      	str	r3, [r2, #64]	; 0x40
 800480e:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_PWREx_EnableOverDrive+0x98>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800481a:	4b1e      	ldr	r3, [pc, #120]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004826:	f7fe fdab 	bl	8003380 <HAL_GetTick>
 800482a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800482c:	e009      	b.n	8004842 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800482e:	f7fe fda7 	bl	8003380 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483c:	d901      	bls.n	8004842 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e022      	b.n	8004888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004842:	4b14      	ldr	r3, [pc, #80]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484e:	d1ee      	bne.n	800482e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004850:	4b10      	ldr	r3, [pc, #64]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a0f      	ldr	r2, [pc, #60]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800485c:	f7fe fd90 	bl	8003380 <HAL_GetTick>
 8004860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004862:	e009      	b.n	8004878 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004864:	f7fe fd8c 	bl	8003380 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004872:	d901      	bls.n	8004878 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e007      	b.n	8004888 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_PWREx_EnableOverDrive+0x9c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004884:	d1ee      	bne.n	8004864 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000

08004898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80048a0:	2300      	movs	r3, #0
 80048a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e29b      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8087 	beq.w	80049ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048bc:	4b96      	ldr	r3, [pc, #600]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d00c      	beq.n	80048e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c8:	4b93      	ldr	r3, [pc, #588]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f003 030c 	and.w	r3, r3, #12
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d112      	bne.n	80048fa <HAL_RCC_OscConfig+0x62>
 80048d4:	4b90      	ldr	r3, [pc, #576]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e0:	d10b      	bne.n	80048fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e2:	4b8d      	ldr	r3, [pc, #564]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d06c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x130>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d168      	bne.n	80049c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e275      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004902:	d106      	bne.n	8004912 <HAL_RCC_OscConfig+0x7a>
 8004904:	4b84      	ldr	r3, [pc, #528]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a83      	ldr	r2, [pc, #524]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800490a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	e02e      	b.n	8004970 <HAL_RCC_OscConfig+0xd8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10c      	bne.n	8004934 <HAL_RCC_OscConfig+0x9c>
 800491a:	4b7f      	ldr	r3, [pc, #508]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7e      	ldr	r2, [pc, #504]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a7b      	ldr	r2, [pc, #492]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800492c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xd8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0xc0>
 800493e:	4b76      	ldr	r3, [pc, #472]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a75      	ldr	r2, [pc, #468]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b73      	ldr	r3, [pc, #460]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a72      	ldr	r2, [pc, #456]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xd8>
 8004958:	4b6f      	ldr	r3, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6e      	ldr	r2, [pc, #440]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b6c      	ldr	r3, [pc, #432]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a6b      	ldr	r2, [pc, #428]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fe fd02 	bl	8003380 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7fe fcfe 	bl	8003380 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e229      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b61      	ldr	r3, [pc, #388]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe fcee 	bl	8003380 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fe fcea 	bl	8003380 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e215      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b57      	ldr	r3, [pc, #348]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x110>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d069      	beq.n	8004aaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d6:	4b50      	ldr	r3, [pc, #320]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b4d      	ldr	r3, [pc, #308]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x190>
 80049ee:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x17a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1e9      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	493d      	ldr	r1, [pc, #244]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e040      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d023      	beq.n	8004a78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a38      	ldr	r2, [pc, #224]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fca0 	bl	8003380 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a44:	f7fe fc9c 	bl	8003380 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1c7      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4929      	ldr	r1, [pc, #164]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
 8004a76:	e018      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a26      	ldr	r2, [pc, #152]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fe fc7c 	bl	8003380 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fe fc78 	bl	8003380 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e1a3      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d038      	beq.n	8004b28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d019      	beq.n	8004af2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aca:	f7fe fc59 	bl	8003380 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fe fc55 	bl	8003380 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e180      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x23a>
 8004af0:	e01a      	b.n	8004b28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af2:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <HAL_RCC_OscConfig+0x280>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fe fc3f 	bl	8003380 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b06:	f7fe fc3b 	bl	8003380 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d903      	bls.n	8004b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e166      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
 8004b18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	4b92      	ldr	r3, [pc, #584]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80a4 	beq.w	8004c7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b8c      	ldr	r3, [pc, #560]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10d      	bne.n	8004b5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	4b89      	ldr	r3, [pc, #548]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a88      	ldr	r2, [pc, #544]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b86      	ldr	r3, [pc, #536]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b5e:	4b83      	ldr	r3, [pc, #524]	; (8004d6c <HAL_RCC_OscConfig+0x4d4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d118      	bne.n	8004b9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b6a:	4b80      	ldr	r3, [pc, #512]	; (8004d6c <HAL_RCC_OscConfig+0x4d4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7f      	ldr	r2, [pc, #508]	; (8004d6c <HAL_RCC_OscConfig+0x4d4>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b76:	f7fe fc03 	bl	8003380 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fe fbff 	bl	8003380 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b64      	cmp	r3, #100	; 0x64
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e12a      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b90:	4b76      	ldr	r3, [pc, #472]	; (8004d6c <HAL_RCC_OscConfig+0x4d4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x31a>
 8004ba4:	4b70      	ldr	r3, [pc, #448]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a6f      	ldr	r2, [pc, #444]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	e02d      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x33c>
 8004bba:	4b6b      	ldr	r3, [pc, #428]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a6a      	ldr	r2, [pc, #424]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc6:	4b68      	ldr	r3, [pc, #416]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a67      	ldr	r2, [pc, #412]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	e01c      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b05      	cmp	r3, #5
 8004bda:	d10c      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
 8004bdc:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4a61      	ldr	r2, [pc, #388]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004be2:	f043 0304 	orr.w	r3, r3, #4
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70
 8004be8:	4b5f      	ldr	r3, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a5e      	ldr	r2, [pc, #376]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf4:	e00b      	b.n	8004c0e <HAL_RCC_OscConfig+0x376>
 8004bf6:	4b5c      	ldr	r3, [pc, #368]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a5b      	ldr	r2, [pc, #364]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70
 8004c02:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a58      	ldr	r2, [pc, #352]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c08:	f023 0304 	bic.w	r3, r3, #4
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d015      	beq.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c16:	f7fe fbb3 	bl	8003380 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1e:	f7fe fbaf 	bl	8003380 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e0d8      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ee      	beq.n	8004c1e <HAL_RCC_OscConfig+0x386>
 8004c40:	e014      	b.n	8004c6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fe fb9d 	bl	8003380 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fe fb99 	bl	8003380 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0c2      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ee      	bne.n	8004c4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a3c      	ldr	r2, [pc, #240]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80ae 	beq.w	8004de4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c88:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 030c 	and.w	r3, r3, #12
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d06d      	beq.n	8004d70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d14b      	bne.n	8004d34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c9c:	4b32      	ldr	r3, [pc, #200]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a31      	ldr	r2, [pc, #196]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fe fb6a 	bl	8003380 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fe fb66 	bl	8003380 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e091      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	019b      	lsls	r3, r3, #6
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	491b      	ldr	r1, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fe fb38 	bl	8003380 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fe fb34 	bl	8003380 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e05f      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0x47c>
 8004d32:	e057      	b.n	8004de4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a0b      	ldr	r2, [pc, #44]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe fb1e 	bl	8003380 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fe fb1a 	bl	8003380 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e045      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCC_OscConfig+0x4d0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4b0>
 8004d66:	e03d      	b.n	8004de4 <HAL_RCC_OscConfig+0x54c>
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d70:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <HAL_RCC_OscConfig+0x558>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d030      	beq.n	8004de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d129      	bne.n	8004de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d122      	bne.n	8004de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004da0:	4013      	ands	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004da6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d119      	bne.n	8004de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	3b01      	subs	r3, #1
 8004dba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d10f      	bne.n	8004de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d107      	bne.n	8004de0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	40023800 	.word	0x40023800

08004df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0d0      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d910      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b67      	ldr	r3, [pc, #412]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 020f 	bic.w	r2, r3, #15
 8004e22:	4965      	ldr	r1, [pc, #404]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b63      	ldr	r3, [pc, #396]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 030f 	and.w	r3, r3, #15
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0b8      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e54:	4b59      	ldr	r3, [pc, #356]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a58      	ldr	r2, [pc, #352]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e6c:	4b53      	ldr	r3, [pc, #332]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a52      	ldr	r2, [pc, #328]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e78:	4b50      	ldr	r3, [pc, #320]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	494d      	ldr	r1, [pc, #308]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d040      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d107      	bne.n	8004eae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9e:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d115      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e07f      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb6:	4b41      	ldr	r3, [pc, #260]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e073      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06b      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 0203 	bic.w	r2, r3, #3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4936      	ldr	r1, [pc, #216]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fe fa4a 	bl	8003380 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef0:	f7fe fa46 	bl	8003380 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e053      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f06:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 020c 	and.w	r2, r3, #12
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d1eb      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d210      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f023 020f 	bic.w	r2, r3, #15
 8004f2e:	4922      	ldr	r1, [pc, #136]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e032      	b.n	8004fae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d008      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	4916      	ldr	r1, [pc, #88]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d009      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f72:	4b12      	ldr	r3, [pc, #72]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	490e      	ldr	r1, [pc, #56]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f86:	f000 f821 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCC_ClockConfig+0x1c8>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	091b      	lsrs	r3, r3, #4
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	490a      	ldr	r1, [pc, #40]	; (8004fc0 <HAL_RCC_ClockConfig+0x1cc>)
 8004f98:	5ccb      	ldrb	r3, [r1, r3]
 8004f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <HAL_RCC_ClockConfig+0x1d0>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fa2:	4b09      	ldr	r3, [pc, #36]	; (8004fc8 <HAL_RCC_ClockConfig+0x1d4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f9a6 	bl	80032f8 <HAL_InitTick>

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023c00 	.word	0x40023c00
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	0800b9b8 	.word	0x0800b9b8
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	20000008 	.word	0x20000008

08004fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd0:	b094      	sub	sp, #80	; 0x50
 8004fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd8:	2300      	movs	r3, #0
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	2300      	movs	r3, #0
 8004fde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe4:	4b79      	ldr	r3, [pc, #484]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 030c 	and.w	r3, r3, #12
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d00d      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x40>
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	f200 80e1 	bhi.w	80051b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_RCC_GetSysClockFreq+0x34>
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d003      	beq.n	8005006 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ffe:	e0db      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005000:	4b73      	ldr	r3, [pc, #460]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005004:	e0db      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005006:	4b73      	ldr	r3, [pc, #460]	; (80051d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800500a:	e0d8      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800500c:	4b6f      	ldr	r3, [pc, #444]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005014:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005016:	4b6d      	ldr	r3, [pc, #436]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d063      	beq.n	80050ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005022:	4b6a      	ldr	r3, [pc, #424]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	2200      	movs	r2, #0
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
 800502c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005034:	633b      	str	r3, [r7, #48]	; 0x30
 8005036:	2300      	movs	r3, #0
 8005038:	637b      	str	r3, [r7, #52]	; 0x34
 800503a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800503e:	4622      	mov	r2, r4
 8005040:	462b      	mov	r3, r5
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	0159      	lsls	r1, r3, #5
 800504c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005050:	0150      	lsls	r0, r2, #5
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4621      	mov	r1, r4
 8005058:	1a51      	subs	r1, r2, r1
 800505a:	6139      	str	r1, [r7, #16]
 800505c:	4629      	mov	r1, r5
 800505e:	eb63 0301 	sbc.w	r3, r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	018b      	lsls	r3, r1, #6
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800507a:	4651      	mov	r1, sl
 800507c:	018a      	lsls	r2, r1, #6
 800507e:	4651      	mov	r1, sl
 8005080:	ebb2 0801 	subs.w	r8, r2, r1
 8005084:	4659      	mov	r1, fp
 8005086:	eb63 0901 	sbc.w	r9, r3, r1
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800509a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800509e:	4690      	mov	r8, r2
 80050a0:	4699      	mov	r9, r3
 80050a2:	4623      	mov	r3, r4
 80050a4:	eb18 0303 	adds.w	r3, r8, r3
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	462b      	mov	r3, r5
 80050ac:	eb49 0303 	adc.w	r3, r9, r3
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050be:	4629      	mov	r1, r5
 80050c0:	024b      	lsls	r3, r1, #9
 80050c2:	4621      	mov	r1, r4
 80050c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050c8:	4621      	mov	r1, r4
 80050ca:	024a      	lsls	r2, r1, #9
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d2:	2200      	movs	r2, #0
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050dc:	f7fb fac4 	bl	8000668 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4613      	mov	r3, r2
 80050e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e8:	e058      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ea:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	2200      	movs	r2, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	4611      	mov	r1, r2
 80050f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005104:	4642      	mov	r2, r8
 8005106:	464b      	mov	r3, r9
 8005108:	f04f 0000 	mov.w	r0, #0
 800510c:	f04f 0100 	mov.w	r1, #0
 8005110:	0159      	lsls	r1, r3, #5
 8005112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005116:	0150      	lsls	r0, r2, #5
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4641      	mov	r1, r8
 800511e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005122:	4649      	mov	r1, r9
 8005124:	eb63 0b01 	sbc.w	fp, r3, r1
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005134:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005138:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800513c:	ebb2 040a 	subs.w	r4, r2, sl
 8005140:	eb63 050b 	sbc.w	r5, r3, fp
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	00eb      	lsls	r3, r5, #3
 800514e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005152:	00e2      	lsls	r2, r4, #3
 8005154:	4614      	mov	r4, r2
 8005156:	461d      	mov	r5, r3
 8005158:	4643      	mov	r3, r8
 800515a:	18e3      	adds	r3, r4, r3
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	464b      	mov	r3, r9
 8005160:	eb45 0303 	adc.w	r3, r5, r3
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005172:	4629      	mov	r1, r5
 8005174:	028b      	lsls	r3, r1, #10
 8005176:	4621      	mov	r1, r4
 8005178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800517c:	4621      	mov	r1, r4
 800517e:	028a      	lsls	r2, r1, #10
 8005180:	4610      	mov	r0, r2
 8005182:	4619      	mov	r1, r3
 8005184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005186:	2200      	movs	r2, #0
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	61fa      	str	r2, [r7, #28]
 800518c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005190:	f7fb fa6a 	bl	8000668 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_RCC_GetSysClockFreq+0x200>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	3301      	adds	r3, #1
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80051ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051b6:	e002      	b.n	80051be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3750      	adds	r7, #80	; 0x50
 80051c4:	46bd      	mov	sp, r7
 80051c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800
 80051d0:	00f42400 	.word	0x00f42400
 80051d4:	007a1200 	.word	0x007a1200

080051d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <HAL_RCC_GetHCLKFreq+0x14>)
 80051de:	681b      	ldr	r3, [r3, #0]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	20000000 	.word	0x20000000

080051f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051f4:	f7ff fff0 	bl	80051d8 <HAL_RCC_GetHCLKFreq>
 80051f8:	4602      	mov	r2, r0
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	0a9b      	lsrs	r3, r3, #10
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	4903      	ldr	r1, [pc, #12]	; (8005214 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005206:	5ccb      	ldrb	r3, [r1, r3]
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40023800 	.word	0x40023800
 8005214:	0800b9c8 	.word	0x0800b9c8

08005218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800521c:	f7ff ffdc 	bl	80051d8 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	0b5b      	lsrs	r3, r3, #13
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4903      	ldr	r1, [pc, #12]	; (800523c <HAL_RCC_GetPCLK2Freq+0x24>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40023800 	.word	0x40023800
 800523c:	0800b9c8 	.word	0x0800b9c8

08005240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d012      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005268:	4b69      	ldr	r3, [pc, #420]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a68      	ldr	r2, [pc, #416]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005272:	6093      	str	r3, [r2, #8]
 8005274:	4b66      	ldr	r3, [pc, #408]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	4964      	ldr	r1, [pc, #400]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	4313      	orrs	r3, r2
 8005280:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d017      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800529a:	4b5d      	ldr	r3, [pc, #372]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	4959      	ldr	r1, [pc, #356]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b8:	d101      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052c6:	2301      	movs	r3, #1
 80052c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d017      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052d6:	4b4e      	ldr	r3, [pc, #312]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	494a      	ldr	r1, [pc, #296]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f4:	d101      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005312:	2301      	movs	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 808b 	beq.w	800543a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005324:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	4a39      	ldr	r2, [pc, #228]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532e:	6413      	str	r3, [r2, #64]	; 0x40
 8005330:	4b37      	ldr	r3, [pc, #220]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800533c:	4b35      	ldr	r3, [pc, #212]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a34      	ldr	r2, [pc, #208]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fe f81a 	bl	8003380 <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fe f816 	bl	8003380 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e38f      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005362:	4b2c      	ldr	r3, [pc, #176]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800536e:	4b28      	ldr	r3, [pc, #160]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d035      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d02e      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800538c:	4b20      	ldr	r3, [pc, #128]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005394:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053a2:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a1a      	ldr	r2, [pc, #104]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053b4:	4b16      	ldr	r3, [pc, #88]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d114      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd ffde 	bl	8003380 <HAL_GetTick>
 80053c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c6:	e00a      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fd ffda 	bl	8003380 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e351      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053de:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ee      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053f6:	d111      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005404:	4b04      	ldr	r3, [pc, #16]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005406:	400b      	ands	r3, r1
 8005408:	4901      	ldr	r1, [pc, #4]	; (8005410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
 800540e:	e00b      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005410:	40023800 	.word	0x40023800
 8005414:	40007000 	.word	0x40007000
 8005418:	0ffffcff 	.word	0x0ffffcff
 800541c:	4bac      	ldr	r3, [pc, #688]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4aab      	ldr	r2, [pc, #684]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005422:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005426:	6093      	str	r3, [r2, #8]
 8005428:	4ba9      	ldr	r3, [pc, #676]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005434:	49a6      	ldr	r1, [pc, #664]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	4313      	orrs	r3, r2
 8005438:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005446:	4ba2      	ldr	r3, [pc, #648]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544c:	4aa0      	ldr	r2, [pc, #640]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005456:	4b9e      	ldr	r3, [pc, #632]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005458:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	499b      	ldr	r1, [pc, #620]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005474:	4b96      	ldr	r3, [pc, #600]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005482:	4993      	ldr	r1, [pc, #588]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005496:	4b8e      	ldr	r3, [pc, #568]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054a4:	498a      	ldr	r1, [pc, #552]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054b8:	4b85      	ldr	r3, [pc, #532]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c6:	4982      	ldr	r1, [pc, #520]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054da:	4b7d      	ldr	r3, [pc, #500]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4979      	ldr	r1, [pc, #484]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054fc:	4b74      	ldr	r3, [pc, #464]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f023 0203 	bic.w	r2, r3, #3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550a:	4971      	ldr	r1, [pc, #452]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800551e:	4b6c      	ldr	r3, [pc, #432]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f023 020c 	bic.w	r2, r3, #12
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552c:	4968      	ldr	r1, [pc, #416]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005540:	4b63      	ldr	r3, [pc, #396]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	4960      	ldr	r1, [pc, #384]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005562:	4b5b      	ldr	r3, [pc, #364]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005570:	4957      	ldr	r1, [pc, #348]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005584:	4b52      	ldr	r3, [pc, #328]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	494f      	ldr	r1, [pc, #316]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055a6:	4b4a      	ldr	r3, [pc, #296]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	4946      	ldr	r1, [pc, #280]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055c8:	4b41      	ldr	r3, [pc, #260]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	493e      	ldr	r1, [pc, #248]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	4935      	ldr	r1, [pc, #212]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800560c:	4b30      	ldr	r3, [pc, #192]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561a:	492d      	ldr	r1, [pc, #180]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d011      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800562e:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563c:	4924      	ldr	r1, [pc, #144]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564c:	d101      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800565e:	2301      	movs	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800566e:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005674:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567c:	4914      	ldr	r1, [pc, #80]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005690:	4b0f      	ldr	r3, [pc, #60]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005696:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a0:	490b      	ldr	r1, [pc, #44]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00f      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c4:	4902      	ldr	r1, [pc, #8]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056cc:	e002      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056e0:	4b8a      	ldr	r3, [pc, #552]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f0:	4986      	ldr	r1, [pc, #536]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005704:	4b81      	ldr	r3, [pc, #516]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005714:	497d      	ldr	r1, [pc, #500]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d006      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80d6 	beq.w	80058dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005730:	4b76      	ldr	r3, [pc, #472]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a75      	ldr	r2, [pc, #468]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800573a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800573c:	f7fd fe20 	bl	8003380 <HAL_GetTick>
 8005740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005742:	e008      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005744:	f7fd fe1c 	bl	8003380 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b64      	cmp	r3, #100	; 0x64
 8005750:	d901      	bls.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e195      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005756:	4b6d      	ldr	r3, [pc, #436]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f0      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d021      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	2b00      	cmp	r3, #0
 8005774:	d11d      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005776:	4b65      	ldr	r3, [pc, #404]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005784:	4b61      	ldr	r3, [pc, #388]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578a:	0e1b      	lsrs	r3, r3, #24
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	019a      	lsls	r2, r3, #6
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	061b      	lsls	r3, r3, #24
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	071b      	lsls	r3, r3, #28
 80057aa:	4958      	ldr	r1, [pc, #352]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02e      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057dc:	d129      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057de:	4b4b      	ldr	r3, [pc, #300]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e4:	0c1b      	lsrs	r3, r3, #16
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057ec:	4b47      	ldr	r3, [pc, #284]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f2:	0f1b      	lsrs	r3, r3, #28
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	019a      	lsls	r2, r3, #6
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	061b      	lsls	r3, r3, #24
 800580c:	431a      	orrs	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	071b      	lsls	r3, r3, #28
 8005812:	493e      	ldr	r1, [pc, #248]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800581a:	4b3c      	ldr	r3, [pc, #240]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005820:	f023 021f 	bic.w	r2, r3, #31
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	3b01      	subs	r3, #1
 800582a:	4938      	ldr	r1, [pc, #224]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01d      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005844:	0e1b      	lsrs	r3, r3, #24
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005852:	0f1b      	lsrs	r3, r3, #28
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	019a      	lsls	r2, r3, #6
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	431a      	orrs	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	431a      	orrs	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	071b      	lsls	r3, r3, #28
 8005872:	4926      	ldr	r1, [pc, #152]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d011      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	019a      	lsls	r2, r3, #6
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	061b      	lsls	r3, r3, #24
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	071b      	lsls	r3, r3, #28
 80058a2:	491a      	ldr	r1, [pc, #104]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b6:	f7fd fd63 	bl	8003380 <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058be:	f7fd fd5f 	bl	8003380 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b64      	cmp	r3, #100	; 0x64
 80058ca:	d901      	bls.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e0d8      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058d0:	4b0e      	ldr	r3, [pc, #56]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	f040 80ce 	bne.w	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058e4:	4b09      	ldr	r3, [pc, #36]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a08      	ldr	r2, [pc, #32]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f0:	f7fd fd46 	bl	8003380 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058f6:	e00b      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058f8:	f7fd fd42 	bl	8003380 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d904      	bls.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0bb      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005910:	4b5e      	ldr	r3, [pc, #376]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591c:	d0ec      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02e      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d12a      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005946:	4b51      	ldr	r3, [pc, #324]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	0c1b      	lsrs	r3, r3, #16
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005954:	4b4d      	ldr	r3, [pc, #308]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	0f1b      	lsrs	r3, r3, #28
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	019a      	lsls	r2, r3, #6
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	061b      	lsls	r3, r3, #24
 8005974:	431a      	orrs	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	071b      	lsls	r3, r3, #28
 800597a:	4944      	ldr	r1, [pc, #272]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005982:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005988:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	3b01      	subs	r3, #1
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	493d      	ldr	r1, [pc, #244]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d022      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b0:	d11d      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059b2:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b8:	0e1b      	lsrs	r3, r3, #24
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059c0:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c6:	0f1b      	lsrs	r3, r3, #28
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	019a      	lsls	r2, r3, #6
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	041b      	lsls	r3, r3, #16
 80059da:	431a      	orrs	r2, r3
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	061b      	lsls	r3, r3, #24
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	071b      	lsls	r3, r3, #28
 80059e6:	4929      	ldr	r1, [pc, #164]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d028      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059fa:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	0e1b      	lsrs	r3, r3, #24
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a08:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	019a      	lsls	r2, r3, #6
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	431a      	orrs	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	061b      	lsls	r3, r3, #24
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	071b      	lsls	r3, r3, #28
 8005a2e:	4917      	ldr	r1, [pc, #92]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a36:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	4911      	ldr	r1, [pc, #68]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a58:	f7fd fc92 	bl	8003380 <HAL_GetTick>
 8005a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a60:	f7fd fc8e 	bl	8003380 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e007      	b.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a7e:	d1ef      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800

08005a90 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e01c      	b.n	8005adc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	795b      	ldrb	r3, [r3, #5]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fc f952 	bl	8001d5c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0204 	orr.w	r2, r2, #4
 8005acc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e09d      	b.n	8005c32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d108      	bne.n	8005b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d009      	beq.n	8005b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
 8005b0e:	e005      	b.n	8005b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc f982 	bl	8001e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b5c:	d902      	bls.n	8005b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e002      	b.n	8005b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b72:	d007      	beq.n	8005b84 <HAL_SPI_Init+0xa0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7c:	d002      	beq.n	8005b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	ea42 0103 	orr.w	r1, r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	f003 0204 	and.w	r2, r3, #4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c00:	ea42 0103 	orr.w	r1, r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b088      	sub	sp, #32
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_SPI_Transmit+0x22>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e158      	b.n	8005f0e <HAL_SPI_Transmit+0x2d4>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c64:	f7fd fb8c 	bl	8003380 <HAL_GetTick>
 8005c68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d002      	beq.n	8005c80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c7e:	e13d      	b.n	8005efc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_SPI_Transmit+0x52>
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c90:	e134      	b.n	8005efc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2203      	movs	r2, #3
 8005c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cdc:	d10f      	bne.n	8005cfe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d24:	d94b      	bls.n	8005dbe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_SPI_Transmit+0xfa>
 8005d2e:	8afb      	ldrh	r3, [r7, #22]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d13e      	bne.n	8005db2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	1c9a      	adds	r2, r3, #2
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d58:	e02b      	b.n	8005db2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d112      	bne.n	8005d8e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	881a      	ldrh	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d8c:	e011      	b.n	8005db2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8e:	f7fd faf7 	bl	8003380 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d803      	bhi.n	8005da6 <HAL_SPI_Transmit+0x16c>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_Transmit+0x172>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005db0:	e0a4      	b.n	8005efc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1ce      	bne.n	8005d5a <HAL_SPI_Transmit+0x120>
 8005dbc:	e07c      	b.n	8005eb8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <HAL_SPI_Transmit+0x192>
 8005dc6:	8afb      	ldrh	r3, [r7, #22]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d170      	bne.n	8005eae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d912      	bls.n	8005dfc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b02      	subs	r3, #2
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dfa:	e058      	b.n	8005eae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e22:	e044      	b.n	8005eae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d12b      	bne.n	8005e8a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d912      	bls.n	8005e62 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	881a      	ldrh	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	1c9a      	adds	r2, r3, #2
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b02      	subs	r3, #2
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e60:	e025      	b.n	8005eae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	7812      	ldrb	r2, [r2, #0]
 8005e6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e88:	e011      	b.n	8005eae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e8a:	f7fd fa79 	bl	8003380 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d803      	bhi.n	8005ea2 <HAL_SPI_Transmit+0x268>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_Transmit+0x26e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eac:	e026      	b.n	8005efc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1b5      	bne.n	8005e24 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f949 	bl	8006154 <SPI_EndRxTxTransaction>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	613b      	str	r3, [r7, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	613b      	str	r3, [r7, #16]
 8005eea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e000      	b.n	8005efc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f28:	f7fd fa2a 	bl	8003380 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	4413      	add	r3, r2
 8005f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f38:	f7fd fa22 	bl	8003380 <HAL_GetTick>
 8005f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f3e:	4b39      	ldr	r3, [pc, #228]	; (8006024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	015b      	lsls	r3, r3, #5
 8005f44:	0d1b      	lsrs	r3, r3, #20
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f4e:	e054      	b.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d050      	beq.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f58:	f7fd fa12 	bl	8003380 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d902      	bls.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d13d      	bne.n	8005fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f86:	d111      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f90:	d004      	beq.n	8005f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9a:	d107      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb4:	d10f      	bne.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e017      	b.n	800601a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	429a      	cmp	r2, r3
 8006016:	d19b      	bne.n	8005f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000000 	.word	0x20000000

08006028 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	; 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800603a:	f7fd f9a1 	bl	8003380 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4413      	add	r3, r2
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800604a:	f7fd f999 	bl	8003380 <HAL_GetTick>
 800604e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006058:	4b3d      	ldr	r3, [pc, #244]	; (8006150 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	00da      	lsls	r2, r3, #3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	0d1b      	lsrs	r3, r3, #20
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006070:	e060      	b.n	8006134 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006078:	d107      	bne.n	800608a <SPI_WaitFifoStateUntilTimeout+0x62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006088:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d050      	beq.n	8006134 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006092:	f7fd f975 	bl	8003380 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609e:	429a      	cmp	r2, r3
 80060a0:	d902      	bls.n	80060a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d13d      	bne.n	8006124 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c0:	d111      	bne.n	80060e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d004      	beq.n	80060d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d107      	bne.n	80060e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ee:	d10f      	bne.n	8006110 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800610e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e010      	b.n	8006146 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	3b01      	subs	r3, #1
 8006132:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d196      	bne.n	8006072 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000000 	.word	0x20000000

08006154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff ff5b 	bl	8006028 <SPI_WaitFifoStateUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e046      	b.n	8006216 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <SPI_EndRxTxTransaction+0xcc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <SPI_EndRxTxTransaction+0xd0>)
 800618e:	fba2 2303 	umull	r2, r3, r2, r3
 8006192:	0d5b      	lsrs	r3, r3, #21
 8006194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006198:	fb02 f303 	mul.w	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a6:	d112      	bne.n	80061ce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2200      	movs	r2, #0
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff feb0 	bl	8005f18 <SPI_WaitFlagStateUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c2:	f043 0220 	orr.w	r2, r3, #32
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e023      	b.n	8006216 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d0f2      	beq.n	80061ce <SPI_EndRxTxTransaction+0x7a>
 80061e8:	e000      	b.n	80061ec <SPI_EndRxTxTransaction+0x98>
        break;
 80061ea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f7ff ff15 	bl	8006028 <SPI_WaitFifoStateUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e000      	b.n	8006216 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000000 	.word	0x20000000
 8006224:	165e9f81 	.word	0x165e9f81

08006228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e049      	b.n	80062ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb ffe8 	bl	8002224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f000 f9cc 	bl	8006604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80062f0:	4013      	ands	r3, r2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10f      	bne.n	8006316 <HAL_TIM_Base_DeInit+0x40>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	f240 4344 	movw	r3, #1092	; 0x444
 8006300:	4013      	ands	r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d107      	bne.n	8006316 <HAL_TIM_Base_DeInit+0x40>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0201 	bic.w	r2, r2, #1
 8006314:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fb ffda 	bl	80022d0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d001      	beq.n	80063a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e04c      	b.n	8006442 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <HAL_TIM_Base_Start+0xc0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d022      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c2:	d01d      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a22      	ldr	r2, [pc, #136]	; (8006454 <HAL_TIM_Base_Start+0xc4>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a21      	ldr	r2, [pc, #132]	; (8006458 <HAL_TIM_Base_Start+0xc8>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1f      	ldr	r2, [pc, #124]	; (800645c <HAL_TIM_Base_Start+0xcc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <HAL_TIM_Base_Start+0xd0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1c      	ldr	r2, [pc, #112]	; (8006464 <HAL_TIM_Base_Start+0xd4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_TIM_Base_Start+0x70>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <HAL_TIM_Base_Start+0xd8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d115      	bne.n	800642c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	4b19      	ldr	r3, [pc, #100]	; (800646c <HAL_TIM_Base_Start+0xdc>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b06      	cmp	r3, #6
 8006410:	d015      	beq.n	800643e <HAL_TIM_Base_Start+0xae>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006418:	d011      	beq.n	800643e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642a:	e008      	b.n	800643e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	e000      	b.n	8006440 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40010400 	.word	0x40010400
 8006464:	40014000 	.word	0x40014000
 8006468:	40001800 	.word	0x40001800
 800646c:	00010007 	.word	0x00010007

08006470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIM_ConfigClockSource+0x1c>
 8006488:	2302      	movs	r3, #2
 800648a:	e0b4      	b.n	80065f6 <HAL_TIM_ConfigClockSource+0x186>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	4b56      	ldr	r3, [pc, #344]	; (8006600 <HAL_TIM_ConfigClockSource+0x190>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c4:	d03e      	beq.n	8006544 <HAL_TIM_ConfigClockSource+0xd4>
 80064c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ca:	f200 8087 	bhi.w	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	f000 8086 	beq.w	80065e2 <HAL_TIM_ConfigClockSource+0x172>
 80064d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064da:	d87f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b70      	cmp	r3, #112	; 0x70
 80064de:	d01a      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0xa6>
 80064e0:	2b70      	cmp	r3, #112	; 0x70
 80064e2:	d87b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b60      	cmp	r3, #96	; 0x60
 80064e6:	d050      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x11a>
 80064e8:	2b60      	cmp	r3, #96	; 0x60
 80064ea:	d877      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b50      	cmp	r3, #80	; 0x50
 80064ee:	d03c      	beq.n	800656a <HAL_TIM_ConfigClockSource+0xfa>
 80064f0:	2b50      	cmp	r3, #80	; 0x50
 80064f2:	d873      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d058      	beq.n	80065aa <HAL_TIM_ConfigClockSource+0x13a>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d86f      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	d064      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b30      	cmp	r3, #48	; 0x30
 8006502:	d86b      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d060      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b20      	cmp	r3, #32
 800650a:	d867      	bhi.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05c      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006510:	2b10      	cmp	r3, #16
 8006512:	d05a      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0x15a>
 8006514:	e062      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006526:	f000 f987 	bl	8006838 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	609a      	str	r2, [r3, #8]
      break;
 8006542:	e04f      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006554:	f000 f970 	bl	8006838 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006566:	609a      	str	r2, [r3, #8]
      break;
 8006568:	e03c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006576:	461a      	mov	r2, r3
 8006578:	f000 f8e4 	bl	8006744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2150      	movs	r1, #80	; 0x50
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f93d 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 8006588:	e02c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006596:	461a      	mov	r2, r3
 8006598:	f000 f903 	bl	80067a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2160      	movs	r1, #96	; 0x60
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f92d 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065a8:	e01c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b6:	461a      	mov	r2, r3
 80065b8:	f000 f8c4 	bl	8006744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2140      	movs	r1, #64	; 0x40
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 f91d 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065c8:	e00c      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f000 f914 	bl	8006802 <TIM_ITRx_SetConfig>
      break;
 80065da:	e003      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
      break;
 80065e0:	e000      	b.n	80065e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	fffeff88 	.word	0xfffeff88

08006604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a40      	ldr	r2, [pc, #256]	; (8006718 <TIM_Base_SetConfig+0x114>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006622:	d00f      	beq.n	8006644 <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3d      	ldr	r2, [pc, #244]	; (800671c <TIM_Base_SetConfig+0x118>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00b      	beq.n	8006644 <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3c      	ldr	r2, [pc, #240]	; (8006720 <TIM_Base_SetConfig+0x11c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_Base_SetConfig+0x40>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a3b      	ldr	r2, [pc, #236]	; (8006724 <TIM_Base_SetConfig+0x120>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a3a      	ldr	r2, [pc, #232]	; (8006728 <TIM_Base_SetConfig+0x124>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d108      	bne.n	8006656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2f      	ldr	r2, [pc, #188]	; (8006718 <TIM_Base_SetConfig+0x114>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d02b      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006664:	d027      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2c      	ldr	r2, [pc, #176]	; (800671c <TIM_Base_SetConfig+0x118>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d023      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2b      	ldr	r2, [pc, #172]	; (8006720 <TIM_Base_SetConfig+0x11c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01f      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <TIM_Base_SetConfig+0x120>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01b      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a29      	ldr	r2, [pc, #164]	; (8006728 <TIM_Base_SetConfig+0x124>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d017      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a28      	ldr	r2, [pc, #160]	; (800672c <TIM_Base_SetConfig+0x128>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <TIM_Base_SetConfig+0x12c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00f      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a26      	ldr	r2, [pc, #152]	; (8006734 <TIM_Base_SetConfig+0x130>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a25      	ldr	r2, [pc, #148]	; (8006738 <TIM_Base_SetConfig+0x134>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a24      	ldr	r2, [pc, #144]	; (800673c <TIM_Base_SetConfig+0x138>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a23      	ldr	r2, [pc, #140]	; (8006740 <TIM_Base_SetConfig+0x13c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d108      	bne.n	80066c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <TIM_Base_SetConfig+0x114>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_Base_SetConfig+0xf8>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0c      	ldr	r2, [pc, #48]	; (8006728 <TIM_Base_SetConfig+0x124>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d103      	bne.n	8006704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	615a      	str	r2, [r3, #20]
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40010000 	.word	0x40010000
 800671c:	40000400 	.word	0x40000400
 8006720:	40000800 	.word	0x40000800
 8006724:	40000c00 	.word	0x40000c00
 8006728:	40010400 	.word	0x40010400
 800672c:	40014000 	.word	0x40014000
 8006730:	40014400 	.word	0x40014400
 8006734:	40014800 	.word	0x40014800
 8006738:	40001800 	.word	0x40001800
 800673c:	40001c00 	.word	0x40001c00
 8006740:	40002000 	.word	0x40002000

08006744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	f023 0201 	bic.w	r2, r3, #1
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800676e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f023 030a 	bic.w	r3, r3, #10
 8006780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	621a      	str	r2, [r3, #32]
}
 8006796:	bf00      	nop
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b087      	sub	sp, #28
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0210 	bic.w	r2, r3, #16
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	031b      	lsls	r3, r3, #12
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	f043 0307 	orr.w	r3, r3, #7
 8006824:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	021a      	lsls	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	431a      	orrs	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	609a      	str	r2, [r3, #8]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800688c:	2302      	movs	r3, #2
 800688e:	e06d      	b.n	800696c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a30      	ldr	r2, [pc, #192]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d004      	beq.n	80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2f      	ldr	r2, [pc, #188]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a20      	ldr	r2, [pc, #128]	; (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006902:	d01d      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1d      	ldr	r2, [pc, #116]	; (8006980 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1c      	ldr	r2, [pc, #112]	; (8006984 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1a      	ldr	r2, [pc, #104]	; (8006988 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a15      	ldr	r2, [pc, #84]	; (800697c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a16      	ldr	r2, [pc, #88]	; (800698c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a15      	ldr	r2, [pc, #84]	; (8006990 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006946:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	4313      	orrs	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	40010000 	.word	0x40010000
 800697c:	40010400 	.word	0x40010400
 8006980:	40000400 	.word	0x40000400
 8006984:	40000800 	.word	0x40000800
 8006988:	40000c00 	.word	0x40000c00
 800698c:	40014000 	.word	0x40014000
 8006990:	40001800 	.word	0x40001800

08006994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e040      	b.n	8006a28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d106      	bne.n	80069bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fb fce4 	bl	8002384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2224      	movs	r2, #36	; 0x24
 80069c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8b0 	bl	8006b38 <UART_SetConfig>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e022      	b.n	8006a28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fb08 	bl	8007000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0201 	orr.w	r2, r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fb8f 	bl	8007144 <UART_CheckIdleState>
 8006a26:	4603      	mov	r3, r0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08a      	sub	sp, #40	; 0x28
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d171      	bne.n	8006b2c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Transmit+0x24>
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e06a      	b.n	8006b2e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2221      	movs	r2, #33	; 0x21
 8006a64:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a66:	f7fc fc8b 	bl	8003380 <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	88fa      	ldrh	r2, [r7, #6]
 8006a78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a84:	d108      	bne.n	8006a98 <HAL_UART_Transmit+0x68>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d104      	bne.n	8006a98 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e003      	b.n	8006aa0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006aa0:	e02c      	b.n	8006afc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fb96 	bl	80071de <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e038      	b.n	8006b2e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	e007      	b.n	8006aea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1cc      	bne.n	8006aa2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2140      	movs	r1, #64	; 0x40
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fb63 	bl	80071de <UART_WaitOnFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e005      	b.n	8006b2e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e000      	b.n	8006b2e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b2c:	2302      	movs	r3, #2
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3720      	adds	r7, #32
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689a      	ldr	r2, [r3, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4ba6      	ldr	r3, [pc, #664]	; (8006dfc <UART_SetConfig+0x2c4>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	6979      	ldr	r1, [r7, #20]
 8006b6c:	430b      	orrs	r3, r1
 8006b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a94      	ldr	r2, [pc, #592]	; (8006e00 <UART_SetConfig+0x2c8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d120      	bne.n	8006bf6 <UART_SetConfig+0xbe>
 8006bb4:	4b93      	ldr	r3, [pc, #588]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d816      	bhi.n	8006bf0 <UART_SetConfig+0xb8>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <UART_SetConfig+0x90>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006be5 	.word	0x08006be5
 8006bd0:	08006bdf 	.word	0x08006bdf
 8006bd4:	08006beb 	.word	0x08006beb
 8006bd8:	2301      	movs	r3, #1
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e150      	b.n	8006e80 <UART_SetConfig+0x348>
 8006bde:	2302      	movs	r3, #2
 8006be0:	77fb      	strb	r3, [r7, #31]
 8006be2:	e14d      	b.n	8006e80 <UART_SetConfig+0x348>
 8006be4:	2304      	movs	r3, #4
 8006be6:	77fb      	strb	r3, [r7, #31]
 8006be8:	e14a      	b.n	8006e80 <UART_SetConfig+0x348>
 8006bea:	2308      	movs	r3, #8
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e147      	b.n	8006e80 <UART_SetConfig+0x348>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e144      	b.n	8006e80 <UART_SetConfig+0x348>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a83      	ldr	r2, [pc, #524]	; (8006e08 <UART_SetConfig+0x2d0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d132      	bne.n	8006c66 <UART_SetConfig+0x12e>
 8006c00:	4b80      	ldr	r3, [pc, #512]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	f003 030c 	and.w	r3, r3, #12
 8006c0a:	2b0c      	cmp	r3, #12
 8006c0c:	d828      	bhi.n	8006c60 <UART_SetConfig+0x128>
 8006c0e:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0xdc>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c49 	.word	0x08006c49
 8006c18:	08006c61 	.word	0x08006c61
 8006c1c:	08006c61 	.word	0x08006c61
 8006c20:	08006c61 	.word	0x08006c61
 8006c24:	08006c55 	.word	0x08006c55
 8006c28:	08006c61 	.word	0x08006c61
 8006c2c:	08006c61 	.word	0x08006c61
 8006c30:	08006c61 	.word	0x08006c61
 8006c34:	08006c4f 	.word	0x08006c4f
 8006c38:	08006c61 	.word	0x08006c61
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c61 	.word	0x08006c61
 8006c44:	08006c5b 	.word	0x08006c5b
 8006c48:	2300      	movs	r3, #0
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e118      	b.n	8006e80 <UART_SetConfig+0x348>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	77fb      	strb	r3, [r7, #31]
 8006c52:	e115      	b.n	8006e80 <UART_SetConfig+0x348>
 8006c54:	2304      	movs	r3, #4
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e112      	b.n	8006e80 <UART_SetConfig+0x348>
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e10f      	b.n	8006e80 <UART_SetConfig+0x348>
 8006c60:	2310      	movs	r3, #16
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e10c      	b.n	8006e80 <UART_SetConfig+0x348>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a68      	ldr	r2, [pc, #416]	; (8006e0c <UART_SetConfig+0x2d4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d120      	bne.n	8006cb2 <UART_SetConfig+0x17a>
 8006c70:	4b64      	ldr	r3, [pc, #400]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c7a:	2b30      	cmp	r3, #48	; 0x30
 8006c7c:	d013      	beq.n	8006ca6 <UART_SetConfig+0x16e>
 8006c7e:	2b30      	cmp	r3, #48	; 0x30
 8006c80:	d814      	bhi.n	8006cac <UART_SetConfig+0x174>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d009      	beq.n	8006c9a <UART_SetConfig+0x162>
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d810      	bhi.n	8006cac <UART_SetConfig+0x174>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <UART_SetConfig+0x15c>
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d006      	beq.n	8006ca0 <UART_SetConfig+0x168>
 8006c92:	e00b      	b.n	8006cac <UART_SetConfig+0x174>
 8006c94:	2300      	movs	r3, #0
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e0f2      	b.n	8006e80 <UART_SetConfig+0x348>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e0ef      	b.n	8006e80 <UART_SetConfig+0x348>
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e0ec      	b.n	8006e80 <UART_SetConfig+0x348>
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e0e9      	b.n	8006e80 <UART_SetConfig+0x348>
 8006cac:	2310      	movs	r3, #16
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e0e6      	b.n	8006e80 <UART_SetConfig+0x348>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a56      	ldr	r2, [pc, #344]	; (8006e10 <UART_SetConfig+0x2d8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d120      	bne.n	8006cfe <UART_SetConfig+0x1c6>
 8006cbc:	4b51      	ldr	r3, [pc, #324]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc8:	d013      	beq.n	8006cf2 <UART_SetConfig+0x1ba>
 8006cca:	2bc0      	cmp	r3, #192	; 0xc0
 8006ccc:	d814      	bhi.n	8006cf8 <UART_SetConfig+0x1c0>
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d009      	beq.n	8006ce6 <UART_SetConfig+0x1ae>
 8006cd2:	2b80      	cmp	r3, #128	; 0x80
 8006cd4:	d810      	bhi.n	8006cf8 <UART_SetConfig+0x1c0>
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <UART_SetConfig+0x1a8>
 8006cda:	2b40      	cmp	r3, #64	; 0x40
 8006cdc:	d006      	beq.n	8006cec <UART_SetConfig+0x1b4>
 8006cde:	e00b      	b.n	8006cf8 <UART_SetConfig+0x1c0>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e0cc      	b.n	8006e80 <UART_SetConfig+0x348>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e0c9      	b.n	8006e80 <UART_SetConfig+0x348>
 8006cec:	2304      	movs	r3, #4
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e0c6      	b.n	8006e80 <UART_SetConfig+0x348>
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e0c3      	b.n	8006e80 <UART_SetConfig+0x348>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e0c0      	b.n	8006e80 <UART_SetConfig+0x348>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a44      	ldr	r2, [pc, #272]	; (8006e14 <UART_SetConfig+0x2dc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d125      	bne.n	8006d54 <UART_SetConfig+0x21c>
 8006d08:	4b3e      	ldr	r3, [pc, #248]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d16:	d017      	beq.n	8006d48 <UART_SetConfig+0x210>
 8006d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d1c:	d817      	bhi.n	8006d4e <UART_SetConfig+0x216>
 8006d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d22:	d00b      	beq.n	8006d3c <UART_SetConfig+0x204>
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d811      	bhi.n	8006d4e <UART_SetConfig+0x216>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <UART_SetConfig+0x1fe>
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d32:	d006      	beq.n	8006d42 <UART_SetConfig+0x20a>
 8006d34:	e00b      	b.n	8006d4e <UART_SetConfig+0x216>
 8006d36:	2300      	movs	r3, #0
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e0a1      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e09e      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d42:	2304      	movs	r3, #4
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e09b      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e098      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d4e:	2310      	movs	r3, #16
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e095      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <UART_SetConfig+0x2e0>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d125      	bne.n	8006daa <UART_SetConfig+0x272>
 8006d5e:	4b29      	ldr	r3, [pc, #164]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d6c:	d017      	beq.n	8006d9e <UART_SetConfig+0x266>
 8006d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d72:	d817      	bhi.n	8006da4 <UART_SetConfig+0x26c>
 8006d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d78:	d00b      	beq.n	8006d92 <UART_SetConfig+0x25a>
 8006d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7e:	d811      	bhi.n	8006da4 <UART_SetConfig+0x26c>
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <UART_SetConfig+0x254>
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d88:	d006      	beq.n	8006d98 <UART_SetConfig+0x260>
 8006d8a:	e00b      	b.n	8006da4 <UART_SetConfig+0x26c>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e076      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e073      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e070      	b.n	8006e80 <UART_SetConfig+0x348>
 8006d9e:	2308      	movs	r3, #8
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e06d      	b.n	8006e80 <UART_SetConfig+0x348>
 8006da4:	2310      	movs	r3, #16
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e06a      	b.n	8006e80 <UART_SetConfig+0x348>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <UART_SetConfig+0x2e4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d138      	bne.n	8006e26 <UART_SetConfig+0x2ee>
 8006db4:	4b13      	ldr	r3, [pc, #76]	; (8006e04 <UART_SetConfig+0x2cc>)
 8006db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dc2:	d017      	beq.n	8006df4 <UART_SetConfig+0x2bc>
 8006dc4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dc8:	d82a      	bhi.n	8006e20 <UART_SetConfig+0x2e8>
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dce:	d00b      	beq.n	8006de8 <UART_SetConfig+0x2b0>
 8006dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd4:	d824      	bhi.n	8006e20 <UART_SetConfig+0x2e8>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <UART_SetConfig+0x2aa>
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	d006      	beq.n	8006dee <UART_SetConfig+0x2b6>
 8006de0:	e01e      	b.n	8006e20 <UART_SetConfig+0x2e8>
 8006de2:	2300      	movs	r3, #0
 8006de4:	77fb      	strb	r3, [r7, #31]
 8006de6:	e04b      	b.n	8006e80 <UART_SetConfig+0x348>
 8006de8:	2302      	movs	r3, #2
 8006dea:	77fb      	strb	r3, [r7, #31]
 8006dec:	e048      	b.n	8006e80 <UART_SetConfig+0x348>
 8006dee:	2304      	movs	r3, #4
 8006df0:	77fb      	strb	r3, [r7, #31]
 8006df2:	e045      	b.n	8006e80 <UART_SetConfig+0x348>
 8006df4:	2308      	movs	r3, #8
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e042      	b.n	8006e80 <UART_SetConfig+0x348>
 8006dfa:	bf00      	nop
 8006dfc:	efff69f3 	.word	0xefff69f3
 8006e00:	40011000 	.word	0x40011000
 8006e04:	40023800 	.word	0x40023800
 8006e08:	40004400 	.word	0x40004400
 8006e0c:	40004800 	.word	0x40004800
 8006e10:	40004c00 	.word	0x40004c00
 8006e14:	40005000 	.word	0x40005000
 8006e18:	40011400 	.word	0x40011400
 8006e1c:	40007800 	.word	0x40007800
 8006e20:	2310      	movs	r3, #16
 8006e22:	77fb      	strb	r3, [r7, #31]
 8006e24:	e02c      	b.n	8006e80 <UART_SetConfig+0x348>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a72      	ldr	r2, [pc, #456]	; (8006ff4 <UART_SetConfig+0x4bc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d125      	bne.n	8006e7c <UART_SetConfig+0x344>
 8006e30:	4b71      	ldr	r3, [pc, #452]	; (8006ff8 <UART_SetConfig+0x4c0>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e3e:	d017      	beq.n	8006e70 <UART_SetConfig+0x338>
 8006e40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e44:	d817      	bhi.n	8006e76 <UART_SetConfig+0x33e>
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	d00b      	beq.n	8006e64 <UART_SetConfig+0x32c>
 8006e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e50:	d811      	bhi.n	8006e76 <UART_SetConfig+0x33e>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <UART_SetConfig+0x326>
 8006e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e5a:	d006      	beq.n	8006e6a <UART_SetConfig+0x332>
 8006e5c:	e00b      	b.n	8006e76 <UART_SetConfig+0x33e>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e00d      	b.n	8006e80 <UART_SetConfig+0x348>
 8006e64:	2302      	movs	r3, #2
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e00a      	b.n	8006e80 <UART_SetConfig+0x348>
 8006e6a:	2304      	movs	r3, #4
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e007      	b.n	8006e80 <UART_SetConfig+0x348>
 8006e70:	2308      	movs	r3, #8
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e004      	b.n	8006e80 <UART_SetConfig+0x348>
 8006e76:	2310      	movs	r3, #16
 8006e78:	77fb      	strb	r3, [r7, #31]
 8006e7a:	e001      	b.n	8006e80 <UART_SetConfig+0x348>
 8006e7c:	2310      	movs	r3, #16
 8006e7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e88:	d15b      	bne.n	8006f42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e8a:	7ffb      	ldrb	r3, [r7, #31]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d828      	bhi.n	8006ee2 <UART_SetConfig+0x3aa>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <UART_SetConfig+0x360>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ee3 	.word	0x08006ee3
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	08006ee3 	.word	0x08006ee3
 8006eb0:	08006ee3 	.word	0x08006ee3
 8006eb4:	08006ee3 	.word	0x08006ee3
 8006eb8:	08006edb 	.word	0x08006edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe f998 	bl	80051f0 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	61b8      	str	r0, [r7, #24]
        break;
 8006ec2:	e013      	b.n	8006eec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec4:	f7fe f9a8 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 8006ec8:	61b8      	str	r0, [r7, #24]
        break;
 8006eca:	e00f      	b.n	8006eec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ecc:	4b4b      	ldr	r3, [pc, #300]	; (8006ffc <UART_SetConfig+0x4c4>)
 8006ece:	61bb      	str	r3, [r7, #24]
        break;
 8006ed0:	e00c      	b.n	8006eec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed2:	f7fe f87b 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8006ed6:	61b8      	str	r0, [r7, #24]
        break;
 8006ed8:	e008      	b.n	8006eec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ede:	61bb      	str	r3, [r7, #24]
        break;
 8006ee0:	e004      	b.n	8006eec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8006eea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d074      	beq.n	8006fdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	005a      	lsls	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	441a      	add	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2b0f      	cmp	r3, #15
 8006f0c:	d916      	bls.n	8006f3c <UART_SetConfig+0x404>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f14:	d212      	bcs.n	8006f3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f023 030f 	bic.w	r3, r3, #15
 8006f1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f003 0307 	and.w	r3, r3, #7
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	89fb      	ldrh	r3, [r7, #14]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	89fa      	ldrh	r2, [r7, #14]
 8006f38:	60da      	str	r2, [r3, #12]
 8006f3a:	e04f      	b.n	8006fdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	77bb      	strb	r3, [r7, #30]
 8006f40:	e04c      	b.n	8006fdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f42:	7ffb      	ldrb	r3, [r7, #31]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d828      	bhi.n	8006f9a <UART_SetConfig+0x462>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <UART_SetConfig+0x418>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	08006f9b 	.word	0x08006f9b
 8006f60:	08006f8b 	.word	0x08006f8b
 8006f64:	08006f9b 	.word	0x08006f9b
 8006f68:	08006f9b 	.word	0x08006f9b
 8006f6c:	08006f9b 	.word	0x08006f9b
 8006f70:	08006f93 	.word	0x08006f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f74:	f7fe f93c 	bl	80051f0 <HAL_RCC_GetPCLK1Freq>
 8006f78:	61b8      	str	r0, [r7, #24]
        break;
 8006f7a:	e013      	b.n	8006fa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fe f94c 	bl	8005218 <HAL_RCC_GetPCLK2Freq>
 8006f80:	61b8      	str	r0, [r7, #24]
        break;
 8006f82:	e00f      	b.n	8006fa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f84:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <UART_SetConfig+0x4c4>)
 8006f86:	61bb      	str	r3, [r7, #24]
        break;
 8006f88:	e00c      	b.n	8006fa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8a:	f7fe f81f 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8006f8e:	61b8      	str	r0, [r7, #24]
        break;
 8006f90:	e008      	b.n	8006fa4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f96:	61bb      	str	r3, [r7, #24]
        break;
 8006f98:	e004      	b.n	8006fa4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8006fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d018      	beq.n	8006fdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	085a      	lsrs	r2, r3, #1
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	441a      	add	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b0f      	cmp	r3, #15
 8006fc2:	d909      	bls.n	8006fd8 <UART_SetConfig+0x4a0>
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fca:	d205      	bcs.n	8006fd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	e001      	b.n	8006fdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fe8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3720      	adds	r7, #32
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40007c00 	.word	0x40007c00
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	00f42400 	.word	0x00f42400

08007000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	f003 0304 	and.w	r3, r3, #4
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01a      	beq.n	8007116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fe:	d10a      	bne.n	8007116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	605a      	str	r2, [r3, #4]
  }
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af02      	add	r7, sp, #8
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007154:	f7fc f914 	bl	8003380 <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10e      	bne.n	8007186 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f831 	bl	80071de <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e027      	b.n	80071d6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0304 	and.w	r3, r3, #4
 8007190:	2b04      	cmp	r3, #4
 8007192:	d10e      	bne.n	80071b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f81b 	bl	80071de <UART_WaitOnFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e011      	b.n	80071d6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b09c      	sub	sp, #112	; 0x70
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	60b9      	str	r1, [r7, #8]
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ee:	e0a7      	b.n	8007340 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	f000 80a3 	beq.w	8007340 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fc f8c1 	bl	8003380 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <UART_WaitOnFlagUntilTimeout+0x32>
 800720a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800720c:	2b00      	cmp	r3, #0
 800720e:	d13f      	bne.n	8007290 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800721e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007224:	667b      	str	r3, [r7, #100]	; 0x64
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800722e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007230:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800723c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e6      	bne.n	8007210 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	663b      	str	r3, [r7, #96]	; 0x60
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007262:	64ba      	str	r2, [r7, #72]	; 0x48
 8007264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e5      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2220      	movs	r2, #32
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e068      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	d050      	beq.n	8007340 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ac:	d148      	bne.n	8007340 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	637b      	str	r3, [r7, #52]	; 0x34
 80072d8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e6      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3308      	adds	r3, #8
 80072f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	613b      	str	r3, [r7, #16]
   return(result);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	66bb      	str	r3, [r7, #104]	; 0x68
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800730a:	623a      	str	r2, [r7, #32]
 800730c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	69f9      	ldr	r1, [r7, #28]
 8007310:	6a3a      	ldr	r2, [r7, #32]
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	61bb      	str	r3, [r7, #24]
   return(result);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e5      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2220      	movs	r2, #32
 8007322:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e010      	b.n	8007362 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69da      	ldr	r2, [r3, #28]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4013      	ands	r3, r2
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	429a      	cmp	r2, r3
 800735c:	f43f af48 	beq.w	80071f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3770      	adds	r7, #112	; 0x70
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <__cvt>:
 800736a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800736c:	ed2d 8b02 	vpush	{d8}
 8007370:	eeb0 8b40 	vmov.f64	d8, d0
 8007374:	b085      	sub	sp, #20
 8007376:	4617      	mov	r7, r2
 8007378:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800737a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800737c:	ee18 2a90 	vmov	r2, s17
 8007380:	f025 0520 	bic.w	r5, r5, #32
 8007384:	2a00      	cmp	r2, #0
 8007386:	bfb6      	itet	lt
 8007388:	222d      	movlt	r2, #45	; 0x2d
 800738a:	2200      	movge	r2, #0
 800738c:	eeb1 8b40 	vneglt.f64	d8, d0
 8007390:	2d46      	cmp	r5, #70	; 0x46
 8007392:	460c      	mov	r4, r1
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	d004      	beq.n	80073a2 <__cvt+0x38>
 8007398:	2d45      	cmp	r5, #69	; 0x45
 800739a:	d100      	bne.n	800739e <__cvt+0x34>
 800739c:	3401      	adds	r4, #1
 800739e:	2102      	movs	r1, #2
 80073a0:	e000      	b.n	80073a4 <__cvt+0x3a>
 80073a2:	2103      	movs	r1, #3
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	ab02      	add	r3, sp, #8
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4622      	mov	r2, r4
 80073ae:	4633      	mov	r3, r6
 80073b0:	eeb0 0b48 	vmov.f64	d0, d8
 80073b4:	f001 f850 	bl	8008458 <_dtoa_r>
 80073b8:	2d47      	cmp	r5, #71	; 0x47
 80073ba:	d101      	bne.n	80073c0 <__cvt+0x56>
 80073bc:	07fb      	lsls	r3, r7, #31
 80073be:	d51a      	bpl.n	80073f6 <__cvt+0x8c>
 80073c0:	2d46      	cmp	r5, #70	; 0x46
 80073c2:	eb00 0204 	add.w	r2, r0, r4
 80073c6:	d10c      	bne.n	80073e2 <__cvt+0x78>
 80073c8:	7803      	ldrb	r3, [r0, #0]
 80073ca:	2b30      	cmp	r3, #48	; 0x30
 80073cc:	d107      	bne.n	80073de <__cvt+0x74>
 80073ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d6:	bf1c      	itt	ne
 80073d8:	f1c4 0401 	rsbne	r4, r4, #1
 80073dc:	6034      	strne	r4, [r6, #0]
 80073de:	6833      	ldr	r3, [r6, #0]
 80073e0:	441a      	add	r2, r3
 80073e2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80073e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ea:	bf08      	it	eq
 80073ec:	9203      	streq	r2, [sp, #12]
 80073ee:	2130      	movs	r1, #48	; 0x30
 80073f0:	9b03      	ldr	r3, [sp, #12]
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d307      	bcc.n	8007406 <__cvt+0x9c>
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073fa:	1a1b      	subs	r3, r3, r0
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	b005      	add	sp, #20
 8007400:	ecbd 8b02 	vpop	{d8}
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	1c5c      	adds	r4, r3, #1
 8007408:	9403      	str	r4, [sp, #12]
 800740a:	7019      	strb	r1, [r3, #0]
 800740c:	e7f0      	b.n	80073f0 <__cvt+0x86>

0800740e <__exponent>:
 800740e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007410:	4603      	mov	r3, r0
 8007412:	2900      	cmp	r1, #0
 8007414:	bfb8      	it	lt
 8007416:	4249      	neglt	r1, r1
 8007418:	f803 2b02 	strb.w	r2, [r3], #2
 800741c:	bfb4      	ite	lt
 800741e:	222d      	movlt	r2, #45	; 0x2d
 8007420:	222b      	movge	r2, #43	; 0x2b
 8007422:	2909      	cmp	r1, #9
 8007424:	7042      	strb	r2, [r0, #1]
 8007426:	dd2a      	ble.n	800747e <__exponent+0x70>
 8007428:	f10d 0207 	add.w	r2, sp, #7
 800742c:	4617      	mov	r7, r2
 800742e:	260a      	movs	r6, #10
 8007430:	4694      	mov	ip, r2
 8007432:	fb91 f5f6 	sdiv	r5, r1, r6
 8007436:	fb06 1415 	mls	r4, r6, r5, r1
 800743a:	3430      	adds	r4, #48	; 0x30
 800743c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007440:	460c      	mov	r4, r1
 8007442:	2c63      	cmp	r4, #99	; 0x63
 8007444:	f102 32ff 	add.w	r2, r2, #4294967295
 8007448:	4629      	mov	r1, r5
 800744a:	dcf1      	bgt.n	8007430 <__exponent+0x22>
 800744c:	3130      	adds	r1, #48	; 0x30
 800744e:	f1ac 0402 	sub.w	r4, ip, #2
 8007452:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007456:	1c41      	adds	r1, r0, #1
 8007458:	4622      	mov	r2, r4
 800745a:	42ba      	cmp	r2, r7
 800745c:	d30a      	bcc.n	8007474 <__exponent+0x66>
 800745e:	f10d 0209 	add.w	r2, sp, #9
 8007462:	eba2 020c 	sub.w	r2, r2, ip
 8007466:	42bc      	cmp	r4, r7
 8007468:	bf88      	it	hi
 800746a:	2200      	movhi	r2, #0
 800746c:	4413      	add	r3, r2
 800746e:	1a18      	subs	r0, r3, r0
 8007470:	b003      	add	sp, #12
 8007472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007474:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007478:	f801 5f01 	strb.w	r5, [r1, #1]!
 800747c:	e7ed      	b.n	800745a <__exponent+0x4c>
 800747e:	2330      	movs	r3, #48	; 0x30
 8007480:	3130      	adds	r1, #48	; 0x30
 8007482:	7083      	strb	r3, [r0, #2]
 8007484:	70c1      	strb	r1, [r0, #3]
 8007486:	1d03      	adds	r3, r0, #4
 8007488:	e7f1      	b.n	800746e <__exponent+0x60>
 800748a:	0000      	movs	r0, r0
 800748c:	0000      	movs	r0, r0
	...

08007490 <_printf_float>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	b08b      	sub	sp, #44	; 0x2c
 8007496:	460c      	mov	r4, r1
 8007498:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800749c:	4616      	mov	r6, r2
 800749e:	461f      	mov	r7, r3
 80074a0:	4605      	mov	r5, r0
 80074a2:	f000 fed1 	bl	8008248 <_localeconv_r>
 80074a6:	f8d0 b000 	ldr.w	fp, [r0]
 80074aa:	4658      	mov	r0, fp
 80074ac:	f7f8 ff18 	bl	80002e0 <strlen>
 80074b0:	2300      	movs	r3, #0
 80074b2:	9308      	str	r3, [sp, #32]
 80074b4:	f8d8 3000 	ldr.w	r3, [r8]
 80074b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074bc:	6822      	ldr	r2, [r4, #0]
 80074be:	3307      	adds	r3, #7
 80074c0:	f023 0307 	bic.w	r3, r3, #7
 80074c4:	f103 0108 	add.w	r1, r3, #8
 80074c8:	f8c8 1000 	str.w	r1, [r8]
 80074cc:	ed93 0b00 	vldr	d0, [r3]
 80074d0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007730 <_printf_float+0x2a0>
 80074d4:	eeb0 7bc0 	vabs.f64	d7, d0
 80074d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80074dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80074e4:	4682      	mov	sl, r0
 80074e6:	dd24      	ble.n	8007532 <_printf_float+0xa2>
 80074e8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80074ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f0:	d502      	bpl.n	80074f8 <_printf_float+0x68>
 80074f2:	232d      	movs	r3, #45	; 0x2d
 80074f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f8:	498f      	ldr	r1, [pc, #572]	; (8007738 <_printf_float+0x2a8>)
 80074fa:	4b90      	ldr	r3, [pc, #576]	; (800773c <_printf_float+0x2ac>)
 80074fc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007500:	bf94      	ite	ls
 8007502:	4688      	movls	r8, r1
 8007504:	4698      	movhi	r8, r3
 8007506:	2303      	movs	r3, #3
 8007508:	6123      	str	r3, [r4, #16]
 800750a:	f022 0204 	bic.w	r2, r2, #4
 800750e:	2300      	movs	r3, #0
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	9700      	str	r7, [sp, #0]
 8007516:	4633      	mov	r3, r6
 8007518:	aa09      	add	r2, sp, #36	; 0x24
 800751a:	4621      	mov	r1, r4
 800751c:	4628      	mov	r0, r5
 800751e:	f000 f9d1 	bl	80078c4 <_printf_common>
 8007522:	3001      	adds	r0, #1
 8007524:	f040 808a 	bne.w	800763c <_printf_float+0x1ac>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	b00b      	add	sp, #44	; 0x2c
 800752e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007532:	eeb4 0b40 	vcmp.f64	d0, d0
 8007536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753a:	d709      	bvc.n	8007550 <_printf_float+0xc0>
 800753c:	ee10 3a90 	vmov	r3, s1
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfbc      	itt	lt
 8007544:	232d      	movlt	r3, #45	; 0x2d
 8007546:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800754a:	497d      	ldr	r1, [pc, #500]	; (8007740 <_printf_float+0x2b0>)
 800754c:	4b7d      	ldr	r3, [pc, #500]	; (8007744 <_printf_float+0x2b4>)
 800754e:	e7d5      	b.n	80074fc <_printf_float+0x6c>
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007556:	9104      	str	r1, [sp, #16]
 8007558:	1c59      	adds	r1, r3, #1
 800755a:	d13c      	bne.n	80075d6 <_printf_float+0x146>
 800755c:	2306      	movs	r3, #6
 800755e:	6063      	str	r3, [r4, #4]
 8007560:	2300      	movs	r3, #0
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	ab08      	add	r3, sp, #32
 8007566:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800756a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800756e:	ab07      	add	r3, sp, #28
 8007570:	6861      	ldr	r1, [r4, #4]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	f10d 031b 	add.w	r3, sp, #27
 800757a:	4628      	mov	r0, r5
 800757c:	f7ff fef5 	bl	800736a <__cvt>
 8007580:	9b04      	ldr	r3, [sp, #16]
 8007582:	9907      	ldr	r1, [sp, #28]
 8007584:	2b47      	cmp	r3, #71	; 0x47
 8007586:	4680      	mov	r8, r0
 8007588:	d108      	bne.n	800759c <_printf_float+0x10c>
 800758a:	1cc8      	adds	r0, r1, #3
 800758c:	db02      	blt.n	8007594 <_printf_float+0x104>
 800758e:	6863      	ldr	r3, [r4, #4]
 8007590:	4299      	cmp	r1, r3
 8007592:	dd41      	ble.n	8007618 <_printf_float+0x188>
 8007594:	f1a9 0902 	sub.w	r9, r9, #2
 8007598:	fa5f f989 	uxtb.w	r9, r9
 800759c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075a0:	d820      	bhi.n	80075e4 <_printf_float+0x154>
 80075a2:	3901      	subs	r1, #1
 80075a4:	464a      	mov	r2, r9
 80075a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075aa:	9107      	str	r1, [sp, #28]
 80075ac:	f7ff ff2f 	bl	800740e <__exponent>
 80075b0:	9a08      	ldr	r2, [sp, #32]
 80075b2:	9004      	str	r0, [sp, #16]
 80075b4:	1813      	adds	r3, r2, r0
 80075b6:	2a01      	cmp	r2, #1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	dc02      	bgt.n	80075c2 <_printf_float+0x132>
 80075bc:	6822      	ldr	r2, [r4, #0]
 80075be:	07d2      	lsls	r2, r2, #31
 80075c0:	d501      	bpl.n	80075c6 <_printf_float+0x136>
 80075c2:	3301      	adds	r3, #1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0a2      	beq.n	8007514 <_printf_float+0x84>
 80075ce:	232d      	movs	r3, #45	; 0x2d
 80075d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d4:	e79e      	b.n	8007514 <_printf_float+0x84>
 80075d6:	9904      	ldr	r1, [sp, #16]
 80075d8:	2947      	cmp	r1, #71	; 0x47
 80075da:	d1c1      	bne.n	8007560 <_printf_float+0xd0>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1bf      	bne.n	8007560 <_printf_float+0xd0>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e7bc      	b.n	800755e <_printf_float+0xce>
 80075e4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075e8:	d118      	bne.n	800761c <_printf_float+0x18c>
 80075ea:	2900      	cmp	r1, #0
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	dd0b      	ble.n	8007608 <_printf_float+0x178>
 80075f0:	6121      	str	r1, [r4, #16]
 80075f2:	b913      	cbnz	r3, 80075fa <_printf_float+0x16a>
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	07d0      	lsls	r0, r2, #31
 80075f8:	d502      	bpl.n	8007600 <_printf_float+0x170>
 80075fa:	3301      	adds	r3, #1
 80075fc:	440b      	add	r3, r1
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	2300      	movs	r3, #0
 8007602:	65a1      	str	r1, [r4, #88]	; 0x58
 8007604:	9304      	str	r3, [sp, #16]
 8007606:	e7de      	b.n	80075c6 <_printf_float+0x136>
 8007608:	b913      	cbnz	r3, 8007610 <_printf_float+0x180>
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	07d2      	lsls	r2, r2, #31
 800760e:	d501      	bpl.n	8007614 <_printf_float+0x184>
 8007610:	3302      	adds	r3, #2
 8007612:	e7f4      	b.n	80075fe <_printf_float+0x16e>
 8007614:	2301      	movs	r3, #1
 8007616:	e7f2      	b.n	80075fe <_printf_float+0x16e>
 8007618:	f04f 0967 	mov.w	r9, #103	; 0x67
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	4299      	cmp	r1, r3
 8007620:	db05      	blt.n	800762e <_printf_float+0x19e>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	6121      	str	r1, [r4, #16]
 8007626:	07d8      	lsls	r0, r3, #31
 8007628:	d5ea      	bpl.n	8007600 <_printf_float+0x170>
 800762a:	1c4b      	adds	r3, r1, #1
 800762c:	e7e7      	b.n	80075fe <_printf_float+0x16e>
 800762e:	2900      	cmp	r1, #0
 8007630:	bfd4      	ite	le
 8007632:	f1c1 0202 	rsble	r2, r1, #2
 8007636:	2201      	movgt	r2, #1
 8007638:	4413      	add	r3, r2
 800763a:	e7e0      	b.n	80075fe <_printf_float+0x16e>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	055a      	lsls	r2, r3, #21
 8007640:	d407      	bmi.n	8007652 <_printf_float+0x1c2>
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	4642      	mov	r2, r8
 8007646:	4631      	mov	r1, r6
 8007648:	4628      	mov	r0, r5
 800764a:	47b8      	blx	r7
 800764c:	3001      	adds	r0, #1
 800764e:	d12a      	bne.n	80076a6 <_printf_float+0x216>
 8007650:	e76a      	b.n	8007528 <_printf_float+0x98>
 8007652:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007656:	f240 80e0 	bls.w	800781a <_printf_float+0x38a>
 800765a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800765e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007666:	d133      	bne.n	80076d0 <_printf_float+0x240>
 8007668:	4a37      	ldr	r2, [pc, #220]	; (8007748 <_printf_float+0x2b8>)
 800766a:	2301      	movs	r3, #1
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	f43f af58 	beq.w	8007528 <_printf_float+0x98>
 8007678:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800767c:	429a      	cmp	r2, r3
 800767e:	db02      	blt.n	8007686 <_printf_float+0x1f6>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	07d8      	lsls	r0, r3, #31
 8007684:	d50f      	bpl.n	80076a6 <_printf_float+0x216>
 8007686:	4653      	mov	r3, sl
 8007688:	465a      	mov	r2, fp
 800768a:	4631      	mov	r1, r6
 800768c:	4628      	mov	r0, r5
 800768e:	47b8      	blx	r7
 8007690:	3001      	adds	r0, #1
 8007692:	f43f af49 	beq.w	8007528 <_printf_float+0x98>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	f104 091a 	add.w	r9, r4, #26
 800769e:	9b08      	ldr	r3, [sp, #32]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	4543      	cmp	r3, r8
 80076a4:	dc09      	bgt.n	80076ba <_printf_float+0x22a>
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	079b      	lsls	r3, r3, #30
 80076aa:	f100 8106 	bmi.w	80078ba <_printf_float+0x42a>
 80076ae:	68e0      	ldr	r0, [r4, #12]
 80076b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b2:	4298      	cmp	r0, r3
 80076b4:	bfb8      	it	lt
 80076b6:	4618      	movlt	r0, r3
 80076b8:	e738      	b.n	800752c <_printf_float+0x9c>
 80076ba:	2301      	movs	r3, #1
 80076bc:	464a      	mov	r2, r9
 80076be:	4631      	mov	r1, r6
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b8      	blx	r7
 80076c4:	3001      	adds	r0, #1
 80076c6:	f43f af2f 	beq.w	8007528 <_printf_float+0x98>
 80076ca:	f108 0801 	add.w	r8, r8, #1
 80076ce:	e7e6      	b.n	800769e <_printf_float+0x20e>
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dc3a      	bgt.n	800774c <_printf_float+0x2bc>
 80076d6:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <_printf_float+0x2b8>)
 80076d8:	2301      	movs	r3, #1
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f af21 	beq.w	8007528 <_printf_float+0x98>
 80076e6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d102      	bne.n	80076f4 <_printf_float+0x264>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	07d9      	lsls	r1, r3, #31
 80076f2:	d5d8      	bpl.n	80076a6 <_printf_float+0x216>
 80076f4:	4653      	mov	r3, sl
 80076f6:	465a      	mov	r2, fp
 80076f8:	4631      	mov	r1, r6
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f af12 	beq.w	8007528 <_printf_float+0x98>
 8007704:	f04f 0900 	mov.w	r9, #0
 8007708:	f104 0a1a 	add.w	sl, r4, #26
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	425b      	negs	r3, r3
 8007710:	454b      	cmp	r3, r9
 8007712:	dc01      	bgt.n	8007718 <_printf_float+0x288>
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	e795      	b.n	8007644 <_printf_float+0x1b4>
 8007718:	2301      	movs	r3, #1
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f af00 	beq.w	8007528 <_printf_float+0x98>
 8007728:	f109 0901 	add.w	r9, r9, #1
 800772c:	e7ee      	b.n	800770c <_printf_float+0x27c>
 800772e:	bf00      	nop
 8007730:	ffffffff 	.word	0xffffffff
 8007734:	7fefffff 	.word	0x7fefffff
 8007738:	0800bc10 	.word	0x0800bc10
 800773c:	0800bc14 	.word	0x0800bc14
 8007740:	0800bc18 	.word	0x0800bc18
 8007744:	0800bc1c 	.word	0x0800bc1c
 8007748:	0800bc20 	.word	0x0800bc20
 800774c:	9a08      	ldr	r2, [sp, #32]
 800774e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007750:	429a      	cmp	r2, r3
 8007752:	bfa8      	it	ge
 8007754:	461a      	movge	r2, r3
 8007756:	2a00      	cmp	r2, #0
 8007758:	4691      	mov	r9, r2
 800775a:	dc38      	bgt.n	80077ce <_printf_float+0x33e>
 800775c:	2300      	movs	r3, #0
 800775e:	9305      	str	r3, [sp, #20]
 8007760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007764:	f104 021a 	add.w	r2, r4, #26
 8007768:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800776a:	9905      	ldr	r1, [sp, #20]
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	eba3 0309 	sub.w	r3, r3, r9
 8007772:	428b      	cmp	r3, r1
 8007774:	dc33      	bgt.n	80077de <_printf_float+0x34e>
 8007776:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800777a:	429a      	cmp	r2, r3
 800777c:	db3c      	blt.n	80077f8 <_printf_float+0x368>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	07da      	lsls	r2, r3, #31
 8007782:	d439      	bmi.n	80077f8 <_printf_float+0x368>
 8007784:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007788:	eba2 0903 	sub.w	r9, r2, r3
 800778c:	9b04      	ldr	r3, [sp, #16]
 800778e:	1ad2      	subs	r2, r2, r3
 8007790:	4591      	cmp	r9, r2
 8007792:	bfa8      	it	ge
 8007794:	4691      	movge	r9, r2
 8007796:	f1b9 0f00 	cmp.w	r9, #0
 800779a:	dc35      	bgt.n	8007808 <_printf_float+0x378>
 800779c:	f04f 0800 	mov.w	r8, #0
 80077a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077a4:	f104 0a1a 	add.w	sl, r4, #26
 80077a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	eba3 0309 	sub.w	r3, r3, r9
 80077b2:	4543      	cmp	r3, r8
 80077b4:	f77f af77 	ble.w	80076a6 <_printf_float+0x216>
 80077b8:	2301      	movs	r3, #1
 80077ba:	4652      	mov	r2, sl
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f aeb0 	beq.w	8007528 <_printf_float+0x98>
 80077c8:	f108 0801 	add.w	r8, r8, #1
 80077cc:	e7ec      	b.n	80077a8 <_printf_float+0x318>
 80077ce:	4613      	mov	r3, r2
 80077d0:	4631      	mov	r1, r6
 80077d2:	4642      	mov	r2, r8
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	d1bf      	bne.n	800775c <_printf_float+0x2cc>
 80077dc:	e6a4      	b.n	8007528 <_printf_float+0x98>
 80077de:	2301      	movs	r3, #1
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	9204      	str	r2, [sp, #16]
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	f43f ae9d 	beq.w	8007528 <_printf_float+0x98>
 80077ee:	9b05      	ldr	r3, [sp, #20]
 80077f0:	9a04      	ldr	r2, [sp, #16]
 80077f2:	3301      	adds	r3, #1
 80077f4:	9305      	str	r3, [sp, #20]
 80077f6:	e7b7      	b.n	8007768 <_printf_float+0x2d8>
 80077f8:	4653      	mov	r3, sl
 80077fa:	465a      	mov	r2, fp
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	d1be      	bne.n	8007784 <_printf_float+0x2f4>
 8007806:	e68f      	b.n	8007528 <_printf_float+0x98>
 8007808:	9a04      	ldr	r2, [sp, #16]
 800780a:	464b      	mov	r3, r9
 800780c:	4442      	add	r2, r8
 800780e:	4631      	mov	r1, r6
 8007810:	4628      	mov	r0, r5
 8007812:	47b8      	blx	r7
 8007814:	3001      	adds	r0, #1
 8007816:	d1c1      	bne.n	800779c <_printf_float+0x30c>
 8007818:	e686      	b.n	8007528 <_printf_float+0x98>
 800781a:	9a08      	ldr	r2, [sp, #32]
 800781c:	2a01      	cmp	r2, #1
 800781e:	dc01      	bgt.n	8007824 <_printf_float+0x394>
 8007820:	07db      	lsls	r3, r3, #31
 8007822:	d537      	bpl.n	8007894 <_printf_float+0x404>
 8007824:	2301      	movs	r3, #1
 8007826:	4642      	mov	r2, r8
 8007828:	4631      	mov	r1, r6
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f ae7a 	beq.w	8007528 <_printf_float+0x98>
 8007834:	4653      	mov	r3, sl
 8007836:	465a      	mov	r2, fp
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	f43f ae72 	beq.w	8007528 <_printf_float+0x98>
 8007844:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007848:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800784c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007850:	9b08      	ldr	r3, [sp, #32]
 8007852:	d01a      	beq.n	800788a <_printf_float+0x3fa>
 8007854:	3b01      	subs	r3, #1
 8007856:	f108 0201 	add.w	r2, r8, #1
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	d10e      	bne.n	8007882 <_printf_float+0x3f2>
 8007864:	e660      	b.n	8007528 <_printf_float+0x98>
 8007866:	2301      	movs	r3, #1
 8007868:	464a      	mov	r2, r9
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f ae59 	beq.w	8007528 <_printf_float+0x98>
 8007876:	f108 0801 	add.w	r8, r8, #1
 800787a:	9b08      	ldr	r3, [sp, #32]
 800787c:	3b01      	subs	r3, #1
 800787e:	4543      	cmp	r3, r8
 8007880:	dcf1      	bgt.n	8007866 <_printf_float+0x3d6>
 8007882:	9b04      	ldr	r3, [sp, #16]
 8007884:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007888:	e6dd      	b.n	8007646 <_printf_float+0x1b6>
 800788a:	f04f 0800 	mov.w	r8, #0
 800788e:	f104 091a 	add.w	r9, r4, #26
 8007892:	e7f2      	b.n	800787a <_printf_float+0x3ea>
 8007894:	2301      	movs	r3, #1
 8007896:	4642      	mov	r2, r8
 8007898:	e7df      	b.n	800785a <_printf_float+0x3ca>
 800789a:	2301      	movs	r3, #1
 800789c:	464a      	mov	r2, r9
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f ae3f 	beq.w	8007528 <_printf_float+0x98>
 80078aa:	f108 0801 	add.w	r8, r8, #1
 80078ae:	68e3      	ldr	r3, [r4, #12]
 80078b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078b2:	1a5b      	subs	r3, r3, r1
 80078b4:	4543      	cmp	r3, r8
 80078b6:	dcf0      	bgt.n	800789a <_printf_float+0x40a>
 80078b8:	e6f9      	b.n	80076ae <_printf_float+0x21e>
 80078ba:	f04f 0800 	mov.w	r8, #0
 80078be:	f104 0919 	add.w	r9, r4, #25
 80078c2:	e7f4      	b.n	80078ae <_printf_float+0x41e>

080078c4 <_printf_common>:
 80078c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	4616      	mov	r6, r2
 80078ca:	4699      	mov	r9, r3
 80078cc:	688a      	ldr	r2, [r1, #8]
 80078ce:	690b      	ldr	r3, [r1, #16]
 80078d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bfb8      	it	lt
 80078d8:	4613      	movlt	r3, r2
 80078da:	6033      	str	r3, [r6, #0]
 80078dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078e0:	4607      	mov	r7, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	b10a      	cbz	r2, 80078ea <_printf_common+0x26>
 80078e6:	3301      	adds	r3, #1
 80078e8:	6033      	str	r3, [r6, #0]
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	0699      	lsls	r1, r3, #26
 80078ee:	bf42      	ittt	mi
 80078f0:	6833      	ldrmi	r3, [r6, #0]
 80078f2:	3302      	addmi	r3, #2
 80078f4:	6033      	strmi	r3, [r6, #0]
 80078f6:	6825      	ldr	r5, [r4, #0]
 80078f8:	f015 0506 	ands.w	r5, r5, #6
 80078fc:	d106      	bne.n	800790c <_printf_common+0x48>
 80078fe:	f104 0a19 	add.w	sl, r4, #25
 8007902:	68e3      	ldr	r3, [r4, #12]
 8007904:	6832      	ldr	r2, [r6, #0]
 8007906:	1a9b      	subs	r3, r3, r2
 8007908:	42ab      	cmp	r3, r5
 800790a:	dc26      	bgt.n	800795a <_printf_common+0x96>
 800790c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007910:	1e13      	subs	r3, r2, #0
 8007912:	6822      	ldr	r2, [r4, #0]
 8007914:	bf18      	it	ne
 8007916:	2301      	movne	r3, #1
 8007918:	0692      	lsls	r2, r2, #26
 800791a:	d42b      	bmi.n	8007974 <_printf_common+0xb0>
 800791c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007920:	4649      	mov	r1, r9
 8007922:	4638      	mov	r0, r7
 8007924:	47c0      	blx	r8
 8007926:	3001      	adds	r0, #1
 8007928:	d01e      	beq.n	8007968 <_printf_common+0xa4>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	6922      	ldr	r2, [r4, #16]
 800792e:	f003 0306 	and.w	r3, r3, #6
 8007932:	2b04      	cmp	r3, #4
 8007934:	bf02      	ittt	eq
 8007936:	68e5      	ldreq	r5, [r4, #12]
 8007938:	6833      	ldreq	r3, [r6, #0]
 800793a:	1aed      	subeq	r5, r5, r3
 800793c:	68a3      	ldr	r3, [r4, #8]
 800793e:	bf0c      	ite	eq
 8007940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007944:	2500      	movne	r5, #0
 8007946:	4293      	cmp	r3, r2
 8007948:	bfc4      	itt	gt
 800794a:	1a9b      	subgt	r3, r3, r2
 800794c:	18ed      	addgt	r5, r5, r3
 800794e:	2600      	movs	r6, #0
 8007950:	341a      	adds	r4, #26
 8007952:	42b5      	cmp	r5, r6
 8007954:	d11a      	bne.n	800798c <_printf_common+0xc8>
 8007956:	2000      	movs	r0, #0
 8007958:	e008      	b.n	800796c <_printf_common+0xa8>
 800795a:	2301      	movs	r3, #1
 800795c:	4652      	mov	r2, sl
 800795e:	4649      	mov	r1, r9
 8007960:	4638      	mov	r0, r7
 8007962:	47c0      	blx	r8
 8007964:	3001      	adds	r0, #1
 8007966:	d103      	bne.n	8007970 <_printf_common+0xac>
 8007968:	f04f 30ff 	mov.w	r0, #4294967295
 800796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007970:	3501      	adds	r5, #1
 8007972:	e7c6      	b.n	8007902 <_printf_common+0x3e>
 8007974:	18e1      	adds	r1, r4, r3
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	2030      	movs	r0, #48	; 0x30
 800797a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800797e:	4422      	add	r2, r4
 8007980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007988:	3302      	adds	r3, #2
 800798a:	e7c7      	b.n	800791c <_printf_common+0x58>
 800798c:	2301      	movs	r3, #1
 800798e:	4622      	mov	r2, r4
 8007990:	4649      	mov	r1, r9
 8007992:	4638      	mov	r0, r7
 8007994:	47c0      	blx	r8
 8007996:	3001      	adds	r0, #1
 8007998:	d0e6      	beq.n	8007968 <_printf_common+0xa4>
 800799a:	3601      	adds	r6, #1
 800799c:	e7d9      	b.n	8007952 <_printf_common+0x8e>
	...

080079a0 <_printf_i>:
 80079a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	7e0f      	ldrb	r7, [r1, #24]
 80079a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a8:	2f78      	cmp	r7, #120	; 0x78
 80079aa:	4691      	mov	r9, r2
 80079ac:	4680      	mov	r8, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	469a      	mov	sl, r3
 80079b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079b6:	d807      	bhi.n	80079c8 <_printf_i+0x28>
 80079b8:	2f62      	cmp	r7, #98	; 0x62
 80079ba:	d80a      	bhi.n	80079d2 <_printf_i+0x32>
 80079bc:	2f00      	cmp	r7, #0
 80079be:	f000 80d4 	beq.w	8007b6a <_printf_i+0x1ca>
 80079c2:	2f58      	cmp	r7, #88	; 0x58
 80079c4:	f000 80c0 	beq.w	8007b48 <_printf_i+0x1a8>
 80079c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079d0:	e03a      	b.n	8007a48 <_printf_i+0xa8>
 80079d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079d6:	2b15      	cmp	r3, #21
 80079d8:	d8f6      	bhi.n	80079c8 <_printf_i+0x28>
 80079da:	a101      	add	r1, pc, #4	; (adr r1, 80079e0 <_printf_i+0x40>)
 80079dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079e0:	08007a39 	.word	0x08007a39
 80079e4:	08007a4d 	.word	0x08007a4d
 80079e8:	080079c9 	.word	0x080079c9
 80079ec:	080079c9 	.word	0x080079c9
 80079f0:	080079c9 	.word	0x080079c9
 80079f4:	080079c9 	.word	0x080079c9
 80079f8:	08007a4d 	.word	0x08007a4d
 80079fc:	080079c9 	.word	0x080079c9
 8007a00:	080079c9 	.word	0x080079c9
 8007a04:	080079c9 	.word	0x080079c9
 8007a08:	080079c9 	.word	0x080079c9
 8007a0c:	08007b51 	.word	0x08007b51
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007b0b 	.word	0x08007b0b
 8007a18:	080079c9 	.word	0x080079c9
 8007a1c:	080079c9 	.word	0x080079c9
 8007a20:	08007b73 	.word	0x08007b73
 8007a24:	080079c9 	.word	0x080079c9
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	080079c9 	.word	0x080079c9
 8007a30:	080079c9 	.word	0x080079c9
 8007a34:	08007b13 	.word	0x08007b13
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	602a      	str	r2, [r5, #0]
 8007a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e09f      	b.n	8007b8c <_printf_i+0x1ec>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	0607      	lsls	r7, r0, #24
 8007a52:	f103 0104 	add.w	r1, r3, #4
 8007a56:	6029      	str	r1, [r5, #0]
 8007a58:	d501      	bpl.n	8007a5e <_printf_i+0xbe>
 8007a5a:	681e      	ldr	r6, [r3, #0]
 8007a5c:	e003      	b.n	8007a66 <_printf_i+0xc6>
 8007a5e:	0646      	lsls	r6, r0, #25
 8007a60:	d5fb      	bpl.n	8007a5a <_printf_i+0xba>
 8007a62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	da03      	bge.n	8007a72 <_printf_i+0xd2>
 8007a6a:	232d      	movs	r3, #45	; 0x2d
 8007a6c:	4276      	negs	r6, r6
 8007a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a72:	485a      	ldr	r0, [pc, #360]	; (8007bdc <_printf_i+0x23c>)
 8007a74:	230a      	movs	r3, #10
 8007a76:	e012      	b.n	8007a9e <_printf_i+0xfe>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	6820      	ldr	r0, [r4, #0]
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	6029      	str	r1, [r5, #0]
 8007a80:	0605      	lsls	r5, r0, #24
 8007a82:	d501      	bpl.n	8007a88 <_printf_i+0xe8>
 8007a84:	681e      	ldr	r6, [r3, #0]
 8007a86:	e002      	b.n	8007a8e <_printf_i+0xee>
 8007a88:	0641      	lsls	r1, r0, #25
 8007a8a:	d5fb      	bpl.n	8007a84 <_printf_i+0xe4>
 8007a8c:	881e      	ldrh	r6, [r3, #0]
 8007a8e:	4853      	ldr	r0, [pc, #332]	; (8007bdc <_printf_i+0x23c>)
 8007a90:	2f6f      	cmp	r7, #111	; 0x6f
 8007a92:	bf0c      	ite	eq
 8007a94:	2308      	moveq	r3, #8
 8007a96:	230a      	movne	r3, #10
 8007a98:	2100      	movs	r1, #0
 8007a9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a9e:	6865      	ldr	r5, [r4, #4]
 8007aa0:	60a5      	str	r5, [r4, #8]
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	bfa2      	ittt	ge
 8007aa6:	6821      	ldrge	r1, [r4, #0]
 8007aa8:	f021 0104 	bicge.w	r1, r1, #4
 8007aac:	6021      	strge	r1, [r4, #0]
 8007aae:	b90e      	cbnz	r6, 8007ab4 <_printf_i+0x114>
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	d04b      	beq.n	8007b4c <_printf_i+0x1ac>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007aba:	fb03 6711 	mls	r7, r3, r1, r6
 8007abe:	5dc7      	ldrb	r7, [r0, r7]
 8007ac0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ac4:	4637      	mov	r7, r6
 8007ac6:	42bb      	cmp	r3, r7
 8007ac8:	460e      	mov	r6, r1
 8007aca:	d9f4      	bls.n	8007ab6 <_printf_i+0x116>
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d10b      	bne.n	8007ae8 <_printf_i+0x148>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	07de      	lsls	r6, r3, #31
 8007ad4:	d508      	bpl.n	8007ae8 <_printf_i+0x148>
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	6861      	ldr	r1, [r4, #4]
 8007ada:	4299      	cmp	r1, r3
 8007adc:	bfde      	ittt	le
 8007ade:	2330      	movle	r3, #48	; 0x30
 8007ae0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ae4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae8:	1b52      	subs	r2, r2, r5
 8007aea:	6122      	str	r2, [r4, #16]
 8007aec:	f8cd a000 	str.w	sl, [sp]
 8007af0:	464b      	mov	r3, r9
 8007af2:	aa03      	add	r2, sp, #12
 8007af4:	4621      	mov	r1, r4
 8007af6:	4640      	mov	r0, r8
 8007af8:	f7ff fee4 	bl	80078c4 <_printf_common>
 8007afc:	3001      	adds	r0, #1
 8007afe:	d14a      	bne.n	8007b96 <_printf_i+0x1f6>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	b004      	add	sp, #16
 8007b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f043 0320 	orr.w	r3, r3, #32
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	4833      	ldr	r0, [pc, #204]	; (8007be0 <_printf_i+0x240>)
 8007b14:	2778      	movs	r7, #120	; 0x78
 8007b16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	6829      	ldr	r1, [r5, #0]
 8007b1e:	061f      	lsls	r7, r3, #24
 8007b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b24:	d402      	bmi.n	8007b2c <_printf_i+0x18c>
 8007b26:	065f      	lsls	r7, r3, #25
 8007b28:	bf48      	it	mi
 8007b2a:	b2b6      	uxthmi	r6, r6
 8007b2c:	07df      	lsls	r7, r3, #31
 8007b2e:	bf48      	it	mi
 8007b30:	f043 0320 	orrmi.w	r3, r3, #32
 8007b34:	6029      	str	r1, [r5, #0]
 8007b36:	bf48      	it	mi
 8007b38:	6023      	strmi	r3, [r4, #0]
 8007b3a:	b91e      	cbnz	r6, 8007b44 <_printf_i+0x1a4>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	f023 0320 	bic.w	r3, r3, #32
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	2310      	movs	r3, #16
 8007b46:	e7a7      	b.n	8007a98 <_printf_i+0xf8>
 8007b48:	4824      	ldr	r0, [pc, #144]	; (8007bdc <_printf_i+0x23c>)
 8007b4a:	e7e4      	b.n	8007b16 <_printf_i+0x176>
 8007b4c:	4615      	mov	r5, r2
 8007b4e:	e7bd      	b.n	8007acc <_printf_i+0x12c>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	6826      	ldr	r6, [r4, #0]
 8007b54:	6961      	ldr	r1, [r4, #20]
 8007b56:	1d18      	adds	r0, r3, #4
 8007b58:	6028      	str	r0, [r5, #0]
 8007b5a:	0635      	lsls	r5, r6, #24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	d501      	bpl.n	8007b64 <_printf_i+0x1c4>
 8007b60:	6019      	str	r1, [r3, #0]
 8007b62:	e002      	b.n	8007b6a <_printf_i+0x1ca>
 8007b64:	0670      	lsls	r0, r6, #25
 8007b66:	d5fb      	bpl.n	8007b60 <_printf_i+0x1c0>
 8007b68:	8019      	strh	r1, [r3, #0]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	4615      	mov	r5, r2
 8007b70:	e7bc      	b.n	8007aec <_printf_i+0x14c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	1d1a      	adds	r2, r3, #4
 8007b76:	602a      	str	r2, [r5, #0]
 8007b78:	681d      	ldr	r5, [r3, #0]
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4628      	mov	r0, r5
 8007b80:	f7f8 fb5e 	bl	8000240 <memchr>
 8007b84:	b108      	cbz	r0, 8007b8a <_printf_i+0x1ea>
 8007b86:	1b40      	subs	r0, r0, r5
 8007b88:	6060      	str	r0, [r4, #4]
 8007b8a:	6863      	ldr	r3, [r4, #4]
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b94:	e7aa      	b.n	8007aec <_printf_i+0x14c>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d0ad      	beq.n	8007b00 <_printf_i+0x160>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	079b      	lsls	r3, r3, #30
 8007ba8:	d413      	bmi.n	8007bd2 <_printf_i+0x232>
 8007baa:	68e0      	ldr	r0, [r4, #12]
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	4298      	cmp	r0, r3
 8007bb0:	bfb8      	it	lt
 8007bb2:	4618      	movlt	r0, r3
 8007bb4:	e7a6      	b.n	8007b04 <_printf_i+0x164>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	47d0      	blx	sl
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d09d      	beq.n	8007b00 <_printf_i+0x160>
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	9903      	ldr	r1, [sp, #12]
 8007bca:	1a5b      	subs	r3, r3, r1
 8007bcc:	42ab      	cmp	r3, r5
 8007bce:	dcf2      	bgt.n	8007bb6 <_printf_i+0x216>
 8007bd0:	e7eb      	b.n	8007baa <_printf_i+0x20a>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	f104 0619 	add.w	r6, r4, #25
 8007bd8:	e7f5      	b.n	8007bc6 <_printf_i+0x226>
 8007bda:	bf00      	nop
 8007bdc:	0800bc22 	.word	0x0800bc22
 8007be0:	0800bc33 	.word	0x0800bc33

08007be4 <_scanf_float>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	b087      	sub	sp, #28
 8007bea:	4617      	mov	r7, r2
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	688b      	ldr	r3, [r1, #8]
 8007bf0:	1e5a      	subs	r2, r3, #1
 8007bf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007bf6:	bf83      	ittte	hi
 8007bf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007bfc:	195b      	addhi	r3, r3, r5
 8007bfe:	9302      	strhi	r3, [sp, #8]
 8007c00:	2300      	movls	r3, #0
 8007c02:	bf86      	itte	hi
 8007c04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c08:	608b      	strhi	r3, [r1, #8]
 8007c0a:	9302      	strls	r3, [sp, #8]
 8007c0c:	680b      	ldr	r3, [r1, #0]
 8007c0e:	468b      	mov	fp, r1
 8007c10:	2500      	movs	r5, #0
 8007c12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c16:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c1e:	4680      	mov	r8, r0
 8007c20:	460c      	mov	r4, r1
 8007c22:	465e      	mov	r6, fp
 8007c24:	46aa      	mov	sl, r5
 8007c26:	46a9      	mov	r9, r5
 8007c28:	9501      	str	r5, [sp, #4]
 8007c2a:	68a2      	ldr	r2, [r4, #8]
 8007c2c:	b152      	cbz	r2, 8007c44 <_scanf_float+0x60>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b4e      	cmp	r3, #78	; 0x4e
 8007c34:	d864      	bhi.n	8007d00 <_scanf_float+0x11c>
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	d83c      	bhi.n	8007cb4 <_scanf_float+0xd0>
 8007c3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c3e:	b2c8      	uxtb	r0, r1
 8007c40:	280e      	cmp	r0, #14
 8007c42:	d93a      	bls.n	8007cba <_scanf_float+0xd6>
 8007c44:	f1b9 0f00 	cmp.w	r9, #0
 8007c48:	d003      	beq.n	8007c52 <_scanf_float+0x6e>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c56:	f1ba 0f01 	cmp.w	sl, #1
 8007c5a:	f200 8113 	bhi.w	8007e84 <_scanf_float+0x2a0>
 8007c5e:	455e      	cmp	r6, fp
 8007c60:	f200 8105 	bhi.w	8007e6e <_scanf_float+0x28a>
 8007c64:	2501      	movs	r5, #1
 8007c66:	4628      	mov	r0, r5
 8007c68:	b007      	add	sp, #28
 8007c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c72:	2a0d      	cmp	r2, #13
 8007c74:	d8e6      	bhi.n	8007c44 <_scanf_float+0x60>
 8007c76:	a101      	add	r1, pc, #4	; (adr r1, 8007c7c <_scanf_float+0x98>)
 8007c78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c7c:	08007dbb 	.word	0x08007dbb
 8007c80:	08007c45 	.word	0x08007c45
 8007c84:	08007c45 	.word	0x08007c45
 8007c88:	08007c45 	.word	0x08007c45
 8007c8c:	08007e1b 	.word	0x08007e1b
 8007c90:	08007df3 	.word	0x08007df3
 8007c94:	08007c45 	.word	0x08007c45
 8007c98:	08007c45 	.word	0x08007c45
 8007c9c:	08007dc9 	.word	0x08007dc9
 8007ca0:	08007c45 	.word	0x08007c45
 8007ca4:	08007c45 	.word	0x08007c45
 8007ca8:	08007c45 	.word	0x08007c45
 8007cac:	08007c45 	.word	0x08007c45
 8007cb0:	08007d81 	.word	0x08007d81
 8007cb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cb8:	e7db      	b.n	8007c72 <_scanf_float+0x8e>
 8007cba:	290e      	cmp	r1, #14
 8007cbc:	d8c2      	bhi.n	8007c44 <_scanf_float+0x60>
 8007cbe:	a001      	add	r0, pc, #4	; (adr r0, 8007cc4 <_scanf_float+0xe0>)
 8007cc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cc4:	08007d73 	.word	0x08007d73
 8007cc8:	08007c45 	.word	0x08007c45
 8007ccc:	08007d73 	.word	0x08007d73
 8007cd0:	08007e07 	.word	0x08007e07
 8007cd4:	08007c45 	.word	0x08007c45
 8007cd8:	08007d21 	.word	0x08007d21
 8007cdc:	08007d5d 	.word	0x08007d5d
 8007ce0:	08007d5d 	.word	0x08007d5d
 8007ce4:	08007d5d 	.word	0x08007d5d
 8007ce8:	08007d5d 	.word	0x08007d5d
 8007cec:	08007d5d 	.word	0x08007d5d
 8007cf0:	08007d5d 	.word	0x08007d5d
 8007cf4:	08007d5d 	.word	0x08007d5d
 8007cf8:	08007d5d 	.word	0x08007d5d
 8007cfc:	08007d5d 	.word	0x08007d5d
 8007d00:	2b6e      	cmp	r3, #110	; 0x6e
 8007d02:	d809      	bhi.n	8007d18 <_scanf_float+0x134>
 8007d04:	2b60      	cmp	r3, #96	; 0x60
 8007d06:	d8b2      	bhi.n	8007c6e <_scanf_float+0x8a>
 8007d08:	2b54      	cmp	r3, #84	; 0x54
 8007d0a:	d077      	beq.n	8007dfc <_scanf_float+0x218>
 8007d0c:	2b59      	cmp	r3, #89	; 0x59
 8007d0e:	d199      	bne.n	8007c44 <_scanf_float+0x60>
 8007d10:	2d07      	cmp	r5, #7
 8007d12:	d197      	bne.n	8007c44 <_scanf_float+0x60>
 8007d14:	2508      	movs	r5, #8
 8007d16:	e029      	b.n	8007d6c <_scanf_float+0x188>
 8007d18:	2b74      	cmp	r3, #116	; 0x74
 8007d1a:	d06f      	beq.n	8007dfc <_scanf_float+0x218>
 8007d1c:	2b79      	cmp	r3, #121	; 0x79
 8007d1e:	e7f6      	b.n	8007d0e <_scanf_float+0x12a>
 8007d20:	6821      	ldr	r1, [r4, #0]
 8007d22:	05c8      	lsls	r0, r1, #23
 8007d24:	d51a      	bpl.n	8007d5c <_scanf_float+0x178>
 8007d26:	9b02      	ldr	r3, [sp, #8]
 8007d28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d2c:	6021      	str	r1, [r4, #0]
 8007d2e:	f109 0901 	add.w	r9, r9, #1
 8007d32:	b11b      	cbz	r3, 8007d3c <_scanf_float+0x158>
 8007d34:	3b01      	subs	r3, #1
 8007d36:	3201      	adds	r2, #1
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	60a2      	str	r2, [r4, #8]
 8007d3c:	68a3      	ldr	r3, [r4, #8]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	60a3      	str	r3, [r4, #8]
 8007d42:	6923      	ldr	r3, [r4, #16]
 8007d44:	3301      	adds	r3, #1
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	f340 8084 	ble.w	8007e5c <_scanf_float+0x278>
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	3301      	adds	r3, #1
 8007d58:	603b      	str	r3, [r7, #0]
 8007d5a:	e766      	b.n	8007c2a <_scanf_float+0x46>
 8007d5c:	eb1a 0f05 	cmn.w	sl, r5
 8007d60:	f47f af70 	bne.w	8007c44 <_scanf_float+0x60>
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d6a:	6022      	str	r2, [r4, #0]
 8007d6c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d70:	e7e4      	b.n	8007d3c <_scanf_float+0x158>
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	0610      	lsls	r0, r2, #24
 8007d76:	f57f af65 	bpl.w	8007c44 <_scanf_float+0x60>
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7e:	e7f4      	b.n	8007d6a <_scanf_float+0x186>
 8007d80:	f1ba 0f00 	cmp.w	sl, #0
 8007d84:	d10e      	bne.n	8007da4 <_scanf_float+0x1c0>
 8007d86:	f1b9 0f00 	cmp.w	r9, #0
 8007d8a:	d10e      	bne.n	8007daa <_scanf_float+0x1c6>
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d96:	d108      	bne.n	8007daa <_scanf_float+0x1c6>
 8007d98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	f04f 0a01 	mov.w	sl, #1
 8007da2:	e7e3      	b.n	8007d6c <_scanf_float+0x188>
 8007da4:	f1ba 0f02 	cmp.w	sl, #2
 8007da8:	d055      	beq.n	8007e56 <_scanf_float+0x272>
 8007daa:	2d01      	cmp	r5, #1
 8007dac:	d002      	beq.n	8007db4 <_scanf_float+0x1d0>
 8007dae:	2d04      	cmp	r5, #4
 8007db0:	f47f af48 	bne.w	8007c44 <_scanf_float+0x60>
 8007db4:	3501      	adds	r5, #1
 8007db6:	b2ed      	uxtb	r5, r5
 8007db8:	e7d8      	b.n	8007d6c <_scanf_float+0x188>
 8007dba:	f1ba 0f01 	cmp.w	sl, #1
 8007dbe:	f47f af41 	bne.w	8007c44 <_scanf_float+0x60>
 8007dc2:	f04f 0a02 	mov.w	sl, #2
 8007dc6:	e7d1      	b.n	8007d6c <_scanf_float+0x188>
 8007dc8:	b97d      	cbnz	r5, 8007dea <_scanf_float+0x206>
 8007dca:	f1b9 0f00 	cmp.w	r9, #0
 8007dce:	f47f af3c 	bne.w	8007c4a <_scanf_float+0x66>
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007dd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ddc:	f47f af39 	bne.w	8007c52 <_scanf_float+0x6e>
 8007de0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	2501      	movs	r5, #1
 8007de8:	e7c0      	b.n	8007d6c <_scanf_float+0x188>
 8007dea:	2d03      	cmp	r5, #3
 8007dec:	d0e2      	beq.n	8007db4 <_scanf_float+0x1d0>
 8007dee:	2d05      	cmp	r5, #5
 8007df0:	e7de      	b.n	8007db0 <_scanf_float+0x1cc>
 8007df2:	2d02      	cmp	r5, #2
 8007df4:	f47f af26 	bne.w	8007c44 <_scanf_float+0x60>
 8007df8:	2503      	movs	r5, #3
 8007dfa:	e7b7      	b.n	8007d6c <_scanf_float+0x188>
 8007dfc:	2d06      	cmp	r5, #6
 8007dfe:	f47f af21 	bne.w	8007c44 <_scanf_float+0x60>
 8007e02:	2507      	movs	r5, #7
 8007e04:	e7b2      	b.n	8007d6c <_scanf_float+0x188>
 8007e06:	6822      	ldr	r2, [r4, #0]
 8007e08:	0591      	lsls	r1, r2, #22
 8007e0a:	f57f af1b 	bpl.w	8007c44 <_scanf_float+0x60>
 8007e0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e18:	e7a8      	b.n	8007d6c <_scanf_float+0x188>
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e24:	d006      	beq.n	8007e34 <_scanf_float+0x250>
 8007e26:	0550      	lsls	r0, r2, #21
 8007e28:	f57f af0c 	bpl.w	8007c44 <_scanf_float+0x60>
 8007e2c:	f1b9 0f00 	cmp.w	r9, #0
 8007e30:	f43f af0f 	beq.w	8007c52 <_scanf_float+0x6e>
 8007e34:	0591      	lsls	r1, r2, #22
 8007e36:	bf58      	it	pl
 8007e38:	9901      	ldrpl	r1, [sp, #4]
 8007e3a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e3e:	bf58      	it	pl
 8007e40:	eba9 0101 	subpl.w	r1, r9, r1
 8007e44:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e48:	bf58      	it	pl
 8007e4a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	f04f 0900 	mov.w	r9, #0
 8007e54:	e78a      	b.n	8007d6c <_scanf_float+0x188>
 8007e56:	f04f 0a03 	mov.w	sl, #3
 8007e5a:	e787      	b.n	8007d6c <_scanf_float+0x188>
 8007e5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e60:	4639      	mov	r1, r7
 8007e62:	4640      	mov	r0, r8
 8007e64:	4798      	blx	r3
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f43f aedf 	beq.w	8007c2a <_scanf_float+0x46>
 8007e6c:	e6ea      	b.n	8007c44 <_scanf_float+0x60>
 8007e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e76:	463a      	mov	r2, r7
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4798      	blx	r3
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	6123      	str	r3, [r4, #16]
 8007e82:	e6ec      	b.n	8007c5e <_scanf_float+0x7a>
 8007e84:	1e6b      	subs	r3, r5, #1
 8007e86:	2b06      	cmp	r3, #6
 8007e88:	d825      	bhi.n	8007ed6 <_scanf_float+0x2f2>
 8007e8a:	2d02      	cmp	r5, #2
 8007e8c:	d836      	bhi.n	8007efc <_scanf_float+0x318>
 8007e8e:	455e      	cmp	r6, fp
 8007e90:	f67f aee8 	bls.w	8007c64 <_scanf_float+0x80>
 8007e94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e98:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	4798      	blx	r3
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	6123      	str	r3, [r4, #16]
 8007ea8:	e7f1      	b.n	8007e8e <_scanf_float+0x2aa>
 8007eaa:	9802      	ldr	r0, [sp, #8]
 8007eac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eb0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007eb4:	9002      	str	r0, [sp, #8]
 8007eb6:	463a      	mov	r2, r7
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4798      	blx	r3
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec6:	fa5f fa8a 	uxtb.w	sl, sl
 8007eca:	f1ba 0f02 	cmp.w	sl, #2
 8007ece:	d1ec      	bne.n	8007eaa <_scanf_float+0x2c6>
 8007ed0:	3d03      	subs	r5, #3
 8007ed2:	b2ed      	uxtb	r5, r5
 8007ed4:	1b76      	subs	r6, r6, r5
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	05da      	lsls	r2, r3, #23
 8007eda:	d52f      	bpl.n	8007f3c <_scanf_float+0x358>
 8007edc:	055b      	lsls	r3, r3, #21
 8007ede:	d510      	bpl.n	8007f02 <_scanf_float+0x31e>
 8007ee0:	455e      	cmp	r6, fp
 8007ee2:	f67f aebf 	bls.w	8007c64 <_scanf_float+0x80>
 8007ee6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007eea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eee:	463a      	mov	r2, r7
 8007ef0:	4640      	mov	r0, r8
 8007ef2:	4798      	blx	r3
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	e7f1      	b.n	8007ee0 <_scanf_float+0x2fc>
 8007efc:	46aa      	mov	sl, r5
 8007efe:	9602      	str	r6, [sp, #8]
 8007f00:	e7df      	b.n	8007ec2 <_scanf_float+0x2de>
 8007f02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	2965      	cmp	r1, #101	; 0x65
 8007f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f0e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	d00c      	beq.n	8007f30 <_scanf_float+0x34c>
 8007f16:	2945      	cmp	r1, #69	; 0x45
 8007f18:	d00a      	beq.n	8007f30 <_scanf_float+0x34c>
 8007f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f1e:	463a      	mov	r2, r7
 8007f20:	4640      	mov	r0, r8
 8007f22:	4798      	blx	r3
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	1eb5      	subs	r5, r6, #2
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f34:	463a      	mov	r2, r7
 8007f36:	4640      	mov	r0, r8
 8007f38:	4798      	blx	r3
 8007f3a:	462e      	mov	r6, r5
 8007f3c:	6825      	ldr	r5, [r4, #0]
 8007f3e:	f015 0510 	ands.w	r5, r5, #16
 8007f42:	d14d      	bne.n	8007fe0 <_scanf_float+0x3fc>
 8007f44:	7035      	strb	r5, [r6, #0]
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f50:	d11a      	bne.n	8007f88 <_scanf_float+0x3a4>
 8007f52:	9b01      	ldr	r3, [sp, #4]
 8007f54:	454b      	cmp	r3, r9
 8007f56:	eba3 0209 	sub.w	r2, r3, r9
 8007f5a:	d122      	bne.n	8007fa2 <_scanf_float+0x3be>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4659      	mov	r1, fp
 8007f60:	4640      	mov	r0, r8
 8007f62:	f002 fb5b 	bl	800a61c <_strtod_r>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	6821      	ldr	r1, [r4, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f011 0f02 	tst.w	r1, #2
 8007f70:	f103 0204 	add.w	r2, r3, #4
 8007f74:	d020      	beq.n	8007fb8 <_scanf_float+0x3d4>
 8007f76:	9903      	ldr	r1, [sp, #12]
 8007f78:	600a      	str	r2, [r1, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	ed83 0b00 	vstr	d0, [r3]
 8007f80:	68e3      	ldr	r3, [r4, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60e3      	str	r3, [r4, #12]
 8007f86:	e66e      	b.n	8007c66 <_scanf_float+0x82>
 8007f88:	9b04      	ldr	r3, [sp, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0e6      	beq.n	8007f5c <_scanf_float+0x378>
 8007f8e:	9905      	ldr	r1, [sp, #20]
 8007f90:	230a      	movs	r3, #10
 8007f92:	462a      	mov	r2, r5
 8007f94:	3101      	adds	r1, #1
 8007f96:	4640      	mov	r0, r8
 8007f98:	f002 fbc8 	bl	800a72c <_strtol_r>
 8007f9c:	9b04      	ldr	r3, [sp, #16]
 8007f9e:	9e05      	ldr	r6, [sp, #20]
 8007fa0:	1ac2      	subs	r2, r0, r3
 8007fa2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	bf28      	it	cs
 8007faa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fae:	490d      	ldr	r1, [pc, #52]	; (8007fe4 <_scanf_float+0x400>)
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f000 f8dd 	bl	8008170 <siprintf>
 8007fb6:	e7d1      	b.n	8007f5c <_scanf_float+0x378>
 8007fb8:	f011 0f04 	tst.w	r1, #4
 8007fbc:	9903      	ldr	r1, [sp, #12]
 8007fbe:	600a      	str	r2, [r1, #0]
 8007fc0:	d1db      	bne.n	8007f7a <_scanf_float+0x396>
 8007fc2:	eeb4 0b40 	vcmp.f64	d0, d0
 8007fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fca:	681e      	ldr	r6, [r3, #0]
 8007fcc:	d705      	bvc.n	8007fda <_scanf_float+0x3f6>
 8007fce:	4806      	ldr	r0, [pc, #24]	; (8007fe8 <_scanf_float+0x404>)
 8007fd0:	f000 f9b2 	bl	8008338 <nanf>
 8007fd4:	ed86 0a00 	vstr	s0, [r6]
 8007fd8:	e7d2      	b.n	8007f80 <_scanf_float+0x39c>
 8007fda:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007fde:	e7f9      	b.n	8007fd4 <_scanf_float+0x3f0>
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	e640      	b.n	8007c66 <_scanf_float+0x82>
 8007fe4:	0800bc44 	.word	0x0800bc44
 8007fe8:	0800bfd5 	.word	0x0800bfd5

08007fec <std>:
 8007fec:	2300      	movs	r3, #0
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ffa:	6083      	str	r3, [r0, #8]
 8007ffc:	8181      	strh	r1, [r0, #12]
 8007ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8008000:	81c2      	strh	r2, [r0, #14]
 8008002:	6183      	str	r3, [r0, #24]
 8008004:	4619      	mov	r1, r3
 8008006:	2208      	movs	r2, #8
 8008008:	305c      	adds	r0, #92	; 0x5c
 800800a:	f000 f914 	bl	8008236 <memset>
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <std+0x58>)
 8008010:	6263      	str	r3, [r4, #36]	; 0x24
 8008012:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <std+0x5c>)
 8008014:	62a3      	str	r3, [r4, #40]	; 0x28
 8008016:	4b0d      	ldr	r3, [pc, #52]	; (800804c <std+0x60>)
 8008018:	62e3      	str	r3, [r4, #44]	; 0x2c
 800801a:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <std+0x64>)
 800801c:	6323      	str	r3, [r4, #48]	; 0x30
 800801e:	4b0d      	ldr	r3, [pc, #52]	; (8008054 <std+0x68>)
 8008020:	6224      	str	r4, [r4, #32]
 8008022:	429c      	cmp	r4, r3
 8008024:	d006      	beq.n	8008034 <std+0x48>
 8008026:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800802a:	4294      	cmp	r4, r2
 800802c:	d002      	beq.n	8008034 <std+0x48>
 800802e:	33d0      	adds	r3, #208	; 0xd0
 8008030:	429c      	cmp	r4, r3
 8008032:	d105      	bne.n	8008040 <std+0x54>
 8008034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803c:	f000 b978 	b.w	8008330 <__retarget_lock_init_recursive>
 8008040:	bd10      	pop	{r4, pc}
 8008042:	bf00      	nop
 8008044:	080081b1 	.word	0x080081b1
 8008048:	080081d3 	.word	0x080081d3
 800804c:	0800820b 	.word	0x0800820b
 8008050:	0800822f 	.word	0x0800822f
 8008054:	20000430 	.word	0x20000430

08008058 <stdio_exit_handler>:
 8008058:	4a02      	ldr	r2, [pc, #8]	; (8008064 <stdio_exit_handler+0xc>)
 800805a:	4903      	ldr	r1, [pc, #12]	; (8008068 <stdio_exit_handler+0x10>)
 800805c:	4803      	ldr	r0, [pc, #12]	; (800806c <stdio_exit_handler+0x14>)
 800805e:	f000 b869 	b.w	8008134 <_fwalk_sglue>
 8008062:	bf00      	nop
 8008064:	20000010 	.word	0x20000010
 8008068:	0800aaed 	.word	0x0800aaed
 800806c:	2000001c 	.word	0x2000001c

08008070 <cleanup_stdio>:
 8008070:	6841      	ldr	r1, [r0, #4]
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <cleanup_stdio+0x34>)
 8008074:	4299      	cmp	r1, r3
 8008076:	b510      	push	{r4, lr}
 8008078:	4604      	mov	r4, r0
 800807a:	d001      	beq.n	8008080 <cleanup_stdio+0x10>
 800807c:	f002 fd36 	bl	800aaec <_fflush_r>
 8008080:	68a1      	ldr	r1, [r4, #8]
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <cleanup_stdio+0x38>)
 8008084:	4299      	cmp	r1, r3
 8008086:	d002      	beq.n	800808e <cleanup_stdio+0x1e>
 8008088:	4620      	mov	r0, r4
 800808a:	f002 fd2f 	bl	800aaec <_fflush_r>
 800808e:	68e1      	ldr	r1, [r4, #12]
 8008090:	4b06      	ldr	r3, [pc, #24]	; (80080ac <cleanup_stdio+0x3c>)
 8008092:	4299      	cmp	r1, r3
 8008094:	d004      	beq.n	80080a0 <cleanup_stdio+0x30>
 8008096:	4620      	mov	r0, r4
 8008098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809c:	f002 bd26 	b.w	800aaec <_fflush_r>
 80080a0:	bd10      	pop	{r4, pc}
 80080a2:	bf00      	nop
 80080a4:	20000430 	.word	0x20000430
 80080a8:	20000498 	.word	0x20000498
 80080ac:	20000500 	.word	0x20000500

080080b0 <global_stdio_init.part.0>:
 80080b0:	b510      	push	{r4, lr}
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <global_stdio_init.part.0+0x30>)
 80080b4:	4c0b      	ldr	r4, [pc, #44]	; (80080e4 <global_stdio_init.part.0+0x34>)
 80080b6:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <global_stdio_init.part.0+0x38>)
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	4620      	mov	r0, r4
 80080bc:	2200      	movs	r2, #0
 80080be:	2104      	movs	r1, #4
 80080c0:	f7ff ff94 	bl	8007fec <std>
 80080c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80080c8:	2201      	movs	r2, #1
 80080ca:	2109      	movs	r1, #9
 80080cc:	f7ff ff8e 	bl	8007fec <std>
 80080d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80080d4:	2202      	movs	r2, #2
 80080d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080da:	2112      	movs	r1, #18
 80080dc:	f7ff bf86 	b.w	8007fec <std>
 80080e0:	20000568 	.word	0x20000568
 80080e4:	20000430 	.word	0x20000430
 80080e8:	08008059 	.word	0x08008059

080080ec <__sfp_lock_acquire>:
 80080ec:	4801      	ldr	r0, [pc, #4]	; (80080f4 <__sfp_lock_acquire+0x8>)
 80080ee:	f000 b920 	b.w	8008332 <__retarget_lock_acquire_recursive>
 80080f2:	bf00      	nop
 80080f4:	20000571 	.word	0x20000571

080080f8 <__sfp_lock_release>:
 80080f8:	4801      	ldr	r0, [pc, #4]	; (8008100 <__sfp_lock_release+0x8>)
 80080fa:	f000 b91b 	b.w	8008334 <__retarget_lock_release_recursive>
 80080fe:	bf00      	nop
 8008100:	20000571 	.word	0x20000571

08008104 <__sinit>:
 8008104:	b510      	push	{r4, lr}
 8008106:	4604      	mov	r4, r0
 8008108:	f7ff fff0 	bl	80080ec <__sfp_lock_acquire>
 800810c:	6a23      	ldr	r3, [r4, #32]
 800810e:	b11b      	cbz	r3, 8008118 <__sinit+0x14>
 8008110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008114:	f7ff bff0 	b.w	80080f8 <__sfp_lock_release>
 8008118:	4b04      	ldr	r3, [pc, #16]	; (800812c <__sinit+0x28>)
 800811a:	6223      	str	r3, [r4, #32]
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <__sinit+0x2c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1f5      	bne.n	8008110 <__sinit+0xc>
 8008124:	f7ff ffc4 	bl	80080b0 <global_stdio_init.part.0>
 8008128:	e7f2      	b.n	8008110 <__sinit+0xc>
 800812a:	bf00      	nop
 800812c:	08008071 	.word	0x08008071
 8008130:	20000568 	.word	0x20000568

08008134 <_fwalk_sglue>:
 8008134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008138:	4607      	mov	r7, r0
 800813a:	4688      	mov	r8, r1
 800813c:	4614      	mov	r4, r2
 800813e:	2600      	movs	r6, #0
 8008140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008144:	f1b9 0901 	subs.w	r9, r9, #1
 8008148:	d505      	bpl.n	8008156 <_fwalk_sglue+0x22>
 800814a:	6824      	ldr	r4, [r4, #0]
 800814c:	2c00      	cmp	r4, #0
 800814e:	d1f7      	bne.n	8008140 <_fwalk_sglue+0xc>
 8008150:	4630      	mov	r0, r6
 8008152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d907      	bls.n	800816c <_fwalk_sglue+0x38>
 800815c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008160:	3301      	adds	r3, #1
 8008162:	d003      	beq.n	800816c <_fwalk_sglue+0x38>
 8008164:	4629      	mov	r1, r5
 8008166:	4638      	mov	r0, r7
 8008168:	47c0      	blx	r8
 800816a:	4306      	orrs	r6, r0
 800816c:	3568      	adds	r5, #104	; 0x68
 800816e:	e7e9      	b.n	8008144 <_fwalk_sglue+0x10>

08008170 <siprintf>:
 8008170:	b40e      	push	{r1, r2, r3}
 8008172:	b500      	push	{lr}
 8008174:	b09c      	sub	sp, #112	; 0x70
 8008176:	ab1d      	add	r3, sp, #116	; 0x74
 8008178:	9002      	str	r0, [sp, #8]
 800817a:	9006      	str	r0, [sp, #24]
 800817c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008180:	4809      	ldr	r0, [pc, #36]	; (80081a8 <siprintf+0x38>)
 8008182:	9107      	str	r1, [sp, #28]
 8008184:	9104      	str	r1, [sp, #16]
 8008186:	4909      	ldr	r1, [pc, #36]	; (80081ac <siprintf+0x3c>)
 8008188:	f853 2b04 	ldr.w	r2, [r3], #4
 800818c:	9105      	str	r1, [sp, #20]
 800818e:	6800      	ldr	r0, [r0, #0]
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	a902      	add	r1, sp, #8
 8008194:	f002 fb26 	bl	800a7e4 <_svfiprintf_r>
 8008198:	9b02      	ldr	r3, [sp, #8]
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	b01c      	add	sp, #112	; 0x70
 80081a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a4:	b003      	add	sp, #12
 80081a6:	4770      	bx	lr
 80081a8:	20000068 	.word	0x20000068
 80081ac:	ffff0208 	.word	0xffff0208

080081b0 <__sread>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	460c      	mov	r4, r1
 80081b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b8:	f000 f86c 	bl	8008294 <_read_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	bfab      	itete	ge
 80081c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081c2:	89a3      	ldrhlt	r3, [r4, #12]
 80081c4:	181b      	addge	r3, r3, r0
 80081c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081ca:	bfac      	ite	ge
 80081cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ce:	81a3      	strhlt	r3, [r4, #12]
 80081d0:	bd10      	pop	{r4, pc}

080081d2 <__swrite>:
 80081d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d6:	461f      	mov	r7, r3
 80081d8:	898b      	ldrh	r3, [r1, #12]
 80081da:	05db      	lsls	r3, r3, #23
 80081dc:	4605      	mov	r5, r0
 80081de:	460c      	mov	r4, r1
 80081e0:	4616      	mov	r6, r2
 80081e2:	d505      	bpl.n	80081f0 <__swrite+0x1e>
 80081e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e8:	2302      	movs	r3, #2
 80081ea:	2200      	movs	r2, #0
 80081ec:	f000 f840 	bl	8008270 <_lseek_r>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	4628      	mov	r0, r5
 8008202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008206:	f000 b857 	b.w	80082b8 <_write_r>

0800820a <__sseek>:
 800820a:	b510      	push	{r4, lr}
 800820c:	460c      	mov	r4, r1
 800820e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008212:	f000 f82d 	bl	8008270 <_lseek_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	bf15      	itete	ne
 800821c:	6560      	strne	r0, [r4, #84]	; 0x54
 800821e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008226:	81a3      	strheq	r3, [r4, #12]
 8008228:	bf18      	it	ne
 800822a:	81a3      	strhne	r3, [r4, #12]
 800822c:	bd10      	pop	{r4, pc}

0800822e <__sclose>:
 800822e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008232:	f000 b80d 	b.w	8008250 <_close_r>

08008236 <memset>:
 8008236:	4402      	add	r2, r0
 8008238:	4603      	mov	r3, r0
 800823a:	4293      	cmp	r3, r2
 800823c:	d100      	bne.n	8008240 <memset+0xa>
 800823e:	4770      	bx	lr
 8008240:	f803 1b01 	strb.w	r1, [r3], #1
 8008244:	e7f9      	b.n	800823a <memset+0x4>
	...

08008248 <_localeconv_r>:
 8008248:	4800      	ldr	r0, [pc, #0]	; (800824c <_localeconv_r+0x4>)
 800824a:	4770      	bx	lr
 800824c:	2000015c 	.word	0x2000015c

08008250 <_close_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	; (800826c <_close_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7f9 fec3 	bl	8001fe6 <_close>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_close_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_close_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	2000056c 	.word	0x2000056c

08008270 <_lseek_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	; (8008290 <_lseek_r+0x20>)
 8008274:	4604      	mov	r4, r0
 8008276:	4608      	mov	r0, r1
 8008278:	4611      	mov	r1, r2
 800827a:	2200      	movs	r2, #0
 800827c:	602a      	str	r2, [r5, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	f7f9 fed8 	bl	8002034 <_lseek>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_lseek_r+0x1e>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_lseek_r+0x1e>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	2000056c 	.word	0x2000056c

08008294 <_read_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d07      	ldr	r5, [pc, #28]	; (80082b4 <_read_r+0x20>)
 8008298:	4604      	mov	r4, r0
 800829a:	4608      	mov	r0, r1
 800829c:	4611      	mov	r1, r2
 800829e:	2200      	movs	r2, #0
 80082a0:	602a      	str	r2, [r5, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f7f9 fe66 	bl	8001f74 <_read>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d102      	bne.n	80082b2 <_read_r+0x1e>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	b103      	cbz	r3, 80082b2 <_read_r+0x1e>
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	2000056c 	.word	0x2000056c

080082b8 <_write_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d07      	ldr	r5, [pc, #28]	; (80082d8 <_write_r+0x20>)
 80082bc:	4604      	mov	r4, r0
 80082be:	4608      	mov	r0, r1
 80082c0:	4611      	mov	r1, r2
 80082c2:	2200      	movs	r2, #0
 80082c4:	602a      	str	r2, [r5, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	f7f9 fe71 	bl	8001fae <_write>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d102      	bne.n	80082d6 <_write_r+0x1e>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	b103      	cbz	r3, 80082d6 <_write_r+0x1e>
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	2000056c 	.word	0x2000056c

080082dc <__errno>:
 80082dc:	4b01      	ldr	r3, [pc, #4]	; (80082e4 <__errno+0x8>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000068 	.word	0x20000068

080082e8 <__libc_init_array>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4d0d      	ldr	r5, [pc, #52]	; (8008320 <__libc_init_array+0x38>)
 80082ec:	4c0d      	ldr	r4, [pc, #52]	; (8008324 <__libc_init_array+0x3c>)
 80082ee:	1b64      	subs	r4, r4, r5
 80082f0:	10a4      	asrs	r4, r4, #2
 80082f2:	2600      	movs	r6, #0
 80082f4:	42a6      	cmp	r6, r4
 80082f6:	d109      	bne.n	800830c <__libc_init_array+0x24>
 80082f8:	4d0b      	ldr	r5, [pc, #44]	; (8008328 <__libc_init_array+0x40>)
 80082fa:	4c0c      	ldr	r4, [pc, #48]	; (800832c <__libc_init_array+0x44>)
 80082fc:	f003 fb0c 	bl	800b918 <_init>
 8008300:	1b64      	subs	r4, r4, r5
 8008302:	10a4      	asrs	r4, r4, #2
 8008304:	2600      	movs	r6, #0
 8008306:	42a6      	cmp	r6, r4
 8008308:	d105      	bne.n	8008316 <__libc_init_array+0x2e>
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008310:	4798      	blx	r3
 8008312:	3601      	adds	r6, #1
 8008314:	e7ee      	b.n	80082f4 <__libc_init_array+0xc>
 8008316:	f855 3b04 	ldr.w	r3, [r5], #4
 800831a:	4798      	blx	r3
 800831c:	3601      	adds	r6, #1
 800831e:	e7f2      	b.n	8008306 <__libc_init_array+0x1e>
 8008320:	0800c040 	.word	0x0800c040
 8008324:	0800c040 	.word	0x0800c040
 8008328:	0800c040 	.word	0x0800c040
 800832c:	0800c044 	.word	0x0800c044

08008330 <__retarget_lock_init_recursive>:
 8008330:	4770      	bx	lr

08008332 <__retarget_lock_acquire_recursive>:
 8008332:	4770      	bx	lr

08008334 <__retarget_lock_release_recursive>:
 8008334:	4770      	bx	lr
	...

08008338 <nanf>:
 8008338:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008340 <nanf+0x8>
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	7fc00000 	.word	0x7fc00000

08008344 <quorem>:
 8008344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	6903      	ldr	r3, [r0, #16]
 800834a:	690c      	ldr	r4, [r1, #16]
 800834c:	42a3      	cmp	r3, r4
 800834e:	4607      	mov	r7, r0
 8008350:	db7e      	blt.n	8008450 <quorem+0x10c>
 8008352:	3c01      	subs	r4, #1
 8008354:	f101 0814 	add.w	r8, r1, #20
 8008358:	f100 0514 	add.w	r5, r0, #20
 800835c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008366:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800836a:	3301      	adds	r3, #1
 800836c:	429a      	cmp	r2, r3
 800836e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008372:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008376:	fbb2 f6f3 	udiv	r6, r2, r3
 800837a:	d331      	bcc.n	80083e0 <quorem+0x9c>
 800837c:	f04f 0e00 	mov.w	lr, #0
 8008380:	4640      	mov	r0, r8
 8008382:	46ac      	mov	ip, r5
 8008384:	46f2      	mov	sl, lr
 8008386:	f850 2b04 	ldr.w	r2, [r0], #4
 800838a:	b293      	uxth	r3, r2
 800838c:	fb06 e303 	mla	r3, r6, r3, lr
 8008390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008394:	0c1a      	lsrs	r2, r3, #16
 8008396:	b29b      	uxth	r3, r3
 8008398:	ebaa 0303 	sub.w	r3, sl, r3
 800839c:	f8dc a000 	ldr.w	sl, [ip]
 80083a0:	fa13 f38a 	uxtah	r3, r3, sl
 80083a4:	fb06 220e 	mla	r2, r6, lr, r2
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	9b00      	ldr	r3, [sp, #0]
 80083ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083b0:	b292      	uxth	r2, r2
 80083b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80083be:	4581      	cmp	r9, r0
 80083c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083c4:	f84c 3b04 	str.w	r3, [ip], #4
 80083c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083cc:	d2db      	bcs.n	8008386 <quorem+0x42>
 80083ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80083d2:	b92b      	cbnz	r3, 80083e0 <quorem+0x9c>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	3b04      	subs	r3, #4
 80083d8:	429d      	cmp	r5, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	d32c      	bcc.n	8008438 <quorem+0xf4>
 80083de:	613c      	str	r4, [r7, #16]
 80083e0:	4638      	mov	r0, r7
 80083e2:	f001 f96b 	bl	80096bc <__mcmp>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	db22      	blt.n	8008430 <quorem+0xec>
 80083ea:	3601      	adds	r6, #1
 80083ec:	4629      	mov	r1, r5
 80083ee:	2000      	movs	r0, #0
 80083f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80083f4:	f8d1 c000 	ldr.w	ip, [r1]
 80083f8:	b293      	uxth	r3, r2
 80083fa:	1ac3      	subs	r3, r0, r3
 80083fc:	0c12      	lsrs	r2, r2, #16
 80083fe:	fa13 f38c 	uxtah	r3, r3, ip
 8008402:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008406:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800840a:	b29b      	uxth	r3, r3
 800840c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008410:	45c1      	cmp	r9, r8
 8008412:	f841 3b04 	str.w	r3, [r1], #4
 8008416:	ea4f 4022 	mov.w	r0, r2, asr #16
 800841a:	d2e9      	bcs.n	80083f0 <quorem+0xac>
 800841c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008420:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008424:	b922      	cbnz	r2, 8008430 <quorem+0xec>
 8008426:	3b04      	subs	r3, #4
 8008428:	429d      	cmp	r5, r3
 800842a:	461a      	mov	r2, r3
 800842c:	d30a      	bcc.n	8008444 <quorem+0x100>
 800842e:	613c      	str	r4, [r7, #16]
 8008430:	4630      	mov	r0, r6
 8008432:	b003      	add	sp, #12
 8008434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	3b04      	subs	r3, #4
 800843c:	2a00      	cmp	r2, #0
 800843e:	d1ce      	bne.n	80083de <quorem+0x9a>
 8008440:	3c01      	subs	r4, #1
 8008442:	e7c9      	b.n	80083d8 <quorem+0x94>
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	3b04      	subs	r3, #4
 8008448:	2a00      	cmp	r2, #0
 800844a:	d1f0      	bne.n	800842e <quorem+0xea>
 800844c:	3c01      	subs	r4, #1
 800844e:	e7eb      	b.n	8008428 <quorem+0xe4>
 8008450:	2000      	movs	r0, #0
 8008452:	e7ee      	b.n	8008432 <quorem+0xee>
 8008454:	0000      	movs	r0, r0
	...

08008458 <_dtoa_r>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	ed2d 8b02 	vpush	{d8}
 8008460:	69c5      	ldr	r5, [r0, #28]
 8008462:	b091      	sub	sp, #68	; 0x44
 8008464:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008468:	ec59 8b10 	vmov	r8, r9, d0
 800846c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800846e:	9106      	str	r1, [sp, #24]
 8008470:	4606      	mov	r6, r0
 8008472:	9208      	str	r2, [sp, #32]
 8008474:	930c      	str	r3, [sp, #48]	; 0x30
 8008476:	b975      	cbnz	r5, 8008496 <_dtoa_r+0x3e>
 8008478:	2010      	movs	r0, #16
 800847a:	f000 fda5 	bl	8008fc8 <malloc>
 800847e:	4602      	mov	r2, r0
 8008480:	61f0      	str	r0, [r6, #28]
 8008482:	b920      	cbnz	r0, 800848e <_dtoa_r+0x36>
 8008484:	4ba6      	ldr	r3, [pc, #664]	; (8008720 <_dtoa_r+0x2c8>)
 8008486:	21ef      	movs	r1, #239	; 0xef
 8008488:	48a6      	ldr	r0, [pc, #664]	; (8008724 <_dtoa_r+0x2cc>)
 800848a:	f002 fba9 	bl	800abe0 <__assert_func>
 800848e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008492:	6005      	str	r5, [r0, #0]
 8008494:	60c5      	str	r5, [r0, #12]
 8008496:	69f3      	ldr	r3, [r6, #28]
 8008498:	6819      	ldr	r1, [r3, #0]
 800849a:	b151      	cbz	r1, 80084b2 <_dtoa_r+0x5a>
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	604a      	str	r2, [r1, #4]
 80084a0:	2301      	movs	r3, #1
 80084a2:	4093      	lsls	r3, r2
 80084a4:	608b      	str	r3, [r1, #8]
 80084a6:	4630      	mov	r0, r6
 80084a8:	f000 fe82 	bl	80091b0 <_Bfree>
 80084ac:	69f3      	ldr	r3, [r6, #28]
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	f1b9 0300 	subs.w	r3, r9, #0
 80084b6:	bfbb      	ittet	lt
 80084b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80084bc:	9303      	strlt	r3, [sp, #12]
 80084be:	2300      	movge	r3, #0
 80084c0:	2201      	movlt	r2, #1
 80084c2:	bfac      	ite	ge
 80084c4:	6023      	strge	r3, [r4, #0]
 80084c6:	6022      	strlt	r2, [r4, #0]
 80084c8:	4b97      	ldr	r3, [pc, #604]	; (8008728 <_dtoa_r+0x2d0>)
 80084ca:	9c03      	ldr	r4, [sp, #12]
 80084cc:	43a3      	bics	r3, r4
 80084ce:	d11c      	bne.n	800850a <_dtoa_r+0xb2>
 80084d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80084dc:	ea53 0308 	orrs.w	r3, r3, r8
 80084e0:	f000 84fb 	beq.w	8008eda <_dtoa_r+0xa82>
 80084e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084e6:	b963      	cbnz	r3, 8008502 <_dtoa_r+0xaa>
 80084e8:	4b90      	ldr	r3, [pc, #576]	; (800872c <_dtoa_r+0x2d4>)
 80084ea:	e020      	b.n	800852e <_dtoa_r+0xd6>
 80084ec:	4b90      	ldr	r3, [pc, #576]	; (8008730 <_dtoa_r+0x2d8>)
 80084ee:	9301      	str	r3, [sp, #4]
 80084f0:	3308      	adds	r3, #8
 80084f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	9801      	ldr	r0, [sp, #4]
 80084f8:	b011      	add	sp, #68	; 0x44
 80084fa:	ecbd 8b02 	vpop	{d8}
 80084fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008502:	4b8a      	ldr	r3, [pc, #552]	; (800872c <_dtoa_r+0x2d4>)
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	3303      	adds	r3, #3
 8008508:	e7f3      	b.n	80084f2 <_dtoa_r+0x9a>
 800850a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800850e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008516:	d10c      	bne.n	8008532 <_dtoa_r+0xda>
 8008518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800851a:	2301      	movs	r3, #1
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 84d7 	beq.w	8008ed4 <_dtoa_r+0xa7c>
 8008526:	4b83      	ldr	r3, [pc, #524]	; (8008734 <_dtoa_r+0x2dc>)
 8008528:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	3b01      	subs	r3, #1
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	e7e1      	b.n	80084f6 <_dtoa_r+0x9e>
 8008532:	aa0e      	add	r2, sp, #56	; 0x38
 8008534:	a90f      	add	r1, sp, #60	; 0x3c
 8008536:	4630      	mov	r0, r6
 8008538:	eeb0 0b48 	vmov.f64	d0, d8
 800853c:	f001 f9d4 	bl	80098e8 <__d2b>
 8008540:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008546:	4605      	mov	r5, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d046      	beq.n	80085da <_dtoa_r+0x182>
 800854c:	eeb0 7b48 	vmov.f64	d7, d8
 8008550:	ee18 1a90 	vmov	r1, s17
 8008554:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008558:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800855c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008560:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008564:	2000      	movs	r0, #0
 8008566:	ee07 1a90 	vmov	s15, r1
 800856a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800856e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008708 <_dtoa_r+0x2b0>
 8008572:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008576:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008710 <_dtoa_r+0x2b8>
 800857a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800857e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8008718 <_dtoa_r+0x2c0>
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800858a:	eeb0 7b46 	vmov.f64	d7, d6
 800858e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008592:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008596:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859e:	ee16 ba90 	vmov	fp, s13
 80085a2:	9009      	str	r0, [sp, #36]	; 0x24
 80085a4:	d508      	bpl.n	80085b8 <_dtoa_r+0x160>
 80085a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80085aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80085ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b2:	bf18      	it	ne
 80085b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80085b8:	f1bb 0f16 	cmp.w	fp, #22
 80085bc:	d82b      	bhi.n	8008616 <_dtoa_r+0x1be>
 80085be:	495e      	ldr	r1, [pc, #376]	; (8008738 <_dtoa_r+0x2e0>)
 80085c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80085c4:	ed91 7b00 	vldr	d7, [r1]
 80085c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80085cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d0:	d501      	bpl.n	80085d6 <_dtoa_r+0x17e>
 80085d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085d6:	2100      	movs	r1, #0
 80085d8:	e01e      	b.n	8008618 <_dtoa_r+0x1c0>
 80085da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085dc:	4413      	add	r3, r2
 80085de:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80085e2:	2920      	cmp	r1, #32
 80085e4:	bfc1      	itttt	gt
 80085e6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80085ea:	408c      	lslgt	r4, r1
 80085ec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80085f0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80085f4:	bfd6      	itet	le
 80085f6:	f1c1 0120 	rsble	r1, r1, #32
 80085fa:	4321      	orrgt	r1, r4
 80085fc:	fa08 f101 	lslle.w	r1, r8, r1
 8008600:	ee07 1a90 	vmov	s15, r1
 8008604:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008608:	3b01      	subs	r3, #1
 800860a:	ee17 1a90 	vmov	r1, s15
 800860e:	2001      	movs	r0, #1
 8008610:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008614:	e7a7      	b.n	8008566 <_dtoa_r+0x10e>
 8008616:	2101      	movs	r1, #1
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	1e53      	subs	r3, r2, #1
 800861c:	9305      	str	r3, [sp, #20]
 800861e:	bf45      	ittet	mi
 8008620:	f1c2 0301 	rsbmi	r3, r2, #1
 8008624:	9304      	strmi	r3, [sp, #16]
 8008626:	2300      	movpl	r3, #0
 8008628:	2300      	movmi	r3, #0
 800862a:	bf4c      	ite	mi
 800862c:	9305      	strmi	r3, [sp, #20]
 800862e:	9304      	strpl	r3, [sp, #16]
 8008630:	f1bb 0f00 	cmp.w	fp, #0
 8008634:	910b      	str	r1, [sp, #44]	; 0x2c
 8008636:	db18      	blt.n	800866a <_dtoa_r+0x212>
 8008638:	9b05      	ldr	r3, [sp, #20]
 800863a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800863e:	445b      	add	r3, fp
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	2300      	movs	r3, #0
 8008644:	9a06      	ldr	r2, [sp, #24]
 8008646:	2a09      	cmp	r2, #9
 8008648:	d848      	bhi.n	80086dc <_dtoa_r+0x284>
 800864a:	2a05      	cmp	r2, #5
 800864c:	bfc4      	itt	gt
 800864e:	3a04      	subgt	r2, #4
 8008650:	9206      	strgt	r2, [sp, #24]
 8008652:	9a06      	ldr	r2, [sp, #24]
 8008654:	f1a2 0202 	sub.w	r2, r2, #2
 8008658:	bfcc      	ite	gt
 800865a:	2400      	movgt	r4, #0
 800865c:	2401      	movle	r4, #1
 800865e:	2a03      	cmp	r2, #3
 8008660:	d847      	bhi.n	80086f2 <_dtoa_r+0x29a>
 8008662:	e8df f002 	tbb	[pc, r2]
 8008666:	2d0b      	.short	0x2d0b
 8008668:	392b      	.short	0x392b
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	2200      	movs	r2, #0
 800866e:	eba3 030b 	sub.w	r3, r3, fp
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	920a      	str	r2, [sp, #40]	; 0x28
 8008676:	f1cb 0300 	rsb	r3, fp, #0
 800867a:	e7e3      	b.n	8008644 <_dtoa_r+0x1ec>
 800867c:	2200      	movs	r2, #0
 800867e:	9207      	str	r2, [sp, #28]
 8008680:	9a08      	ldr	r2, [sp, #32]
 8008682:	2a00      	cmp	r2, #0
 8008684:	dc38      	bgt.n	80086f8 <_dtoa_r+0x2a0>
 8008686:	f04f 0a01 	mov.w	sl, #1
 800868a:	46d1      	mov	r9, sl
 800868c:	4652      	mov	r2, sl
 800868e:	f8cd a020 	str.w	sl, [sp, #32]
 8008692:	69f7      	ldr	r7, [r6, #28]
 8008694:	2100      	movs	r1, #0
 8008696:	2004      	movs	r0, #4
 8008698:	f100 0c14 	add.w	ip, r0, #20
 800869c:	4594      	cmp	ip, r2
 800869e:	d930      	bls.n	8008702 <_dtoa_r+0x2aa>
 80086a0:	6079      	str	r1, [r7, #4]
 80086a2:	4630      	mov	r0, r6
 80086a4:	930d      	str	r3, [sp, #52]	; 0x34
 80086a6:	f000 fd43 	bl	8009130 <_Balloc>
 80086aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ac:	9001      	str	r0, [sp, #4]
 80086ae:	4602      	mov	r2, r0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	d145      	bne.n	8008740 <_dtoa_r+0x2e8>
 80086b4:	4b21      	ldr	r3, [pc, #132]	; (800873c <_dtoa_r+0x2e4>)
 80086b6:	f240 11af 	movw	r1, #431	; 0x1af
 80086ba:	e6e5      	b.n	8008488 <_dtoa_r+0x30>
 80086bc:	2201      	movs	r2, #1
 80086be:	e7de      	b.n	800867e <_dtoa_r+0x226>
 80086c0:	2200      	movs	r2, #0
 80086c2:	9207      	str	r2, [sp, #28]
 80086c4:	9a08      	ldr	r2, [sp, #32]
 80086c6:	eb0b 0a02 	add.w	sl, fp, r2
 80086ca:	f10a 0901 	add.w	r9, sl, #1
 80086ce:	464a      	mov	r2, r9
 80086d0:	2a01      	cmp	r2, #1
 80086d2:	bfb8      	it	lt
 80086d4:	2201      	movlt	r2, #1
 80086d6:	e7dc      	b.n	8008692 <_dtoa_r+0x23a>
 80086d8:	2201      	movs	r2, #1
 80086da:	e7f2      	b.n	80086c2 <_dtoa_r+0x26a>
 80086dc:	2401      	movs	r4, #1
 80086de:	2200      	movs	r2, #0
 80086e0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80086e4:	f04f 3aff 	mov.w	sl, #4294967295
 80086e8:	2100      	movs	r1, #0
 80086ea:	46d1      	mov	r9, sl
 80086ec:	2212      	movs	r2, #18
 80086ee:	9108      	str	r1, [sp, #32]
 80086f0:	e7cf      	b.n	8008692 <_dtoa_r+0x23a>
 80086f2:	2201      	movs	r2, #1
 80086f4:	9207      	str	r2, [sp, #28]
 80086f6:	e7f5      	b.n	80086e4 <_dtoa_r+0x28c>
 80086f8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086fc:	46d1      	mov	r9, sl
 80086fe:	4652      	mov	r2, sl
 8008700:	e7c7      	b.n	8008692 <_dtoa_r+0x23a>
 8008702:	3101      	adds	r1, #1
 8008704:	0040      	lsls	r0, r0, #1
 8008706:	e7c7      	b.n	8008698 <_dtoa_r+0x240>
 8008708:	636f4361 	.word	0x636f4361
 800870c:	3fd287a7 	.word	0x3fd287a7
 8008710:	8b60c8b3 	.word	0x8b60c8b3
 8008714:	3fc68a28 	.word	0x3fc68a28
 8008718:	509f79fb 	.word	0x509f79fb
 800871c:	3fd34413 	.word	0x3fd34413
 8008720:	0800bc56 	.word	0x0800bc56
 8008724:	0800bc6d 	.word	0x0800bc6d
 8008728:	7ff00000 	.word	0x7ff00000
 800872c:	0800bc52 	.word	0x0800bc52
 8008730:	0800bc49 	.word	0x0800bc49
 8008734:	0800bc21 	.word	0x0800bc21
 8008738:	0800bd58 	.word	0x0800bd58
 800873c:	0800bcc5 	.word	0x0800bcc5
 8008740:	69f2      	ldr	r2, [r6, #28]
 8008742:	9901      	ldr	r1, [sp, #4]
 8008744:	6011      	str	r1, [r2, #0]
 8008746:	f1b9 0f0e 	cmp.w	r9, #14
 800874a:	d86c      	bhi.n	8008826 <_dtoa_r+0x3ce>
 800874c:	2c00      	cmp	r4, #0
 800874e:	d06a      	beq.n	8008826 <_dtoa_r+0x3ce>
 8008750:	f1bb 0f00 	cmp.w	fp, #0
 8008754:	f340 80a0 	ble.w	8008898 <_dtoa_r+0x440>
 8008758:	4ac1      	ldr	r2, [pc, #772]	; (8008a60 <_dtoa_r+0x608>)
 800875a:	f00b 010f 	and.w	r1, fp, #15
 800875e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008762:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008766:	ed92 7b00 	vldr	d7, [r2]
 800876a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800876e:	f000 8087 	beq.w	8008880 <_dtoa_r+0x428>
 8008772:	49bc      	ldr	r1, [pc, #752]	; (8008a64 <_dtoa_r+0x60c>)
 8008774:	ed91 6b08 	vldr	d6, [r1, #32]
 8008778:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800877c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008780:	f002 020f 	and.w	r2, r2, #15
 8008784:	2103      	movs	r1, #3
 8008786:	48b7      	ldr	r0, [pc, #732]	; (8008a64 <_dtoa_r+0x60c>)
 8008788:	2a00      	cmp	r2, #0
 800878a:	d17b      	bne.n	8008884 <_dtoa_r+0x42c>
 800878c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008790:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008794:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800879a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800879e:	2a00      	cmp	r2, #0
 80087a0:	f000 80a0 	beq.w	80088e4 <_dtoa_r+0x48c>
 80087a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80087a8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80087ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b0:	f140 8098 	bpl.w	80088e4 <_dtoa_r+0x48c>
 80087b4:	f1b9 0f00 	cmp.w	r9, #0
 80087b8:	f000 8094 	beq.w	80088e4 <_dtoa_r+0x48c>
 80087bc:	f1ba 0f00 	cmp.w	sl, #0
 80087c0:	dd2f      	ble.n	8008822 <_dtoa_r+0x3ca>
 80087c2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80087c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 80087ce:	f10b 32ff 	add.w	r2, fp, #4294967295
 80087d2:	3101      	adds	r1, #1
 80087d4:	4654      	mov	r4, sl
 80087d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80087da:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80087de:	ee07 1a90 	vmov	s15, r1
 80087e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087e6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80087ea:	ee15 7a90 	vmov	r7, s11
 80087ee:	ec51 0b15 	vmov	r0, r1, d5
 80087f2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80087f6:	2c00      	cmp	r4, #0
 80087f8:	d177      	bne.n	80088ea <_dtoa_r+0x492>
 80087fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80087fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008802:	ec41 0b17 	vmov	d7, r0, r1
 8008806:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800880a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880e:	f300 826a 	bgt.w	8008ce6 <_dtoa_r+0x88e>
 8008812:	eeb1 7b47 	vneg.f64	d7, d7
 8008816:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800881a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881e:	f100 8260 	bmi.w	8008ce2 <_dtoa_r+0x88a>
 8008822:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008826:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008828:	2a00      	cmp	r2, #0
 800882a:	f2c0 811d 	blt.w	8008a68 <_dtoa_r+0x610>
 800882e:	f1bb 0f0e 	cmp.w	fp, #14
 8008832:	f300 8119 	bgt.w	8008a68 <_dtoa_r+0x610>
 8008836:	4b8a      	ldr	r3, [pc, #552]	; (8008a60 <_dtoa_r+0x608>)
 8008838:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800883c:	ed93 6b00 	vldr	d6, [r3]
 8008840:	9b08      	ldr	r3, [sp, #32]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f280 80b7 	bge.w	80089b6 <_dtoa_r+0x55e>
 8008848:	f1b9 0f00 	cmp.w	r9, #0
 800884c:	f300 80b3 	bgt.w	80089b6 <_dtoa_r+0x55e>
 8008850:	f040 8246 	bne.w	8008ce0 <_dtoa_r+0x888>
 8008854:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008858:	ee26 6b07 	vmul.f64	d6, d6, d7
 800885c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008860:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008868:	464c      	mov	r4, r9
 800886a:	464f      	mov	r7, r9
 800886c:	f280 821c 	bge.w	8008ca8 <_dtoa_r+0x850>
 8008870:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008874:	2331      	movs	r3, #49	; 0x31
 8008876:	f808 3b01 	strb.w	r3, [r8], #1
 800887a:	f10b 0b01 	add.w	fp, fp, #1
 800887e:	e218      	b.n	8008cb2 <_dtoa_r+0x85a>
 8008880:	2102      	movs	r1, #2
 8008882:	e780      	b.n	8008786 <_dtoa_r+0x32e>
 8008884:	07d4      	lsls	r4, r2, #31
 8008886:	d504      	bpl.n	8008892 <_dtoa_r+0x43a>
 8008888:	ed90 6b00 	vldr	d6, [r0]
 800888c:	3101      	adds	r1, #1
 800888e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008892:	1052      	asrs	r2, r2, #1
 8008894:	3008      	adds	r0, #8
 8008896:	e777      	b.n	8008788 <_dtoa_r+0x330>
 8008898:	d022      	beq.n	80088e0 <_dtoa_r+0x488>
 800889a:	f1cb 0200 	rsb	r2, fp, #0
 800889e:	4970      	ldr	r1, [pc, #448]	; (8008a60 <_dtoa_r+0x608>)
 80088a0:	f002 000f 	and.w	r0, r2, #15
 80088a4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80088a8:	ed91 7b00 	vldr	d7, [r1]
 80088ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80088b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088b4:	486b      	ldr	r0, [pc, #428]	; (8008a64 <_dtoa_r+0x60c>)
 80088b6:	1112      	asrs	r2, r2, #4
 80088b8:	2400      	movs	r4, #0
 80088ba:	2102      	movs	r1, #2
 80088bc:	b92a      	cbnz	r2, 80088ca <_dtoa_r+0x472>
 80088be:	2c00      	cmp	r4, #0
 80088c0:	f43f af6a 	beq.w	8008798 <_dtoa_r+0x340>
 80088c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80088c8:	e766      	b.n	8008798 <_dtoa_r+0x340>
 80088ca:	07d7      	lsls	r7, r2, #31
 80088cc:	d505      	bpl.n	80088da <_dtoa_r+0x482>
 80088ce:	ed90 6b00 	vldr	d6, [r0]
 80088d2:	3101      	adds	r1, #1
 80088d4:	2401      	movs	r4, #1
 80088d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80088da:	1052      	asrs	r2, r2, #1
 80088dc:	3008      	adds	r0, #8
 80088de:	e7ed      	b.n	80088bc <_dtoa_r+0x464>
 80088e0:	2102      	movs	r1, #2
 80088e2:	e759      	b.n	8008798 <_dtoa_r+0x340>
 80088e4:	465a      	mov	r2, fp
 80088e6:	464c      	mov	r4, r9
 80088e8:	e775      	b.n	80087d6 <_dtoa_r+0x37e>
 80088ea:	ec41 0b17 	vmov	d7, r0, r1
 80088ee:	495c      	ldr	r1, [pc, #368]	; (8008a60 <_dtoa_r+0x608>)
 80088f0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80088f4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80088f8:	9901      	ldr	r1, [sp, #4]
 80088fa:	440c      	add	r4, r1
 80088fc:	9907      	ldr	r1, [sp, #28]
 80088fe:	b351      	cbz	r1, 8008956 <_dtoa_r+0x4fe>
 8008900:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008904:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008908:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800890c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008910:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008914:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008918:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800891c:	ee14 1a90 	vmov	r1, s9
 8008920:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008924:	3130      	adds	r1, #48	; 0x30
 8008926:	ee36 6b45 	vsub.f64	d6, d6, d5
 800892a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008932:	f808 1b01 	strb.w	r1, [r8], #1
 8008936:	d439      	bmi.n	80089ac <_dtoa_r+0x554>
 8008938:	ee32 5b46 	vsub.f64	d5, d2, d6
 800893c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008944:	d472      	bmi.n	8008a2c <_dtoa_r+0x5d4>
 8008946:	45a0      	cmp	r8, r4
 8008948:	f43f af6b 	beq.w	8008822 <_dtoa_r+0x3ca>
 800894c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008950:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008954:	e7e0      	b.n	8008918 <_dtoa_r+0x4c0>
 8008956:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800895a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800895e:	4620      	mov	r0, r4
 8008960:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008964:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008968:	ee14 1a90 	vmov	r1, s9
 800896c:	3130      	adds	r1, #48	; 0x30
 800896e:	f808 1b01 	strb.w	r1, [r8], #1
 8008972:	45a0      	cmp	r8, r4
 8008974:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008978:	ee36 6b45 	vsub.f64	d6, d6, d5
 800897c:	d118      	bne.n	80089b0 <_dtoa_r+0x558>
 800897e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008982:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008986:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	dc4d      	bgt.n	8008a2c <_dtoa_r+0x5d4>
 8008990:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008994:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899c:	f57f af41 	bpl.w	8008822 <_dtoa_r+0x3ca>
 80089a0:	4680      	mov	r8, r0
 80089a2:	3801      	subs	r0, #1
 80089a4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80089a8:	2b30      	cmp	r3, #48	; 0x30
 80089aa:	d0f9      	beq.n	80089a0 <_dtoa_r+0x548>
 80089ac:	4693      	mov	fp, r2
 80089ae:	e02a      	b.n	8008a06 <_dtoa_r+0x5ae>
 80089b0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80089b4:	e7d6      	b.n	8008964 <_dtoa_r+0x50c>
 80089b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80089ba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80089be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80089c2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80089c6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80089ca:	ee15 3a10 	vmov	r3, s10
 80089ce:	3330      	adds	r3, #48	; 0x30
 80089d0:	f808 3b01 	strb.w	r3, [r8], #1
 80089d4:	9b01      	ldr	r3, [sp, #4]
 80089d6:	eba8 0303 	sub.w	r3, r8, r3
 80089da:	4599      	cmp	r9, r3
 80089dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80089e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80089e4:	d133      	bne.n	8008a4e <_dtoa_r+0x5f6>
 80089e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80089ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80089ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f2:	dc1a      	bgt.n	8008a2a <_dtoa_r+0x5d2>
 80089f4:	eeb4 7b46 	vcmp.f64	d7, d6
 80089f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fc:	d103      	bne.n	8008a06 <_dtoa_r+0x5ae>
 80089fe:	ee15 3a10 	vmov	r3, s10
 8008a02:	07d9      	lsls	r1, r3, #31
 8008a04:	d411      	bmi.n	8008a2a <_dtoa_r+0x5d2>
 8008a06:	4629      	mov	r1, r5
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 fbd1 	bl	80091b0 <_Bfree>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a12:	f888 3000 	strb.w	r3, [r8]
 8008a16:	f10b 0301 	add.w	r3, fp, #1
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f43f ad69 	beq.w	80084f6 <_dtoa_r+0x9e>
 8008a24:	f8c3 8000 	str.w	r8, [r3]
 8008a28:	e565      	b.n	80084f6 <_dtoa_r+0x9e>
 8008a2a:	465a      	mov	r2, fp
 8008a2c:	4643      	mov	r3, r8
 8008a2e:	4698      	mov	r8, r3
 8008a30:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008a34:	2939      	cmp	r1, #57	; 0x39
 8008a36:	d106      	bne.n	8008a46 <_dtoa_r+0x5ee>
 8008a38:	9901      	ldr	r1, [sp, #4]
 8008a3a:	4299      	cmp	r1, r3
 8008a3c:	d1f7      	bne.n	8008a2e <_dtoa_r+0x5d6>
 8008a3e:	9801      	ldr	r0, [sp, #4]
 8008a40:	2130      	movs	r1, #48	; 0x30
 8008a42:	3201      	adds	r2, #1
 8008a44:	7001      	strb	r1, [r0, #0]
 8008a46:	7819      	ldrb	r1, [r3, #0]
 8008a48:	3101      	adds	r1, #1
 8008a4a:	7019      	strb	r1, [r3, #0]
 8008a4c:	e7ae      	b.n	80089ac <_dtoa_r+0x554>
 8008a4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5a:	d1b2      	bne.n	80089c2 <_dtoa_r+0x56a>
 8008a5c:	e7d3      	b.n	8008a06 <_dtoa_r+0x5ae>
 8008a5e:	bf00      	nop
 8008a60:	0800bd58 	.word	0x0800bd58
 8008a64:	0800bd30 	.word	0x0800bd30
 8008a68:	9907      	ldr	r1, [sp, #28]
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	f000 80d0 	beq.w	8008c10 <_dtoa_r+0x7b8>
 8008a70:	9906      	ldr	r1, [sp, #24]
 8008a72:	2901      	cmp	r1, #1
 8008a74:	f300 80b4 	bgt.w	8008be0 <_dtoa_r+0x788>
 8008a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a7a:	2900      	cmp	r1, #0
 8008a7c:	f000 80ac 	beq.w	8008bd8 <_dtoa_r+0x780>
 8008a80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008a88:	461c      	mov	r4, r3
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	4413      	add	r3, r2
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	9b05      	ldr	r3, [sp, #20]
 8008a94:	2101      	movs	r1, #1
 8008a96:	4413      	add	r3, r2
 8008a98:	4630      	mov	r0, r6
 8008a9a:	9305      	str	r3, [sp, #20]
 8008a9c:	f000 fc88 	bl	80093b0 <__i2b>
 8008aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa2:	4607      	mov	r7, r0
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	d00d      	beq.n	8008ac6 <_dtoa_r+0x66e>
 8008aaa:	9a05      	ldr	r2, [sp, #20]
 8008aac:	2a00      	cmp	r2, #0
 8008aae:	dd0a      	ble.n	8008ac6 <_dtoa_r+0x66e>
 8008ab0:	4542      	cmp	r2, r8
 8008ab2:	9904      	ldr	r1, [sp, #16]
 8008ab4:	bfa8      	it	ge
 8008ab6:	4642      	movge	r2, r8
 8008ab8:	1a89      	subs	r1, r1, r2
 8008aba:	9104      	str	r1, [sp, #16]
 8008abc:	9905      	ldr	r1, [sp, #20]
 8008abe:	eba8 0802 	sub.w	r8, r8, r2
 8008ac2:	1a8a      	subs	r2, r1, r2
 8008ac4:	9205      	str	r2, [sp, #20]
 8008ac6:	b303      	cbz	r3, 8008b0a <_dtoa_r+0x6b2>
 8008ac8:	9a07      	ldr	r2, [sp, #28]
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 80a5 	beq.w	8008c1a <_dtoa_r+0x7c2>
 8008ad0:	2c00      	cmp	r4, #0
 8008ad2:	dd13      	ble.n	8008afc <_dtoa_r+0x6a4>
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	4622      	mov	r2, r4
 8008ad8:	4630      	mov	r0, r6
 8008ada:	930d      	str	r3, [sp, #52]	; 0x34
 8008adc:	f000 fd28 	bl	8009530 <__pow5mult>
 8008ae0:	462a      	mov	r2, r5
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f000 fc78 	bl	80093dc <__multiply>
 8008aec:	4629      	mov	r1, r5
 8008aee:	9009      	str	r0, [sp, #36]	; 0x24
 8008af0:	4630      	mov	r0, r6
 8008af2:	f000 fb5d 	bl	80091b0 <_Bfree>
 8008af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008afa:	4615      	mov	r5, r2
 8008afc:	1b1a      	subs	r2, r3, r4
 8008afe:	d004      	beq.n	8008b0a <_dtoa_r+0x6b2>
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 fd14 	bl	8009530 <__pow5mult>
 8008b08:	4605      	mov	r5, r0
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f000 fc4f 	bl	80093b0 <__i2b>
 8008b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	f340 8081 	ble.w	8008c1e <_dtoa_r+0x7c6>
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	4601      	mov	r1, r0
 8008b20:	4630      	mov	r0, r6
 8008b22:	f000 fd05 	bl	8009530 <__pow5mult>
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	dd7a      	ble.n	8008c24 <_dtoa_r+0x7cc>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	9309      	str	r3, [sp, #36]	; 0x24
 8008b32:	6922      	ldr	r2, [r4, #16]
 8008b34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b38:	6910      	ldr	r0, [r2, #16]
 8008b3a:	f000 fbeb 	bl	8009314 <__hi0bits>
 8008b3e:	f1c0 0020 	rsb	r0, r0, #32
 8008b42:	9b05      	ldr	r3, [sp, #20]
 8008b44:	4418      	add	r0, r3
 8008b46:	f010 001f 	ands.w	r0, r0, #31
 8008b4a:	f000 8093 	beq.w	8008c74 <_dtoa_r+0x81c>
 8008b4e:	f1c0 0220 	rsb	r2, r0, #32
 8008b52:	2a04      	cmp	r2, #4
 8008b54:	f340 8085 	ble.w	8008c62 <_dtoa_r+0x80a>
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	f1c0 001c 	rsb	r0, r0, #28
 8008b5e:	4403      	add	r3, r0
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	4480      	add	r8, r0
 8008b66:	4403      	add	r3, r0
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd05      	ble.n	8008b7c <_dtoa_r+0x724>
 8008b70:	4629      	mov	r1, r5
 8008b72:	461a      	mov	r2, r3
 8008b74:	4630      	mov	r0, r6
 8008b76:	f000 fd35 	bl	80095e4 <__lshift>
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	9b05      	ldr	r3, [sp, #20]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dd05      	ble.n	8008b8e <_dtoa_r+0x736>
 8008b82:	4621      	mov	r1, r4
 8008b84:	461a      	mov	r2, r3
 8008b86:	4630      	mov	r0, r6
 8008b88:	f000 fd2c 	bl	80095e4 <__lshift>
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d071      	beq.n	8008c78 <_dtoa_r+0x820>
 8008b94:	4621      	mov	r1, r4
 8008b96:	4628      	mov	r0, r5
 8008b98:	f000 fd90 	bl	80096bc <__mcmp>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	da6b      	bge.n	8008c78 <_dtoa_r+0x820>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	220a      	movs	r2, #10
 8008ba6:	4630      	mov	r0, r6
 8008ba8:	f000 fb24 	bl	80091f4 <__multadd>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	f000 8197 	beq.w	8008ee8 <_dtoa_r+0xa90>
 8008bba:	4639      	mov	r1, r7
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	220a      	movs	r2, #10
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 fb17 	bl	80091f4 <__multadd>
 8008bc6:	f1ba 0f00 	cmp.w	sl, #0
 8008bca:	4607      	mov	r7, r0
 8008bcc:	f300 8093 	bgt.w	8008cf6 <_dtoa_r+0x89e>
 8008bd0:	9b06      	ldr	r3, [sp, #24]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	dc57      	bgt.n	8008c86 <_dtoa_r+0x82e>
 8008bd6:	e08e      	b.n	8008cf6 <_dtoa_r+0x89e>
 8008bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008bde:	e751      	b.n	8008a84 <_dtoa_r+0x62c>
 8008be0:	f109 34ff 	add.w	r4, r9, #4294967295
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	bfbf      	itttt	lt
 8008be8:	1ae2      	sublt	r2, r4, r3
 8008bea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bec:	189b      	addlt	r3, r3, r2
 8008bee:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bf0:	bfae      	itee	ge
 8008bf2:	1b1c      	subge	r4, r3, r4
 8008bf4:	4623      	movlt	r3, r4
 8008bf6:	2400      	movlt	r4, #0
 8008bf8:	f1b9 0f00 	cmp.w	r9, #0
 8008bfc:	bfb5      	itete	lt
 8008bfe:	9a04      	ldrlt	r2, [sp, #16]
 8008c00:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008c04:	eba2 0809 	sublt.w	r8, r2, r9
 8008c08:	464a      	movge	r2, r9
 8008c0a:	bfb8      	it	lt
 8008c0c:	2200      	movlt	r2, #0
 8008c0e:	e73c      	b.n	8008a8a <_dtoa_r+0x632>
 8008c10:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008c14:	9f07      	ldr	r7, [sp, #28]
 8008c16:	461c      	mov	r4, r3
 8008c18:	e744      	b.n	8008aa4 <_dtoa_r+0x64c>
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	e770      	b.n	8008b00 <_dtoa_r+0x6a8>
 8008c1e:	9b06      	ldr	r3, [sp, #24]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	dc18      	bgt.n	8008c56 <_dtoa_r+0x7fe>
 8008c24:	9b02      	ldr	r3, [sp, #8]
 8008c26:	b9b3      	cbnz	r3, 8008c56 <_dtoa_r+0x7fe>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008c2e:	b9a2      	cbnz	r2, 8008c5a <_dtoa_r+0x802>
 8008c30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008c34:	0d12      	lsrs	r2, r2, #20
 8008c36:	0512      	lsls	r2, r2, #20
 8008c38:	b18a      	cbz	r2, 8008c5e <_dtoa_r+0x806>
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	9304      	str	r3, [sp, #16]
 8008c40:	9b05      	ldr	r3, [sp, #20]
 8008c42:	3301      	adds	r3, #1
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	2301      	movs	r3, #1
 8008c48:	9309      	str	r3, [sp, #36]	; 0x24
 8008c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f47f af70 	bne.w	8008b32 <_dtoa_r+0x6da>
 8008c52:	2001      	movs	r0, #1
 8008c54:	e775      	b.n	8008b42 <_dtoa_r+0x6ea>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e7f6      	b.n	8008c48 <_dtoa_r+0x7f0>
 8008c5a:	9b02      	ldr	r3, [sp, #8]
 8008c5c:	e7f4      	b.n	8008c48 <_dtoa_r+0x7f0>
 8008c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c60:	e7f3      	b.n	8008c4a <_dtoa_r+0x7f2>
 8008c62:	d082      	beq.n	8008b6a <_dtoa_r+0x712>
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	321c      	adds	r2, #28
 8008c68:	4413      	add	r3, r2
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	9b05      	ldr	r3, [sp, #20]
 8008c6e:	4490      	add	r8, r2
 8008c70:	4413      	add	r3, r2
 8008c72:	e779      	b.n	8008b68 <_dtoa_r+0x710>
 8008c74:	4602      	mov	r2, r0
 8008c76:	e7f5      	b.n	8008c64 <_dtoa_r+0x80c>
 8008c78:	f1b9 0f00 	cmp.w	r9, #0
 8008c7c:	dc36      	bgt.n	8008cec <_dtoa_r+0x894>
 8008c7e:	9b06      	ldr	r3, [sp, #24]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	dd33      	ble.n	8008cec <_dtoa_r+0x894>
 8008c84:	46ca      	mov	sl, r9
 8008c86:	f1ba 0f00 	cmp.w	sl, #0
 8008c8a:	d10d      	bne.n	8008ca8 <_dtoa_r+0x850>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	4653      	mov	r3, sl
 8008c90:	2205      	movs	r2, #5
 8008c92:	4630      	mov	r0, r6
 8008c94:	f000 faae 	bl	80091f4 <__multadd>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f000 fd0d 	bl	80096bc <__mcmp>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f73f ade4 	bgt.w	8008870 <_dtoa_r+0x418>
 8008ca8:	9b08      	ldr	r3, [sp, #32]
 8008caa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008cae:	ea6f 0b03 	mvn.w	fp, r3
 8008cb2:	f04f 0900 	mov.w	r9, #0
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 fa79 	bl	80091b0 <_Bfree>
 8008cbe:	2f00      	cmp	r7, #0
 8008cc0:	f43f aea1 	beq.w	8008a06 <_dtoa_r+0x5ae>
 8008cc4:	f1b9 0f00 	cmp.w	r9, #0
 8008cc8:	d005      	beq.n	8008cd6 <_dtoa_r+0x87e>
 8008cca:	45b9      	cmp	r9, r7
 8008ccc:	d003      	beq.n	8008cd6 <_dtoa_r+0x87e>
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	f000 fa6d 	bl	80091b0 <_Bfree>
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 fa69 	bl	80091b0 <_Bfree>
 8008cde:	e692      	b.n	8008a06 <_dtoa_r+0x5ae>
 8008ce0:	2400      	movs	r4, #0
 8008ce2:	4627      	mov	r7, r4
 8008ce4:	e7e0      	b.n	8008ca8 <_dtoa_r+0x850>
 8008ce6:	4693      	mov	fp, r2
 8008ce8:	4627      	mov	r7, r4
 8008cea:	e5c1      	b.n	8008870 <_dtoa_r+0x418>
 8008cec:	9b07      	ldr	r3, [sp, #28]
 8008cee:	46ca      	mov	sl, r9
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8100 	beq.w	8008ef6 <_dtoa_r+0xa9e>
 8008cf6:	f1b8 0f00 	cmp.w	r8, #0
 8008cfa:	dd05      	ble.n	8008d08 <_dtoa_r+0x8b0>
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4642      	mov	r2, r8
 8008d00:	4630      	mov	r0, r6
 8008d02:	f000 fc6f 	bl	80095e4 <__lshift>
 8008d06:	4607      	mov	r7, r0
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d05d      	beq.n	8008dca <_dtoa_r+0x972>
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4630      	mov	r0, r6
 8008d12:	f000 fa0d 	bl	8009130 <_Balloc>
 8008d16:	4680      	mov	r8, r0
 8008d18:	b928      	cbnz	r0, 8008d26 <_dtoa_r+0x8ce>
 8008d1a:	4b82      	ldr	r3, [pc, #520]	; (8008f24 <_dtoa_r+0xacc>)
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d22:	f7ff bbb1 	b.w	8008488 <_dtoa_r+0x30>
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	3202      	adds	r2, #2
 8008d2a:	0092      	lsls	r2, r2, #2
 8008d2c:	f107 010c 	add.w	r1, r7, #12
 8008d30:	300c      	adds	r0, #12
 8008d32:	f001 ff3f 	bl	800abb4 <memcpy>
 8008d36:	2201      	movs	r2, #1
 8008d38:	4641      	mov	r1, r8
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 fc52 	bl	80095e4 <__lshift>
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	3301      	adds	r3, #1
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	4453      	add	r3, sl
 8008d4a:	9308      	str	r3, [sp, #32]
 8008d4c:	9b02      	ldr	r3, [sp, #8]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	46b9      	mov	r9, r7
 8008d54:	9307      	str	r3, [sp, #28]
 8008d56:	4607      	mov	r7, r0
 8008d58:	9b04      	ldr	r3, [sp, #16]
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	4628      	mov	r0, r5
 8008d60:	9302      	str	r3, [sp, #8]
 8008d62:	f7ff faef 	bl	8008344 <quorem>
 8008d66:	4603      	mov	r3, r0
 8008d68:	3330      	adds	r3, #48	; 0x30
 8008d6a:	9005      	str	r0, [sp, #20]
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	4628      	mov	r0, r5
 8008d70:	9309      	str	r3, [sp, #36]	; 0x24
 8008d72:	f000 fca3 	bl	80096bc <__mcmp>
 8008d76:	463a      	mov	r2, r7
 8008d78:	4682      	mov	sl, r0
 8008d7a:	4621      	mov	r1, r4
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 fcb9 	bl	80096f4 <__mdiff>
 8008d82:	68c2      	ldr	r2, [r0, #12]
 8008d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d86:	4680      	mov	r8, r0
 8008d88:	bb0a      	cbnz	r2, 8008dce <_dtoa_r+0x976>
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 fc95 	bl	80096bc <__mcmp>
 8008d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d94:	4602      	mov	r2, r0
 8008d96:	4641      	mov	r1, r8
 8008d98:	4630      	mov	r0, r6
 8008d9a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008d9e:	f000 fa07 	bl	80091b0 <_Bfree>
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008da6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008daa:	ea43 0102 	orr.w	r1, r3, r2
 8008dae:	9b07      	ldr	r3, [sp, #28]
 8008db0:	4319      	orrs	r1, r3
 8008db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db4:	d10d      	bne.n	8008dd2 <_dtoa_r+0x97a>
 8008db6:	2b39      	cmp	r3, #57	; 0x39
 8008db8:	d029      	beq.n	8008e0e <_dtoa_r+0x9b6>
 8008dba:	f1ba 0f00 	cmp.w	sl, #0
 8008dbe:	dd01      	ble.n	8008dc4 <_dtoa_r+0x96c>
 8008dc0:	9b05      	ldr	r3, [sp, #20]
 8008dc2:	3331      	adds	r3, #49	; 0x31
 8008dc4:	9a02      	ldr	r2, [sp, #8]
 8008dc6:	7013      	strb	r3, [r2, #0]
 8008dc8:	e775      	b.n	8008cb6 <_dtoa_r+0x85e>
 8008dca:	4638      	mov	r0, r7
 8008dcc:	e7b8      	b.n	8008d40 <_dtoa_r+0x8e8>
 8008dce:	2201      	movs	r2, #1
 8008dd0:	e7e1      	b.n	8008d96 <_dtoa_r+0x93e>
 8008dd2:	f1ba 0f00 	cmp.w	sl, #0
 8008dd6:	db06      	blt.n	8008de6 <_dtoa_r+0x98e>
 8008dd8:	9906      	ldr	r1, [sp, #24]
 8008dda:	ea41 0a0a 	orr.w	sl, r1, sl
 8008dde:	9907      	ldr	r1, [sp, #28]
 8008de0:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008de4:	d120      	bne.n	8008e28 <_dtoa_r+0x9d0>
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	ddec      	ble.n	8008dc4 <_dtoa_r+0x96c>
 8008dea:	4629      	mov	r1, r5
 8008dec:	2201      	movs	r2, #1
 8008dee:	4630      	mov	r0, r6
 8008df0:	9304      	str	r3, [sp, #16]
 8008df2:	f000 fbf7 	bl	80095e4 <__lshift>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4605      	mov	r5, r0
 8008dfa:	f000 fc5f 	bl	80096bc <__mcmp>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	dc02      	bgt.n	8008e0a <_dtoa_r+0x9b2>
 8008e04:	d1de      	bne.n	8008dc4 <_dtoa_r+0x96c>
 8008e06:	07da      	lsls	r2, r3, #31
 8008e08:	d5dc      	bpl.n	8008dc4 <_dtoa_r+0x96c>
 8008e0a:	2b39      	cmp	r3, #57	; 0x39
 8008e0c:	d1d8      	bne.n	8008dc0 <_dtoa_r+0x968>
 8008e0e:	9a02      	ldr	r2, [sp, #8]
 8008e10:	2339      	movs	r3, #57	; 0x39
 8008e12:	7013      	strb	r3, [r2, #0]
 8008e14:	4643      	mov	r3, r8
 8008e16:	4698      	mov	r8, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008e1e:	2a39      	cmp	r2, #57	; 0x39
 8008e20:	d051      	beq.n	8008ec6 <_dtoa_r+0xa6e>
 8008e22:	3201      	adds	r2, #1
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	e746      	b.n	8008cb6 <_dtoa_r+0x85e>
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	dd03      	ble.n	8008e34 <_dtoa_r+0x9dc>
 8008e2c:	2b39      	cmp	r3, #57	; 0x39
 8008e2e:	d0ee      	beq.n	8008e0e <_dtoa_r+0x9b6>
 8008e30:	3301      	adds	r3, #1
 8008e32:	e7c7      	b.n	8008dc4 <_dtoa_r+0x96c>
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	9908      	ldr	r1, [sp, #32]
 8008e38:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e3c:	428a      	cmp	r2, r1
 8008e3e:	d02b      	beq.n	8008e98 <_dtoa_r+0xa40>
 8008e40:	4629      	mov	r1, r5
 8008e42:	2300      	movs	r3, #0
 8008e44:	220a      	movs	r2, #10
 8008e46:	4630      	mov	r0, r6
 8008e48:	f000 f9d4 	bl	80091f4 <__multadd>
 8008e4c:	45b9      	cmp	r9, r7
 8008e4e:	4605      	mov	r5, r0
 8008e50:	f04f 0300 	mov.w	r3, #0
 8008e54:	f04f 020a 	mov.w	r2, #10
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	d107      	bne.n	8008e6e <_dtoa_r+0xa16>
 8008e5e:	f000 f9c9 	bl	80091f4 <__multadd>
 8008e62:	4681      	mov	r9, r0
 8008e64:	4607      	mov	r7, r0
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	9304      	str	r3, [sp, #16]
 8008e6c:	e774      	b.n	8008d58 <_dtoa_r+0x900>
 8008e6e:	f000 f9c1 	bl	80091f4 <__multadd>
 8008e72:	4639      	mov	r1, r7
 8008e74:	4681      	mov	r9, r0
 8008e76:	2300      	movs	r3, #0
 8008e78:	220a      	movs	r2, #10
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f000 f9ba 	bl	80091f4 <__multadd>
 8008e80:	4607      	mov	r7, r0
 8008e82:	e7f0      	b.n	8008e66 <_dtoa_r+0xa0e>
 8008e84:	f1ba 0f00 	cmp.w	sl, #0
 8008e88:	9a01      	ldr	r2, [sp, #4]
 8008e8a:	bfcc      	ite	gt
 8008e8c:	46d0      	movgt	r8, sl
 8008e8e:	f04f 0801 	movle.w	r8, #1
 8008e92:	4490      	add	r8, r2
 8008e94:	f04f 0900 	mov.w	r9, #0
 8008e98:	4629      	mov	r1, r5
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	f000 fba0 	bl	80095e4 <__lshift>
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	f000 fc08 	bl	80096bc <__mcmp>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	dcb1      	bgt.n	8008e14 <_dtoa_r+0x9bc>
 8008eb0:	d102      	bne.n	8008eb8 <_dtoa_r+0xa60>
 8008eb2:	9b02      	ldr	r3, [sp, #8]
 8008eb4:	07db      	lsls	r3, r3, #31
 8008eb6:	d4ad      	bmi.n	8008e14 <_dtoa_r+0x9bc>
 8008eb8:	4643      	mov	r3, r8
 8008eba:	4698      	mov	r8, r3
 8008ebc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ec0:	2a30      	cmp	r2, #48	; 0x30
 8008ec2:	d0fa      	beq.n	8008eba <_dtoa_r+0xa62>
 8008ec4:	e6f7      	b.n	8008cb6 <_dtoa_r+0x85e>
 8008ec6:	9a01      	ldr	r2, [sp, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d1a4      	bne.n	8008e16 <_dtoa_r+0x9be>
 8008ecc:	f10b 0b01 	add.w	fp, fp, #1
 8008ed0:	2331      	movs	r3, #49	; 0x31
 8008ed2:	e778      	b.n	8008dc6 <_dtoa_r+0x96e>
 8008ed4:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <_dtoa_r+0xad0>)
 8008ed6:	f7ff bb2a 	b.w	800852e <_dtoa_r+0xd6>
 8008eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f47f ab05 	bne.w	80084ec <_dtoa_r+0x94>
 8008ee2:	4b12      	ldr	r3, [pc, #72]	; (8008f2c <_dtoa_r+0xad4>)
 8008ee4:	f7ff bb23 	b.w	800852e <_dtoa_r+0xd6>
 8008ee8:	f1ba 0f00 	cmp.w	sl, #0
 8008eec:	dc03      	bgt.n	8008ef6 <_dtoa_r+0xa9e>
 8008eee:	9b06      	ldr	r3, [sp, #24]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	f73f aec8 	bgt.w	8008c86 <_dtoa_r+0x82e>
 8008ef6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008efa:	4621      	mov	r1, r4
 8008efc:	4628      	mov	r0, r5
 8008efe:	f7ff fa21 	bl	8008344 <quorem>
 8008f02:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f06:	f808 3b01 	strb.w	r3, [r8], #1
 8008f0a:	9a01      	ldr	r2, [sp, #4]
 8008f0c:	eba8 0202 	sub.w	r2, r8, r2
 8008f10:	4592      	cmp	sl, r2
 8008f12:	ddb7      	ble.n	8008e84 <_dtoa_r+0xa2c>
 8008f14:	4629      	mov	r1, r5
 8008f16:	2300      	movs	r3, #0
 8008f18:	220a      	movs	r2, #10
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f000 f96a 	bl	80091f4 <__multadd>
 8008f20:	4605      	mov	r5, r0
 8008f22:	e7ea      	b.n	8008efa <_dtoa_r+0xaa2>
 8008f24:	0800bcc5 	.word	0x0800bcc5
 8008f28:	0800bc20 	.word	0x0800bc20
 8008f2c:	0800bc49 	.word	0x0800bc49

08008f30 <_free_r>:
 8008f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f32:	2900      	cmp	r1, #0
 8008f34:	d044      	beq.n	8008fc0 <_free_r+0x90>
 8008f36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f3a:	9001      	str	r0, [sp, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f42:	bfb8      	it	lt
 8008f44:	18e4      	addlt	r4, r4, r3
 8008f46:	f000 f8e7 	bl	8009118 <__malloc_lock>
 8008f4a:	4a1e      	ldr	r2, [pc, #120]	; (8008fc4 <_free_r+0x94>)
 8008f4c:	9801      	ldr	r0, [sp, #4]
 8008f4e:	6813      	ldr	r3, [r2, #0]
 8008f50:	b933      	cbnz	r3, 8008f60 <_free_r+0x30>
 8008f52:	6063      	str	r3, [r4, #4]
 8008f54:	6014      	str	r4, [r2, #0]
 8008f56:	b003      	add	sp, #12
 8008f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f5c:	f000 b8e2 	b.w	8009124 <__malloc_unlock>
 8008f60:	42a3      	cmp	r3, r4
 8008f62:	d908      	bls.n	8008f76 <_free_r+0x46>
 8008f64:	6825      	ldr	r5, [r4, #0]
 8008f66:	1961      	adds	r1, r4, r5
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	bf01      	itttt	eq
 8008f6c:	6819      	ldreq	r1, [r3, #0]
 8008f6e:	685b      	ldreq	r3, [r3, #4]
 8008f70:	1949      	addeq	r1, r1, r5
 8008f72:	6021      	streq	r1, [r4, #0]
 8008f74:	e7ed      	b.n	8008f52 <_free_r+0x22>
 8008f76:	461a      	mov	r2, r3
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	b10b      	cbz	r3, 8008f80 <_free_r+0x50>
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	d9fa      	bls.n	8008f76 <_free_r+0x46>
 8008f80:	6811      	ldr	r1, [r2, #0]
 8008f82:	1855      	adds	r5, r2, r1
 8008f84:	42a5      	cmp	r5, r4
 8008f86:	d10b      	bne.n	8008fa0 <_free_r+0x70>
 8008f88:	6824      	ldr	r4, [r4, #0]
 8008f8a:	4421      	add	r1, r4
 8008f8c:	1854      	adds	r4, r2, r1
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	6011      	str	r1, [r2, #0]
 8008f92:	d1e0      	bne.n	8008f56 <_free_r+0x26>
 8008f94:	681c      	ldr	r4, [r3, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	6053      	str	r3, [r2, #4]
 8008f9a:	440c      	add	r4, r1
 8008f9c:	6014      	str	r4, [r2, #0]
 8008f9e:	e7da      	b.n	8008f56 <_free_r+0x26>
 8008fa0:	d902      	bls.n	8008fa8 <_free_r+0x78>
 8008fa2:	230c      	movs	r3, #12
 8008fa4:	6003      	str	r3, [r0, #0]
 8008fa6:	e7d6      	b.n	8008f56 <_free_r+0x26>
 8008fa8:	6825      	ldr	r5, [r4, #0]
 8008faa:	1961      	adds	r1, r4, r5
 8008fac:	428b      	cmp	r3, r1
 8008fae:	bf04      	itt	eq
 8008fb0:	6819      	ldreq	r1, [r3, #0]
 8008fb2:	685b      	ldreq	r3, [r3, #4]
 8008fb4:	6063      	str	r3, [r4, #4]
 8008fb6:	bf04      	itt	eq
 8008fb8:	1949      	addeq	r1, r1, r5
 8008fba:	6021      	streq	r1, [r4, #0]
 8008fbc:	6054      	str	r4, [r2, #4]
 8008fbe:	e7ca      	b.n	8008f56 <_free_r+0x26>
 8008fc0:	b003      	add	sp, #12
 8008fc2:	bd30      	pop	{r4, r5, pc}
 8008fc4:	20000574 	.word	0x20000574

08008fc8 <malloc>:
 8008fc8:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <malloc+0xc>)
 8008fca:	4601      	mov	r1, r0
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	f000 b823 	b.w	8009018 <_malloc_r>
 8008fd2:	bf00      	nop
 8008fd4:	20000068 	.word	0x20000068

08008fd8 <sbrk_aligned>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	4e0e      	ldr	r6, [pc, #56]	; (8009014 <sbrk_aligned+0x3c>)
 8008fdc:	460c      	mov	r4, r1
 8008fde:	6831      	ldr	r1, [r6, #0]
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	b911      	cbnz	r1, 8008fea <sbrk_aligned+0x12>
 8008fe4:	f001 fdd6 	bl	800ab94 <_sbrk_r>
 8008fe8:	6030      	str	r0, [r6, #0]
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f001 fdd1 	bl	800ab94 <_sbrk_r>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	d00a      	beq.n	800900c <sbrk_aligned+0x34>
 8008ff6:	1cc4      	adds	r4, r0, #3
 8008ff8:	f024 0403 	bic.w	r4, r4, #3
 8008ffc:	42a0      	cmp	r0, r4
 8008ffe:	d007      	beq.n	8009010 <sbrk_aligned+0x38>
 8009000:	1a21      	subs	r1, r4, r0
 8009002:	4628      	mov	r0, r5
 8009004:	f001 fdc6 	bl	800ab94 <_sbrk_r>
 8009008:	3001      	adds	r0, #1
 800900a:	d101      	bne.n	8009010 <sbrk_aligned+0x38>
 800900c:	f04f 34ff 	mov.w	r4, #4294967295
 8009010:	4620      	mov	r0, r4
 8009012:	bd70      	pop	{r4, r5, r6, pc}
 8009014:	20000578 	.word	0x20000578

08009018 <_malloc_r>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	1ccd      	adds	r5, r1, #3
 800901e:	f025 0503 	bic.w	r5, r5, #3
 8009022:	3508      	adds	r5, #8
 8009024:	2d0c      	cmp	r5, #12
 8009026:	bf38      	it	cc
 8009028:	250c      	movcc	r5, #12
 800902a:	2d00      	cmp	r5, #0
 800902c:	4607      	mov	r7, r0
 800902e:	db01      	blt.n	8009034 <_malloc_r+0x1c>
 8009030:	42a9      	cmp	r1, r5
 8009032:	d905      	bls.n	8009040 <_malloc_r+0x28>
 8009034:	230c      	movs	r3, #12
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	2600      	movs	r6, #0
 800903a:	4630      	mov	r0, r6
 800903c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009040:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009114 <_malloc_r+0xfc>
 8009044:	f000 f868 	bl	8009118 <__malloc_lock>
 8009048:	f8d8 3000 	ldr.w	r3, [r8]
 800904c:	461c      	mov	r4, r3
 800904e:	bb5c      	cbnz	r4, 80090a8 <_malloc_r+0x90>
 8009050:	4629      	mov	r1, r5
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff ffc0 	bl	8008fd8 <sbrk_aligned>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	4604      	mov	r4, r0
 800905c:	d155      	bne.n	800910a <_malloc_r+0xf2>
 800905e:	f8d8 4000 	ldr.w	r4, [r8]
 8009062:	4626      	mov	r6, r4
 8009064:	2e00      	cmp	r6, #0
 8009066:	d145      	bne.n	80090f4 <_malloc_r+0xdc>
 8009068:	2c00      	cmp	r4, #0
 800906a:	d048      	beq.n	80090fe <_malloc_r+0xe6>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	4631      	mov	r1, r6
 8009070:	4638      	mov	r0, r7
 8009072:	eb04 0903 	add.w	r9, r4, r3
 8009076:	f001 fd8d 	bl	800ab94 <_sbrk_r>
 800907a:	4581      	cmp	r9, r0
 800907c:	d13f      	bne.n	80090fe <_malloc_r+0xe6>
 800907e:	6821      	ldr	r1, [r4, #0]
 8009080:	1a6d      	subs	r5, r5, r1
 8009082:	4629      	mov	r1, r5
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff ffa7 	bl	8008fd8 <sbrk_aligned>
 800908a:	3001      	adds	r0, #1
 800908c:	d037      	beq.n	80090fe <_malloc_r+0xe6>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	442b      	add	r3, r5
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	f8d8 3000 	ldr.w	r3, [r8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d038      	beq.n	800910e <_malloc_r+0xf6>
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	42a2      	cmp	r2, r4
 80090a0:	d12b      	bne.n	80090fa <_malloc_r+0xe2>
 80090a2:	2200      	movs	r2, #0
 80090a4:	605a      	str	r2, [r3, #4]
 80090a6:	e00f      	b.n	80090c8 <_malloc_r+0xb0>
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	1b52      	subs	r2, r2, r5
 80090ac:	d41f      	bmi.n	80090ee <_malloc_r+0xd6>
 80090ae:	2a0b      	cmp	r2, #11
 80090b0:	d917      	bls.n	80090e2 <_malloc_r+0xca>
 80090b2:	1961      	adds	r1, r4, r5
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	6025      	str	r5, [r4, #0]
 80090b8:	bf18      	it	ne
 80090ba:	6059      	strne	r1, [r3, #4]
 80090bc:	6863      	ldr	r3, [r4, #4]
 80090be:	bf08      	it	eq
 80090c0:	f8c8 1000 	streq.w	r1, [r8]
 80090c4:	5162      	str	r2, [r4, r5]
 80090c6:	604b      	str	r3, [r1, #4]
 80090c8:	4638      	mov	r0, r7
 80090ca:	f104 060b 	add.w	r6, r4, #11
 80090ce:	f000 f829 	bl	8009124 <__malloc_unlock>
 80090d2:	f026 0607 	bic.w	r6, r6, #7
 80090d6:	1d23      	adds	r3, r4, #4
 80090d8:	1af2      	subs	r2, r6, r3
 80090da:	d0ae      	beq.n	800903a <_malloc_r+0x22>
 80090dc:	1b9b      	subs	r3, r3, r6
 80090de:	50a3      	str	r3, [r4, r2]
 80090e0:	e7ab      	b.n	800903a <_malloc_r+0x22>
 80090e2:	42a3      	cmp	r3, r4
 80090e4:	6862      	ldr	r2, [r4, #4]
 80090e6:	d1dd      	bne.n	80090a4 <_malloc_r+0x8c>
 80090e8:	f8c8 2000 	str.w	r2, [r8]
 80090ec:	e7ec      	b.n	80090c8 <_malloc_r+0xb0>
 80090ee:	4623      	mov	r3, r4
 80090f0:	6864      	ldr	r4, [r4, #4]
 80090f2:	e7ac      	b.n	800904e <_malloc_r+0x36>
 80090f4:	4634      	mov	r4, r6
 80090f6:	6876      	ldr	r6, [r6, #4]
 80090f8:	e7b4      	b.n	8009064 <_malloc_r+0x4c>
 80090fa:	4613      	mov	r3, r2
 80090fc:	e7cc      	b.n	8009098 <_malloc_r+0x80>
 80090fe:	230c      	movs	r3, #12
 8009100:	603b      	str	r3, [r7, #0]
 8009102:	4638      	mov	r0, r7
 8009104:	f000 f80e 	bl	8009124 <__malloc_unlock>
 8009108:	e797      	b.n	800903a <_malloc_r+0x22>
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	e7dc      	b.n	80090c8 <_malloc_r+0xb0>
 800910e:	605b      	str	r3, [r3, #4]
 8009110:	deff      	udf	#255	; 0xff
 8009112:	bf00      	nop
 8009114:	20000574 	.word	0x20000574

08009118 <__malloc_lock>:
 8009118:	4801      	ldr	r0, [pc, #4]	; (8009120 <__malloc_lock+0x8>)
 800911a:	f7ff b90a 	b.w	8008332 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	20000570 	.word	0x20000570

08009124 <__malloc_unlock>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__malloc_unlock+0x8>)
 8009126:	f7ff b905 	b.w	8008334 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	20000570 	.word	0x20000570

08009130 <_Balloc>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	69c6      	ldr	r6, [r0, #28]
 8009134:	4604      	mov	r4, r0
 8009136:	460d      	mov	r5, r1
 8009138:	b976      	cbnz	r6, 8009158 <_Balloc+0x28>
 800913a:	2010      	movs	r0, #16
 800913c:	f7ff ff44 	bl	8008fc8 <malloc>
 8009140:	4602      	mov	r2, r0
 8009142:	61e0      	str	r0, [r4, #28]
 8009144:	b920      	cbnz	r0, 8009150 <_Balloc+0x20>
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <_Balloc+0x78>)
 8009148:	4818      	ldr	r0, [pc, #96]	; (80091ac <_Balloc+0x7c>)
 800914a:	216b      	movs	r1, #107	; 0x6b
 800914c:	f001 fd48 	bl	800abe0 <__assert_func>
 8009150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009154:	6006      	str	r6, [r0, #0]
 8009156:	60c6      	str	r6, [r0, #12]
 8009158:	69e6      	ldr	r6, [r4, #28]
 800915a:	68f3      	ldr	r3, [r6, #12]
 800915c:	b183      	cbz	r3, 8009180 <_Balloc+0x50>
 800915e:	69e3      	ldr	r3, [r4, #28]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009166:	b9b8      	cbnz	r0, 8009198 <_Balloc+0x68>
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f605 	lsl.w	r6, r1, r5
 800916e:	1d72      	adds	r2, r6, #5
 8009170:	0092      	lsls	r2, r2, #2
 8009172:	4620      	mov	r0, r4
 8009174:	f001 fd52 	bl	800ac1c <_calloc_r>
 8009178:	b160      	cbz	r0, 8009194 <_Balloc+0x64>
 800917a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800917e:	e00e      	b.n	800919e <_Balloc+0x6e>
 8009180:	2221      	movs	r2, #33	; 0x21
 8009182:	2104      	movs	r1, #4
 8009184:	4620      	mov	r0, r4
 8009186:	f001 fd49 	bl	800ac1c <_calloc_r>
 800918a:	69e3      	ldr	r3, [r4, #28]
 800918c:	60f0      	str	r0, [r6, #12]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e4      	bne.n	800915e <_Balloc+0x2e>
 8009194:	2000      	movs	r0, #0
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	6802      	ldr	r2, [r0, #0]
 800919a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800919e:	2300      	movs	r3, #0
 80091a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091a4:	e7f7      	b.n	8009196 <_Balloc+0x66>
 80091a6:	bf00      	nop
 80091a8:	0800bc56 	.word	0x0800bc56
 80091ac:	0800bcd6 	.word	0x0800bcd6

080091b0 <_Bfree>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	69c6      	ldr	r6, [r0, #28]
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	b976      	cbnz	r6, 80091d8 <_Bfree+0x28>
 80091ba:	2010      	movs	r0, #16
 80091bc:	f7ff ff04 	bl	8008fc8 <malloc>
 80091c0:	4602      	mov	r2, r0
 80091c2:	61e8      	str	r0, [r5, #28]
 80091c4:	b920      	cbnz	r0, 80091d0 <_Bfree+0x20>
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <_Bfree+0x3c>)
 80091c8:	4809      	ldr	r0, [pc, #36]	; (80091f0 <_Bfree+0x40>)
 80091ca:	218f      	movs	r1, #143	; 0x8f
 80091cc:	f001 fd08 	bl	800abe0 <__assert_func>
 80091d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091d4:	6006      	str	r6, [r0, #0]
 80091d6:	60c6      	str	r6, [r0, #12]
 80091d8:	b13c      	cbz	r4, 80091ea <_Bfree+0x3a>
 80091da:	69eb      	ldr	r3, [r5, #28]
 80091dc:	6862      	ldr	r2, [r4, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091e4:	6021      	str	r1, [r4, #0]
 80091e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	0800bc56 	.word	0x0800bc56
 80091f0:	0800bcd6 	.word	0x0800bcd6

080091f4 <__multadd>:
 80091f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f8:	690d      	ldr	r5, [r1, #16]
 80091fa:	4607      	mov	r7, r0
 80091fc:	460c      	mov	r4, r1
 80091fe:	461e      	mov	r6, r3
 8009200:	f101 0c14 	add.w	ip, r1, #20
 8009204:	2000      	movs	r0, #0
 8009206:	f8dc 3000 	ldr.w	r3, [ip]
 800920a:	b299      	uxth	r1, r3
 800920c:	fb02 6101 	mla	r1, r2, r1, r6
 8009210:	0c1e      	lsrs	r6, r3, #16
 8009212:	0c0b      	lsrs	r3, r1, #16
 8009214:	fb02 3306 	mla	r3, r2, r6, r3
 8009218:	b289      	uxth	r1, r1
 800921a:	3001      	adds	r0, #1
 800921c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009220:	4285      	cmp	r5, r0
 8009222:	f84c 1b04 	str.w	r1, [ip], #4
 8009226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800922a:	dcec      	bgt.n	8009206 <__multadd+0x12>
 800922c:	b30e      	cbz	r6, 8009272 <__multadd+0x7e>
 800922e:	68a3      	ldr	r3, [r4, #8]
 8009230:	42ab      	cmp	r3, r5
 8009232:	dc19      	bgt.n	8009268 <__multadd+0x74>
 8009234:	6861      	ldr	r1, [r4, #4]
 8009236:	4638      	mov	r0, r7
 8009238:	3101      	adds	r1, #1
 800923a:	f7ff ff79 	bl	8009130 <_Balloc>
 800923e:	4680      	mov	r8, r0
 8009240:	b928      	cbnz	r0, 800924e <__multadd+0x5a>
 8009242:	4602      	mov	r2, r0
 8009244:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <__multadd+0x84>)
 8009246:	480d      	ldr	r0, [pc, #52]	; (800927c <__multadd+0x88>)
 8009248:	21ba      	movs	r1, #186	; 0xba
 800924a:	f001 fcc9 	bl	800abe0 <__assert_func>
 800924e:	6922      	ldr	r2, [r4, #16]
 8009250:	3202      	adds	r2, #2
 8009252:	f104 010c 	add.w	r1, r4, #12
 8009256:	0092      	lsls	r2, r2, #2
 8009258:	300c      	adds	r0, #12
 800925a:	f001 fcab 	bl	800abb4 <memcpy>
 800925e:	4621      	mov	r1, r4
 8009260:	4638      	mov	r0, r7
 8009262:	f7ff ffa5 	bl	80091b0 <_Bfree>
 8009266:	4644      	mov	r4, r8
 8009268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800926c:	3501      	adds	r5, #1
 800926e:	615e      	str	r6, [r3, #20]
 8009270:	6125      	str	r5, [r4, #16]
 8009272:	4620      	mov	r0, r4
 8009274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009278:	0800bcc5 	.word	0x0800bcc5
 800927c:	0800bcd6 	.word	0x0800bcd6

08009280 <__s2b>:
 8009280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009284:	460c      	mov	r4, r1
 8009286:	4615      	mov	r5, r2
 8009288:	461f      	mov	r7, r3
 800928a:	2209      	movs	r2, #9
 800928c:	3308      	adds	r3, #8
 800928e:	4606      	mov	r6, r0
 8009290:	fb93 f3f2 	sdiv	r3, r3, r2
 8009294:	2100      	movs	r1, #0
 8009296:	2201      	movs	r2, #1
 8009298:	429a      	cmp	r2, r3
 800929a:	db09      	blt.n	80092b0 <__s2b+0x30>
 800929c:	4630      	mov	r0, r6
 800929e:	f7ff ff47 	bl	8009130 <_Balloc>
 80092a2:	b940      	cbnz	r0, 80092b6 <__s2b+0x36>
 80092a4:	4602      	mov	r2, r0
 80092a6:	4b19      	ldr	r3, [pc, #100]	; (800930c <__s2b+0x8c>)
 80092a8:	4819      	ldr	r0, [pc, #100]	; (8009310 <__s2b+0x90>)
 80092aa:	21d3      	movs	r1, #211	; 0xd3
 80092ac:	f001 fc98 	bl	800abe0 <__assert_func>
 80092b0:	0052      	lsls	r2, r2, #1
 80092b2:	3101      	adds	r1, #1
 80092b4:	e7f0      	b.n	8009298 <__s2b+0x18>
 80092b6:	9b08      	ldr	r3, [sp, #32]
 80092b8:	6143      	str	r3, [r0, #20]
 80092ba:	2d09      	cmp	r5, #9
 80092bc:	f04f 0301 	mov.w	r3, #1
 80092c0:	6103      	str	r3, [r0, #16]
 80092c2:	dd16      	ble.n	80092f2 <__s2b+0x72>
 80092c4:	f104 0909 	add.w	r9, r4, #9
 80092c8:	46c8      	mov	r8, r9
 80092ca:	442c      	add	r4, r5
 80092cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80092d0:	4601      	mov	r1, r0
 80092d2:	3b30      	subs	r3, #48	; 0x30
 80092d4:	220a      	movs	r2, #10
 80092d6:	4630      	mov	r0, r6
 80092d8:	f7ff ff8c 	bl	80091f4 <__multadd>
 80092dc:	45a0      	cmp	r8, r4
 80092de:	d1f5      	bne.n	80092cc <__s2b+0x4c>
 80092e0:	f1a5 0408 	sub.w	r4, r5, #8
 80092e4:	444c      	add	r4, r9
 80092e6:	1b2d      	subs	r5, r5, r4
 80092e8:	1963      	adds	r3, r4, r5
 80092ea:	42bb      	cmp	r3, r7
 80092ec:	db04      	blt.n	80092f8 <__s2b+0x78>
 80092ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092f2:	340a      	adds	r4, #10
 80092f4:	2509      	movs	r5, #9
 80092f6:	e7f6      	b.n	80092e6 <__s2b+0x66>
 80092f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80092fc:	4601      	mov	r1, r0
 80092fe:	3b30      	subs	r3, #48	; 0x30
 8009300:	220a      	movs	r2, #10
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ff76 	bl	80091f4 <__multadd>
 8009308:	e7ee      	b.n	80092e8 <__s2b+0x68>
 800930a:	bf00      	nop
 800930c:	0800bcc5 	.word	0x0800bcc5
 8009310:	0800bcd6 	.word	0x0800bcd6

08009314 <__hi0bits>:
 8009314:	0c03      	lsrs	r3, r0, #16
 8009316:	041b      	lsls	r3, r3, #16
 8009318:	b9d3      	cbnz	r3, 8009350 <__hi0bits+0x3c>
 800931a:	0400      	lsls	r0, r0, #16
 800931c:	2310      	movs	r3, #16
 800931e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009322:	bf04      	itt	eq
 8009324:	0200      	lsleq	r0, r0, #8
 8009326:	3308      	addeq	r3, #8
 8009328:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800932c:	bf04      	itt	eq
 800932e:	0100      	lsleq	r0, r0, #4
 8009330:	3304      	addeq	r3, #4
 8009332:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009336:	bf04      	itt	eq
 8009338:	0080      	lsleq	r0, r0, #2
 800933a:	3302      	addeq	r3, #2
 800933c:	2800      	cmp	r0, #0
 800933e:	db05      	blt.n	800934c <__hi0bits+0x38>
 8009340:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009344:	f103 0301 	add.w	r3, r3, #1
 8009348:	bf08      	it	eq
 800934a:	2320      	moveq	r3, #32
 800934c:	4618      	mov	r0, r3
 800934e:	4770      	bx	lr
 8009350:	2300      	movs	r3, #0
 8009352:	e7e4      	b.n	800931e <__hi0bits+0xa>

08009354 <__lo0bits>:
 8009354:	6803      	ldr	r3, [r0, #0]
 8009356:	f013 0207 	ands.w	r2, r3, #7
 800935a:	d00c      	beq.n	8009376 <__lo0bits+0x22>
 800935c:	07d9      	lsls	r1, r3, #31
 800935e:	d422      	bmi.n	80093a6 <__lo0bits+0x52>
 8009360:	079a      	lsls	r2, r3, #30
 8009362:	bf49      	itett	mi
 8009364:	085b      	lsrmi	r3, r3, #1
 8009366:	089b      	lsrpl	r3, r3, #2
 8009368:	6003      	strmi	r3, [r0, #0]
 800936a:	2201      	movmi	r2, #1
 800936c:	bf5c      	itt	pl
 800936e:	6003      	strpl	r3, [r0, #0]
 8009370:	2202      	movpl	r2, #2
 8009372:	4610      	mov	r0, r2
 8009374:	4770      	bx	lr
 8009376:	b299      	uxth	r1, r3
 8009378:	b909      	cbnz	r1, 800937e <__lo0bits+0x2a>
 800937a:	0c1b      	lsrs	r3, r3, #16
 800937c:	2210      	movs	r2, #16
 800937e:	b2d9      	uxtb	r1, r3
 8009380:	b909      	cbnz	r1, 8009386 <__lo0bits+0x32>
 8009382:	3208      	adds	r2, #8
 8009384:	0a1b      	lsrs	r3, r3, #8
 8009386:	0719      	lsls	r1, r3, #28
 8009388:	bf04      	itt	eq
 800938a:	091b      	lsreq	r3, r3, #4
 800938c:	3204      	addeq	r2, #4
 800938e:	0799      	lsls	r1, r3, #30
 8009390:	bf04      	itt	eq
 8009392:	089b      	lsreq	r3, r3, #2
 8009394:	3202      	addeq	r2, #2
 8009396:	07d9      	lsls	r1, r3, #31
 8009398:	d403      	bmi.n	80093a2 <__lo0bits+0x4e>
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	f102 0201 	add.w	r2, r2, #1
 80093a0:	d003      	beq.n	80093aa <__lo0bits+0x56>
 80093a2:	6003      	str	r3, [r0, #0]
 80093a4:	e7e5      	b.n	8009372 <__lo0bits+0x1e>
 80093a6:	2200      	movs	r2, #0
 80093a8:	e7e3      	b.n	8009372 <__lo0bits+0x1e>
 80093aa:	2220      	movs	r2, #32
 80093ac:	e7e1      	b.n	8009372 <__lo0bits+0x1e>
	...

080093b0 <__i2b>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	460c      	mov	r4, r1
 80093b4:	2101      	movs	r1, #1
 80093b6:	f7ff febb 	bl	8009130 <_Balloc>
 80093ba:	4602      	mov	r2, r0
 80093bc:	b928      	cbnz	r0, 80093ca <__i2b+0x1a>
 80093be:	4b05      	ldr	r3, [pc, #20]	; (80093d4 <__i2b+0x24>)
 80093c0:	4805      	ldr	r0, [pc, #20]	; (80093d8 <__i2b+0x28>)
 80093c2:	f240 1145 	movw	r1, #325	; 0x145
 80093c6:	f001 fc0b 	bl	800abe0 <__assert_func>
 80093ca:	2301      	movs	r3, #1
 80093cc:	6144      	str	r4, [r0, #20]
 80093ce:	6103      	str	r3, [r0, #16]
 80093d0:	bd10      	pop	{r4, pc}
 80093d2:	bf00      	nop
 80093d4:	0800bcc5 	.word	0x0800bcc5
 80093d8:	0800bcd6 	.word	0x0800bcd6

080093dc <__multiply>:
 80093dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e0:	4691      	mov	r9, r2
 80093e2:	690a      	ldr	r2, [r1, #16]
 80093e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	bfb8      	it	lt
 80093ec:	460b      	movlt	r3, r1
 80093ee:	460c      	mov	r4, r1
 80093f0:	bfbc      	itt	lt
 80093f2:	464c      	movlt	r4, r9
 80093f4:	4699      	movlt	r9, r3
 80093f6:	6927      	ldr	r7, [r4, #16]
 80093f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093fc:	68a3      	ldr	r3, [r4, #8]
 80093fe:	6861      	ldr	r1, [r4, #4]
 8009400:	eb07 060a 	add.w	r6, r7, sl
 8009404:	42b3      	cmp	r3, r6
 8009406:	b085      	sub	sp, #20
 8009408:	bfb8      	it	lt
 800940a:	3101      	addlt	r1, #1
 800940c:	f7ff fe90 	bl	8009130 <_Balloc>
 8009410:	b930      	cbnz	r0, 8009420 <__multiply+0x44>
 8009412:	4602      	mov	r2, r0
 8009414:	4b44      	ldr	r3, [pc, #272]	; (8009528 <__multiply+0x14c>)
 8009416:	4845      	ldr	r0, [pc, #276]	; (800952c <__multiply+0x150>)
 8009418:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800941c:	f001 fbe0 	bl	800abe0 <__assert_func>
 8009420:	f100 0514 	add.w	r5, r0, #20
 8009424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009428:	462b      	mov	r3, r5
 800942a:	2200      	movs	r2, #0
 800942c:	4543      	cmp	r3, r8
 800942e:	d321      	bcc.n	8009474 <__multiply+0x98>
 8009430:	f104 0314 	add.w	r3, r4, #20
 8009434:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009438:	f109 0314 	add.w	r3, r9, #20
 800943c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009440:	9202      	str	r2, [sp, #8]
 8009442:	1b3a      	subs	r2, r7, r4
 8009444:	3a15      	subs	r2, #21
 8009446:	f022 0203 	bic.w	r2, r2, #3
 800944a:	3204      	adds	r2, #4
 800944c:	f104 0115 	add.w	r1, r4, #21
 8009450:	428f      	cmp	r7, r1
 8009452:	bf38      	it	cc
 8009454:	2204      	movcc	r2, #4
 8009456:	9201      	str	r2, [sp, #4]
 8009458:	9a02      	ldr	r2, [sp, #8]
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	429a      	cmp	r2, r3
 800945e:	d80c      	bhi.n	800947a <__multiply+0x9e>
 8009460:	2e00      	cmp	r6, #0
 8009462:	dd03      	ble.n	800946c <__multiply+0x90>
 8009464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05b      	beq.n	8009524 <__multiply+0x148>
 800946c:	6106      	str	r6, [r0, #16]
 800946e:	b005      	add	sp, #20
 8009470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	f843 2b04 	str.w	r2, [r3], #4
 8009478:	e7d8      	b.n	800942c <__multiply+0x50>
 800947a:	f8b3 a000 	ldrh.w	sl, [r3]
 800947e:	f1ba 0f00 	cmp.w	sl, #0
 8009482:	d024      	beq.n	80094ce <__multiply+0xf2>
 8009484:	f104 0e14 	add.w	lr, r4, #20
 8009488:	46a9      	mov	r9, r5
 800948a:	f04f 0c00 	mov.w	ip, #0
 800948e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009492:	f8d9 1000 	ldr.w	r1, [r9]
 8009496:	fa1f fb82 	uxth.w	fp, r2
 800949a:	b289      	uxth	r1, r1
 800949c:	fb0a 110b 	mla	r1, sl, fp, r1
 80094a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80094a4:	f8d9 2000 	ldr.w	r2, [r9]
 80094a8:	4461      	add	r1, ip
 80094aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80094b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80094b6:	b289      	uxth	r1, r1
 80094b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094bc:	4577      	cmp	r7, lr
 80094be:	f849 1b04 	str.w	r1, [r9], #4
 80094c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80094c6:	d8e2      	bhi.n	800948e <__multiply+0xb2>
 80094c8:	9a01      	ldr	r2, [sp, #4]
 80094ca:	f845 c002 	str.w	ip, [r5, r2]
 80094ce:	9a03      	ldr	r2, [sp, #12]
 80094d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80094d4:	3304      	adds	r3, #4
 80094d6:	f1b9 0f00 	cmp.w	r9, #0
 80094da:	d021      	beq.n	8009520 <__multiply+0x144>
 80094dc:	6829      	ldr	r1, [r5, #0]
 80094de:	f104 0c14 	add.w	ip, r4, #20
 80094e2:	46ae      	mov	lr, r5
 80094e4:	f04f 0a00 	mov.w	sl, #0
 80094e8:	f8bc b000 	ldrh.w	fp, [ip]
 80094ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094f0:	fb09 220b 	mla	r2, r9, fp, r2
 80094f4:	4452      	add	r2, sl
 80094f6:	b289      	uxth	r1, r1
 80094f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80094fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009500:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009504:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009508:	f8be 1000 	ldrh.w	r1, [lr]
 800950c:	fb09 110a 	mla	r1, r9, sl, r1
 8009510:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009514:	4567      	cmp	r7, ip
 8009516:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800951a:	d8e5      	bhi.n	80094e8 <__multiply+0x10c>
 800951c:	9a01      	ldr	r2, [sp, #4]
 800951e:	50a9      	str	r1, [r5, r2]
 8009520:	3504      	adds	r5, #4
 8009522:	e799      	b.n	8009458 <__multiply+0x7c>
 8009524:	3e01      	subs	r6, #1
 8009526:	e79b      	b.n	8009460 <__multiply+0x84>
 8009528:	0800bcc5 	.word	0x0800bcc5
 800952c:	0800bcd6 	.word	0x0800bcd6

08009530 <__pow5mult>:
 8009530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009534:	4615      	mov	r5, r2
 8009536:	f012 0203 	ands.w	r2, r2, #3
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	d007      	beq.n	8009550 <__pow5mult+0x20>
 8009540:	4c25      	ldr	r4, [pc, #148]	; (80095d8 <__pow5mult+0xa8>)
 8009542:	3a01      	subs	r2, #1
 8009544:	2300      	movs	r3, #0
 8009546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800954a:	f7ff fe53 	bl	80091f4 <__multadd>
 800954e:	4607      	mov	r7, r0
 8009550:	10ad      	asrs	r5, r5, #2
 8009552:	d03d      	beq.n	80095d0 <__pow5mult+0xa0>
 8009554:	69f4      	ldr	r4, [r6, #28]
 8009556:	b97c      	cbnz	r4, 8009578 <__pow5mult+0x48>
 8009558:	2010      	movs	r0, #16
 800955a:	f7ff fd35 	bl	8008fc8 <malloc>
 800955e:	4602      	mov	r2, r0
 8009560:	61f0      	str	r0, [r6, #28]
 8009562:	b928      	cbnz	r0, 8009570 <__pow5mult+0x40>
 8009564:	4b1d      	ldr	r3, [pc, #116]	; (80095dc <__pow5mult+0xac>)
 8009566:	481e      	ldr	r0, [pc, #120]	; (80095e0 <__pow5mult+0xb0>)
 8009568:	f240 11b3 	movw	r1, #435	; 0x1b3
 800956c:	f001 fb38 	bl	800abe0 <__assert_func>
 8009570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009574:	6004      	str	r4, [r0, #0]
 8009576:	60c4      	str	r4, [r0, #12]
 8009578:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800957c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009580:	b94c      	cbnz	r4, 8009596 <__pow5mult+0x66>
 8009582:	f240 2171 	movw	r1, #625	; 0x271
 8009586:	4630      	mov	r0, r6
 8009588:	f7ff ff12 	bl	80093b0 <__i2b>
 800958c:	2300      	movs	r3, #0
 800958e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009592:	4604      	mov	r4, r0
 8009594:	6003      	str	r3, [r0, #0]
 8009596:	f04f 0900 	mov.w	r9, #0
 800959a:	07eb      	lsls	r3, r5, #31
 800959c:	d50a      	bpl.n	80095b4 <__pow5mult+0x84>
 800959e:	4639      	mov	r1, r7
 80095a0:	4622      	mov	r2, r4
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff ff1a 	bl	80093dc <__multiply>
 80095a8:	4639      	mov	r1, r7
 80095aa:	4680      	mov	r8, r0
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fdff 	bl	80091b0 <_Bfree>
 80095b2:	4647      	mov	r7, r8
 80095b4:	106d      	asrs	r5, r5, #1
 80095b6:	d00b      	beq.n	80095d0 <__pow5mult+0xa0>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	b938      	cbnz	r0, 80095cc <__pow5mult+0x9c>
 80095bc:	4622      	mov	r2, r4
 80095be:	4621      	mov	r1, r4
 80095c0:	4630      	mov	r0, r6
 80095c2:	f7ff ff0b 	bl	80093dc <__multiply>
 80095c6:	6020      	str	r0, [r4, #0]
 80095c8:	f8c0 9000 	str.w	r9, [r0]
 80095cc:	4604      	mov	r4, r0
 80095ce:	e7e4      	b.n	800959a <__pow5mult+0x6a>
 80095d0:	4638      	mov	r0, r7
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d6:	bf00      	nop
 80095d8:	0800be20 	.word	0x0800be20
 80095dc:	0800bc56 	.word	0x0800bc56
 80095e0:	0800bcd6 	.word	0x0800bcd6

080095e4 <__lshift>:
 80095e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	460c      	mov	r4, r1
 80095ea:	6849      	ldr	r1, [r1, #4]
 80095ec:	6923      	ldr	r3, [r4, #16]
 80095ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	4607      	mov	r7, r0
 80095f6:	4691      	mov	r9, r2
 80095f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095fc:	f108 0601 	add.w	r6, r8, #1
 8009600:	42b3      	cmp	r3, r6
 8009602:	db0b      	blt.n	800961c <__lshift+0x38>
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff fd93 	bl	8009130 <_Balloc>
 800960a:	4605      	mov	r5, r0
 800960c:	b948      	cbnz	r0, 8009622 <__lshift+0x3e>
 800960e:	4602      	mov	r2, r0
 8009610:	4b28      	ldr	r3, [pc, #160]	; (80096b4 <__lshift+0xd0>)
 8009612:	4829      	ldr	r0, [pc, #164]	; (80096b8 <__lshift+0xd4>)
 8009614:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009618:	f001 fae2 	bl	800abe0 <__assert_func>
 800961c:	3101      	adds	r1, #1
 800961e:	005b      	lsls	r3, r3, #1
 8009620:	e7ee      	b.n	8009600 <__lshift+0x1c>
 8009622:	2300      	movs	r3, #0
 8009624:	f100 0114 	add.w	r1, r0, #20
 8009628:	f100 0210 	add.w	r2, r0, #16
 800962c:	4618      	mov	r0, r3
 800962e:	4553      	cmp	r3, sl
 8009630:	db33      	blt.n	800969a <__lshift+0xb6>
 8009632:	6920      	ldr	r0, [r4, #16]
 8009634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009638:	f104 0314 	add.w	r3, r4, #20
 800963c:	f019 091f 	ands.w	r9, r9, #31
 8009640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009644:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009648:	d02b      	beq.n	80096a2 <__lshift+0xbe>
 800964a:	f1c9 0e20 	rsb	lr, r9, #32
 800964e:	468a      	mov	sl, r1
 8009650:	2200      	movs	r2, #0
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	fa00 f009 	lsl.w	r0, r0, r9
 8009658:	4310      	orrs	r0, r2
 800965a:	f84a 0b04 	str.w	r0, [sl], #4
 800965e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009662:	459c      	cmp	ip, r3
 8009664:	fa22 f20e 	lsr.w	r2, r2, lr
 8009668:	d8f3      	bhi.n	8009652 <__lshift+0x6e>
 800966a:	ebac 0304 	sub.w	r3, ip, r4
 800966e:	3b15      	subs	r3, #21
 8009670:	f023 0303 	bic.w	r3, r3, #3
 8009674:	3304      	adds	r3, #4
 8009676:	f104 0015 	add.w	r0, r4, #21
 800967a:	4584      	cmp	ip, r0
 800967c:	bf38      	it	cc
 800967e:	2304      	movcc	r3, #4
 8009680:	50ca      	str	r2, [r1, r3]
 8009682:	b10a      	cbz	r2, 8009688 <__lshift+0xa4>
 8009684:	f108 0602 	add.w	r6, r8, #2
 8009688:	3e01      	subs	r6, #1
 800968a:	4638      	mov	r0, r7
 800968c:	612e      	str	r6, [r5, #16]
 800968e:	4621      	mov	r1, r4
 8009690:	f7ff fd8e 	bl	80091b0 <_Bfree>
 8009694:	4628      	mov	r0, r5
 8009696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800969a:	f842 0f04 	str.w	r0, [r2, #4]!
 800969e:	3301      	adds	r3, #1
 80096a0:	e7c5      	b.n	800962e <__lshift+0x4a>
 80096a2:	3904      	subs	r1, #4
 80096a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80096ac:	459c      	cmp	ip, r3
 80096ae:	d8f9      	bhi.n	80096a4 <__lshift+0xc0>
 80096b0:	e7ea      	b.n	8009688 <__lshift+0xa4>
 80096b2:	bf00      	nop
 80096b4:	0800bcc5 	.word	0x0800bcc5
 80096b8:	0800bcd6 	.word	0x0800bcd6

080096bc <__mcmp>:
 80096bc:	b530      	push	{r4, r5, lr}
 80096be:	6902      	ldr	r2, [r0, #16]
 80096c0:	690c      	ldr	r4, [r1, #16]
 80096c2:	1b12      	subs	r2, r2, r4
 80096c4:	d10e      	bne.n	80096e4 <__mcmp+0x28>
 80096c6:	f100 0314 	add.w	r3, r0, #20
 80096ca:	3114      	adds	r1, #20
 80096cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80096d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80096d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096dc:	42a5      	cmp	r5, r4
 80096de:	d003      	beq.n	80096e8 <__mcmp+0x2c>
 80096e0:	d305      	bcc.n	80096ee <__mcmp+0x32>
 80096e2:	2201      	movs	r2, #1
 80096e4:	4610      	mov	r0, r2
 80096e6:	bd30      	pop	{r4, r5, pc}
 80096e8:	4283      	cmp	r3, r0
 80096ea:	d3f3      	bcc.n	80096d4 <__mcmp+0x18>
 80096ec:	e7fa      	b.n	80096e4 <__mcmp+0x28>
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295
 80096f2:	e7f7      	b.n	80096e4 <__mcmp+0x28>

080096f4 <__mdiff>:
 80096f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	460c      	mov	r4, r1
 80096fa:	4606      	mov	r6, r0
 80096fc:	4611      	mov	r1, r2
 80096fe:	4620      	mov	r0, r4
 8009700:	4690      	mov	r8, r2
 8009702:	f7ff ffdb 	bl	80096bc <__mcmp>
 8009706:	1e05      	subs	r5, r0, #0
 8009708:	d110      	bne.n	800972c <__mdiff+0x38>
 800970a:	4629      	mov	r1, r5
 800970c:	4630      	mov	r0, r6
 800970e:	f7ff fd0f 	bl	8009130 <_Balloc>
 8009712:	b930      	cbnz	r0, 8009722 <__mdiff+0x2e>
 8009714:	4b3a      	ldr	r3, [pc, #232]	; (8009800 <__mdiff+0x10c>)
 8009716:	4602      	mov	r2, r0
 8009718:	f240 2137 	movw	r1, #567	; 0x237
 800971c:	4839      	ldr	r0, [pc, #228]	; (8009804 <__mdiff+0x110>)
 800971e:	f001 fa5f 	bl	800abe0 <__assert_func>
 8009722:	2301      	movs	r3, #1
 8009724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009728:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972c:	bfa4      	itt	ge
 800972e:	4643      	movge	r3, r8
 8009730:	46a0      	movge	r8, r4
 8009732:	4630      	mov	r0, r6
 8009734:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009738:	bfa6      	itte	ge
 800973a:	461c      	movge	r4, r3
 800973c:	2500      	movge	r5, #0
 800973e:	2501      	movlt	r5, #1
 8009740:	f7ff fcf6 	bl	8009130 <_Balloc>
 8009744:	b920      	cbnz	r0, 8009750 <__mdiff+0x5c>
 8009746:	4b2e      	ldr	r3, [pc, #184]	; (8009800 <__mdiff+0x10c>)
 8009748:	4602      	mov	r2, r0
 800974a:	f240 2145 	movw	r1, #581	; 0x245
 800974e:	e7e5      	b.n	800971c <__mdiff+0x28>
 8009750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009754:	6926      	ldr	r6, [r4, #16]
 8009756:	60c5      	str	r5, [r0, #12]
 8009758:	f104 0914 	add.w	r9, r4, #20
 800975c:	f108 0514 	add.w	r5, r8, #20
 8009760:	f100 0e14 	add.w	lr, r0, #20
 8009764:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009768:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800976c:	f108 0210 	add.w	r2, r8, #16
 8009770:	46f2      	mov	sl, lr
 8009772:	2100      	movs	r1, #0
 8009774:	f859 3b04 	ldr.w	r3, [r9], #4
 8009778:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800977c:	fa11 f88b 	uxtah	r8, r1, fp
 8009780:	b299      	uxth	r1, r3
 8009782:	0c1b      	lsrs	r3, r3, #16
 8009784:	eba8 0801 	sub.w	r8, r8, r1
 8009788:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800978c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009790:	fa1f f888 	uxth.w	r8, r8
 8009794:	1419      	asrs	r1, r3, #16
 8009796:	454e      	cmp	r6, r9
 8009798:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800979c:	f84a 3b04 	str.w	r3, [sl], #4
 80097a0:	d8e8      	bhi.n	8009774 <__mdiff+0x80>
 80097a2:	1b33      	subs	r3, r6, r4
 80097a4:	3b15      	subs	r3, #21
 80097a6:	f023 0303 	bic.w	r3, r3, #3
 80097aa:	3304      	adds	r3, #4
 80097ac:	3415      	adds	r4, #21
 80097ae:	42a6      	cmp	r6, r4
 80097b0:	bf38      	it	cc
 80097b2:	2304      	movcc	r3, #4
 80097b4:	441d      	add	r5, r3
 80097b6:	4473      	add	r3, lr
 80097b8:	469e      	mov	lr, r3
 80097ba:	462e      	mov	r6, r5
 80097bc:	4566      	cmp	r6, ip
 80097be:	d30e      	bcc.n	80097de <__mdiff+0xea>
 80097c0:	f10c 0203 	add.w	r2, ip, #3
 80097c4:	1b52      	subs	r2, r2, r5
 80097c6:	f022 0203 	bic.w	r2, r2, #3
 80097ca:	3d03      	subs	r5, #3
 80097cc:	45ac      	cmp	ip, r5
 80097ce:	bf38      	it	cc
 80097d0:	2200      	movcc	r2, #0
 80097d2:	4413      	add	r3, r2
 80097d4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80097d8:	b17a      	cbz	r2, 80097fa <__mdiff+0x106>
 80097da:	6107      	str	r7, [r0, #16]
 80097dc:	e7a4      	b.n	8009728 <__mdiff+0x34>
 80097de:	f856 8b04 	ldr.w	r8, [r6], #4
 80097e2:	fa11 f288 	uxtah	r2, r1, r8
 80097e6:	1414      	asrs	r4, r2, #16
 80097e8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80097ec:	b292      	uxth	r2, r2
 80097ee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097f2:	f84e 2b04 	str.w	r2, [lr], #4
 80097f6:	1421      	asrs	r1, r4, #16
 80097f8:	e7e0      	b.n	80097bc <__mdiff+0xc8>
 80097fa:	3f01      	subs	r7, #1
 80097fc:	e7ea      	b.n	80097d4 <__mdiff+0xe0>
 80097fe:	bf00      	nop
 8009800:	0800bcc5 	.word	0x0800bcc5
 8009804:	0800bcd6 	.word	0x0800bcd6

08009808 <__ulp>:
 8009808:	b082      	sub	sp, #8
 800980a:	ed8d 0b00 	vstr	d0, [sp]
 800980e:	9a01      	ldr	r2, [sp, #4]
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <__ulp+0x48>)
 8009812:	4013      	ands	r3, r2
 8009814:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009818:	2b00      	cmp	r3, #0
 800981a:	dc08      	bgt.n	800982e <__ulp+0x26>
 800981c:	425b      	negs	r3, r3
 800981e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009822:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009826:	da04      	bge.n	8009832 <__ulp+0x2a>
 8009828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800982c:	4113      	asrs	r3, r2
 800982e:	2200      	movs	r2, #0
 8009830:	e008      	b.n	8009844 <__ulp+0x3c>
 8009832:	f1a2 0314 	sub.w	r3, r2, #20
 8009836:	2b1e      	cmp	r3, #30
 8009838:	bfda      	itte	le
 800983a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800983e:	40da      	lsrle	r2, r3
 8009840:	2201      	movgt	r2, #1
 8009842:	2300      	movs	r3, #0
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	ec41 0b10 	vmov	d0, r0, r1
 800984c:	b002      	add	sp, #8
 800984e:	4770      	bx	lr
 8009850:	7ff00000 	.word	0x7ff00000

08009854 <__b2d>:
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	6906      	ldr	r6, [r0, #16]
 800985a:	f100 0814 	add.w	r8, r0, #20
 800985e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009862:	1f37      	subs	r7, r6, #4
 8009864:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009868:	4610      	mov	r0, r2
 800986a:	f7ff fd53 	bl	8009314 <__hi0bits>
 800986e:	f1c0 0320 	rsb	r3, r0, #32
 8009872:	280a      	cmp	r0, #10
 8009874:	600b      	str	r3, [r1, #0]
 8009876:	491b      	ldr	r1, [pc, #108]	; (80098e4 <__b2d+0x90>)
 8009878:	dc15      	bgt.n	80098a6 <__b2d+0x52>
 800987a:	f1c0 0c0b 	rsb	ip, r0, #11
 800987e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009882:	45b8      	cmp	r8, r7
 8009884:	ea43 0501 	orr.w	r5, r3, r1
 8009888:	bf34      	ite	cc
 800988a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800988e:	2300      	movcs	r3, #0
 8009890:	3015      	adds	r0, #21
 8009892:	fa02 f000 	lsl.w	r0, r2, r0
 8009896:	fa23 f30c 	lsr.w	r3, r3, ip
 800989a:	4303      	orrs	r3, r0
 800989c:	461c      	mov	r4, r3
 800989e:	ec45 4b10 	vmov	d0, r4, r5
 80098a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a6:	45b8      	cmp	r8, r7
 80098a8:	bf3a      	itte	cc
 80098aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80098ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80098b2:	2300      	movcs	r3, #0
 80098b4:	380b      	subs	r0, #11
 80098b6:	d012      	beq.n	80098de <__b2d+0x8a>
 80098b8:	f1c0 0120 	rsb	r1, r0, #32
 80098bc:	fa23 f401 	lsr.w	r4, r3, r1
 80098c0:	4082      	lsls	r2, r0
 80098c2:	4322      	orrs	r2, r4
 80098c4:	4547      	cmp	r7, r8
 80098c6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80098ca:	bf8c      	ite	hi
 80098cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80098d0:	2200      	movls	r2, #0
 80098d2:	4083      	lsls	r3, r0
 80098d4:	40ca      	lsrs	r2, r1
 80098d6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80098da:	4313      	orrs	r3, r2
 80098dc:	e7de      	b.n	800989c <__b2d+0x48>
 80098de:	ea42 0501 	orr.w	r5, r2, r1
 80098e2:	e7db      	b.n	800989c <__b2d+0x48>
 80098e4:	3ff00000 	.word	0x3ff00000

080098e8 <__d2b>:
 80098e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80098ec:	460f      	mov	r7, r1
 80098ee:	2101      	movs	r1, #1
 80098f0:	ec59 8b10 	vmov	r8, r9, d0
 80098f4:	4616      	mov	r6, r2
 80098f6:	f7ff fc1b 	bl	8009130 <_Balloc>
 80098fa:	4604      	mov	r4, r0
 80098fc:	b930      	cbnz	r0, 800990c <__d2b+0x24>
 80098fe:	4602      	mov	r2, r0
 8009900:	4b24      	ldr	r3, [pc, #144]	; (8009994 <__d2b+0xac>)
 8009902:	4825      	ldr	r0, [pc, #148]	; (8009998 <__d2b+0xb0>)
 8009904:	f240 310f 	movw	r1, #783	; 0x30f
 8009908:	f001 f96a 	bl	800abe0 <__assert_func>
 800990c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009914:	bb2d      	cbnz	r5, 8009962 <__d2b+0x7a>
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	f1b8 0300 	subs.w	r3, r8, #0
 800991c:	d026      	beq.n	800996c <__d2b+0x84>
 800991e:	4668      	mov	r0, sp
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	f7ff fd17 	bl	8009354 <__lo0bits>
 8009926:	e9dd 1200 	ldrd	r1, r2, [sp]
 800992a:	b1e8      	cbz	r0, 8009968 <__d2b+0x80>
 800992c:	f1c0 0320 	rsb	r3, r0, #32
 8009930:	fa02 f303 	lsl.w	r3, r2, r3
 8009934:	430b      	orrs	r3, r1
 8009936:	40c2      	lsrs	r2, r0
 8009938:	6163      	str	r3, [r4, #20]
 800993a:	9201      	str	r2, [sp, #4]
 800993c:	9b01      	ldr	r3, [sp, #4]
 800993e:	61a3      	str	r3, [r4, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	bf14      	ite	ne
 8009944:	2202      	movne	r2, #2
 8009946:	2201      	moveq	r2, #1
 8009948:	6122      	str	r2, [r4, #16]
 800994a:	b1bd      	cbz	r5, 800997c <__d2b+0x94>
 800994c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009950:	4405      	add	r5, r0
 8009952:	603d      	str	r5, [r7, #0]
 8009954:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009958:	6030      	str	r0, [r6, #0]
 800995a:	4620      	mov	r0, r4
 800995c:	b003      	add	sp, #12
 800995e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009966:	e7d6      	b.n	8009916 <__d2b+0x2e>
 8009968:	6161      	str	r1, [r4, #20]
 800996a:	e7e7      	b.n	800993c <__d2b+0x54>
 800996c:	a801      	add	r0, sp, #4
 800996e:	f7ff fcf1 	bl	8009354 <__lo0bits>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	6163      	str	r3, [r4, #20]
 8009976:	3020      	adds	r0, #32
 8009978:	2201      	movs	r2, #1
 800997a:	e7e5      	b.n	8009948 <__d2b+0x60>
 800997c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009984:	6038      	str	r0, [r7, #0]
 8009986:	6918      	ldr	r0, [r3, #16]
 8009988:	f7ff fcc4 	bl	8009314 <__hi0bits>
 800998c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009990:	e7e2      	b.n	8009958 <__d2b+0x70>
 8009992:	bf00      	nop
 8009994:	0800bcc5 	.word	0x0800bcc5
 8009998:	0800bcd6 	.word	0x0800bcd6

0800999c <__ratio>:
 800999c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	4688      	mov	r8, r1
 80099a2:	4669      	mov	r1, sp
 80099a4:	4681      	mov	r9, r0
 80099a6:	f7ff ff55 	bl	8009854 <__b2d>
 80099aa:	a901      	add	r1, sp, #4
 80099ac:	4640      	mov	r0, r8
 80099ae:	ec55 4b10 	vmov	r4, r5, d0
 80099b2:	ee10 aa10 	vmov	sl, s0
 80099b6:	f7ff ff4d 	bl	8009854 <__b2d>
 80099ba:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80099be:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80099c2:	1ad2      	subs	r2, r2, r3
 80099c4:	e9dd 3100 	ldrd	r3, r1, [sp]
 80099c8:	1a5b      	subs	r3, r3, r1
 80099ca:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80099ce:	ec57 6b10 	vmov	r6, r7, d0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bfd6      	itet	le
 80099d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80099da:	462a      	movgt	r2, r5
 80099dc:	463a      	movle	r2, r7
 80099de:	46ab      	mov	fp, r5
 80099e0:	bfd6      	itet	le
 80099e2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80099e6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80099ea:	ee00 3a90 	vmovle	s1, r3
 80099ee:	ec4b ab17 	vmov	d7, sl, fp
 80099f2:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80099f6:	b003      	add	sp, #12
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099fc <__copybits>:
 80099fc:	3901      	subs	r1, #1
 80099fe:	b570      	push	{r4, r5, r6, lr}
 8009a00:	1149      	asrs	r1, r1, #5
 8009a02:	6914      	ldr	r4, [r2, #16]
 8009a04:	3101      	adds	r1, #1
 8009a06:	f102 0314 	add.w	r3, r2, #20
 8009a0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a12:	1f05      	subs	r5, r0, #4
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d30c      	bcc.n	8009a32 <__copybits+0x36>
 8009a18:	1aa3      	subs	r3, r4, r2
 8009a1a:	3b11      	subs	r3, #17
 8009a1c:	f023 0303 	bic.w	r3, r3, #3
 8009a20:	3211      	adds	r2, #17
 8009a22:	42a2      	cmp	r2, r4
 8009a24:	bf88      	it	hi
 8009a26:	2300      	movhi	r3, #0
 8009a28:	4418      	add	r0, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4288      	cmp	r0, r1
 8009a2e:	d305      	bcc.n	8009a3c <__copybits+0x40>
 8009a30:	bd70      	pop	{r4, r5, r6, pc}
 8009a32:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a36:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a3a:	e7eb      	b.n	8009a14 <__copybits+0x18>
 8009a3c:	f840 3b04 	str.w	r3, [r0], #4
 8009a40:	e7f4      	b.n	8009a2c <__copybits+0x30>

08009a42 <__any_on>:
 8009a42:	f100 0214 	add.w	r2, r0, #20
 8009a46:	6900      	ldr	r0, [r0, #16]
 8009a48:	114b      	asrs	r3, r1, #5
 8009a4a:	4298      	cmp	r0, r3
 8009a4c:	b510      	push	{r4, lr}
 8009a4e:	db11      	blt.n	8009a74 <__any_on+0x32>
 8009a50:	dd0a      	ble.n	8009a68 <__any_on+0x26>
 8009a52:	f011 011f 	ands.w	r1, r1, #31
 8009a56:	d007      	beq.n	8009a68 <__any_on+0x26>
 8009a58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009a5c:	fa24 f001 	lsr.w	r0, r4, r1
 8009a60:	fa00 f101 	lsl.w	r1, r0, r1
 8009a64:	428c      	cmp	r4, r1
 8009a66:	d10b      	bne.n	8009a80 <__any_on+0x3e>
 8009a68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d803      	bhi.n	8009a78 <__any_on+0x36>
 8009a70:	2000      	movs	r0, #0
 8009a72:	bd10      	pop	{r4, pc}
 8009a74:	4603      	mov	r3, r0
 8009a76:	e7f7      	b.n	8009a68 <__any_on+0x26>
 8009a78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	d0f5      	beq.n	8009a6c <__any_on+0x2a>
 8009a80:	2001      	movs	r0, #1
 8009a82:	e7f6      	b.n	8009a72 <__any_on+0x30>

08009a84 <sulp>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	4604      	mov	r4, r0
 8009a88:	460d      	mov	r5, r1
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	ec45 4b10 	vmov	d0, r4, r5
 8009a90:	f7ff feba 	bl	8009808 <__ulp>
 8009a94:	b17e      	cbz	r6, 8009ab6 <sulp+0x32>
 8009a96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	dd09      	ble.n	8009ab6 <sulp+0x32>
 8009aa2:	051b      	lsls	r3, r3, #20
 8009aa4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009aae:	ec41 0b17 	vmov	d7, r0, r1
 8009ab2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}

08009ab8 <_strtod_l>:
 8009ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	ed2d 8b0e 	vpush	{d8-d14}
 8009ac0:	b097      	sub	sp, #92	; 0x5c
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	920d      	str	r2, [sp, #52]	; 0x34
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	9212      	str	r2, [sp, #72]	; 0x48
 8009aca:	468a      	mov	sl, r1
 8009acc:	f04f 0800 	mov.w	r8, #0
 8009ad0:	f04f 0900 	mov.w	r9, #0
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	9211      	str	r2, [sp, #68]	; 0x44
 8009ad8:	7811      	ldrb	r1, [r2, #0]
 8009ada:	292b      	cmp	r1, #43	; 0x2b
 8009adc:	d04c      	beq.n	8009b78 <_strtod_l+0xc0>
 8009ade:	d839      	bhi.n	8009b54 <_strtod_l+0x9c>
 8009ae0:	290d      	cmp	r1, #13
 8009ae2:	d833      	bhi.n	8009b4c <_strtod_l+0x94>
 8009ae4:	2908      	cmp	r1, #8
 8009ae6:	d833      	bhi.n	8009b50 <_strtod_l+0x98>
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	d03c      	beq.n	8009b66 <_strtod_l+0xae>
 8009aec:	2200      	movs	r2, #0
 8009aee:	9208      	str	r2, [sp, #32]
 8009af0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8009af2:	7832      	ldrb	r2, [r6, #0]
 8009af4:	2a30      	cmp	r2, #48	; 0x30
 8009af6:	f040 80b8 	bne.w	8009c6a <_strtod_l+0x1b2>
 8009afa:	7872      	ldrb	r2, [r6, #1]
 8009afc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009b00:	2a58      	cmp	r2, #88	; 0x58
 8009b02:	d170      	bne.n	8009be6 <_strtod_l+0x12e>
 8009b04:	9302      	str	r3, [sp, #8]
 8009b06:	9b08      	ldr	r3, [sp, #32]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	ab12      	add	r3, sp, #72	; 0x48
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4a91      	ldr	r2, [pc, #580]	; (8009d54 <_strtod_l+0x29c>)
 8009b10:	ab13      	add	r3, sp, #76	; 0x4c
 8009b12:	a911      	add	r1, sp, #68	; 0x44
 8009b14:	4620      	mov	r0, r4
 8009b16:	f001 f8ff 	bl	800ad18 <__gethex>
 8009b1a:	f010 070f 	ands.w	r7, r0, #15
 8009b1e:	4605      	mov	r5, r0
 8009b20:	d005      	beq.n	8009b2e <_strtod_l+0x76>
 8009b22:	2f06      	cmp	r7, #6
 8009b24:	d12a      	bne.n	8009b7c <_strtod_l+0xc4>
 8009b26:	3601      	adds	r6, #1
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9611      	str	r6, [sp, #68]	; 0x44
 8009b2c:	9308      	str	r3, [sp, #32]
 8009b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f040 8555 	bne.w	800a5e0 <_strtod_l+0xb28>
 8009b36:	9b08      	ldr	r3, [sp, #32]
 8009b38:	ec49 8b10 	vmov	d0, r8, r9
 8009b3c:	b1cb      	cbz	r3, 8009b72 <_strtod_l+0xba>
 8009b3e:	eeb1 0b40 	vneg.f64	d0, d0
 8009b42:	b017      	add	sp, #92	; 0x5c
 8009b44:	ecbd 8b0e 	vpop	{d8-d14}
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	2920      	cmp	r1, #32
 8009b4e:	d1cd      	bne.n	8009aec <_strtod_l+0x34>
 8009b50:	3201      	adds	r2, #1
 8009b52:	e7c0      	b.n	8009ad6 <_strtod_l+0x1e>
 8009b54:	292d      	cmp	r1, #45	; 0x2d
 8009b56:	d1c9      	bne.n	8009aec <_strtod_l+0x34>
 8009b58:	2101      	movs	r1, #1
 8009b5a:	9108      	str	r1, [sp, #32]
 8009b5c:	1c51      	adds	r1, r2, #1
 8009b5e:	9111      	str	r1, [sp, #68]	; 0x44
 8009b60:	7852      	ldrb	r2, [r2, #1]
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	d1c4      	bne.n	8009af0 <_strtod_l+0x38>
 8009b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b68:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 8535 	bne.w	800a5dc <_strtod_l+0xb24>
 8009b72:	ec49 8b10 	vmov	d0, r8, r9
 8009b76:	e7e4      	b.n	8009b42 <_strtod_l+0x8a>
 8009b78:	2100      	movs	r1, #0
 8009b7a:	e7ee      	b.n	8009b5a <_strtod_l+0xa2>
 8009b7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b7e:	b13a      	cbz	r2, 8009b90 <_strtod_l+0xd8>
 8009b80:	2135      	movs	r1, #53	; 0x35
 8009b82:	a814      	add	r0, sp, #80	; 0x50
 8009b84:	f7ff ff3a 	bl	80099fc <__copybits>
 8009b88:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7ff fb10 	bl	80091b0 <_Bfree>
 8009b90:	1e7b      	subs	r3, r7, #1
 8009b92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d806      	bhi.n	8009ba6 <_strtod_l+0xee>
 8009b98:	e8df f003 	tbb	[pc, r3]
 8009b9c:	201d0314 	.word	0x201d0314
 8009ba0:	14          	.byte	0x14
 8009ba1:	00          	.byte	0x00
 8009ba2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8009ba6:	05eb      	lsls	r3, r5, #23
 8009ba8:	bf48      	it	mi
 8009baa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009bae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bb2:	0d1b      	lsrs	r3, r3, #20
 8009bb4:	051b      	lsls	r3, r3, #20
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1b9      	bne.n	8009b2e <_strtod_l+0x76>
 8009bba:	f7fe fb8f 	bl	80082dc <__errno>
 8009bbe:	2322      	movs	r3, #34	; 0x22
 8009bc0:	6003      	str	r3, [r0, #0]
 8009bc2:	e7b4      	b.n	8009b2e <_strtod_l+0x76>
 8009bc4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8009bc8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009bcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bd0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009bd4:	e7e7      	b.n	8009ba6 <_strtod_l+0xee>
 8009bd6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8009d5c <_strtod_l+0x2a4>
 8009bda:	e7e4      	b.n	8009ba6 <_strtod_l+0xee>
 8009bdc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009be0:	f04f 38ff 	mov.w	r8, #4294967295
 8009be4:	e7df      	b.n	8009ba6 <_strtod_l+0xee>
 8009be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	9211      	str	r2, [sp, #68]	; 0x44
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b30      	cmp	r3, #48	; 0x30
 8009bf0:	d0f9      	beq.n	8009be6 <_strtod_l+0x12e>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d09b      	beq.n	8009b2e <_strtod_l+0x76>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	9306      	str	r3, [sp, #24]
 8009bfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	9307      	str	r3, [sp, #28]
 8009c04:	461e      	mov	r6, r3
 8009c06:	220a      	movs	r2, #10
 8009c08:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009c0a:	7805      	ldrb	r5, [r0, #0]
 8009c0c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009c10:	b2d9      	uxtb	r1, r3
 8009c12:	2909      	cmp	r1, #9
 8009c14:	d92b      	bls.n	8009c6e <_strtod_l+0x1b6>
 8009c16:	4950      	ldr	r1, [pc, #320]	; (8009d58 <_strtod_l+0x2a0>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f000 ffa9 	bl	800ab70 <strncmp>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d035      	beq.n	8009c8e <_strtod_l+0x1d6>
 8009c22:	2000      	movs	r0, #0
 8009c24:	462a      	mov	r2, r5
 8009c26:	4633      	mov	r3, r6
 8009c28:	4683      	mov	fp, r0
 8009c2a:	4601      	mov	r1, r0
 8009c2c:	2a65      	cmp	r2, #101	; 0x65
 8009c2e:	d001      	beq.n	8009c34 <_strtod_l+0x17c>
 8009c30:	2a45      	cmp	r2, #69	; 0x45
 8009c32:	d118      	bne.n	8009c66 <_strtod_l+0x1ae>
 8009c34:	b91b      	cbnz	r3, 8009c3e <_strtod_l+0x186>
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	4303      	orrs	r3, r0
 8009c3a:	d094      	beq.n	8009b66 <_strtod_l+0xae>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009c42:	f10a 0201 	add.w	r2, sl, #1
 8009c46:	9211      	str	r2, [sp, #68]	; 0x44
 8009c48:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8009c4c:	2a2b      	cmp	r2, #43	; 0x2b
 8009c4e:	d075      	beq.n	8009d3c <_strtod_l+0x284>
 8009c50:	2a2d      	cmp	r2, #45	; 0x2d
 8009c52:	d07b      	beq.n	8009d4c <_strtod_l+0x294>
 8009c54:	f04f 0e00 	mov.w	lr, #0
 8009c58:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8009c5c:	2d09      	cmp	r5, #9
 8009c5e:	f240 8083 	bls.w	8009d68 <_strtod_l+0x2b0>
 8009c62:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8009c66:	2500      	movs	r5, #0
 8009c68:	e09e      	b.n	8009da8 <_strtod_l+0x2f0>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	e7c4      	b.n	8009bf8 <_strtod_l+0x140>
 8009c6e:	2e08      	cmp	r6, #8
 8009c70:	bfd5      	itete	le
 8009c72:	9907      	ldrle	r1, [sp, #28]
 8009c74:	9905      	ldrgt	r1, [sp, #20]
 8009c76:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c7a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009c7e:	f100 0001 	add.w	r0, r0, #1
 8009c82:	bfd4      	ite	le
 8009c84:	9307      	strle	r3, [sp, #28]
 8009c86:	9305      	strgt	r3, [sp, #20]
 8009c88:	3601      	adds	r6, #1
 8009c8a:	9011      	str	r0, [sp, #68]	; 0x44
 8009c8c:	e7bc      	b.n	8009c08 <_strtod_l+0x150>
 8009c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	9211      	str	r2, [sp, #68]	; 0x44
 8009c94:	785a      	ldrb	r2, [r3, #1]
 8009c96:	b3ae      	cbz	r6, 8009d04 <_strtod_l+0x24c>
 8009c98:	4683      	mov	fp, r0
 8009c9a:	4633      	mov	r3, r6
 8009c9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ca0:	2909      	cmp	r1, #9
 8009ca2:	d912      	bls.n	8009cca <_strtod_l+0x212>
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	e7c1      	b.n	8009c2c <_strtod_l+0x174>
 8009ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	9211      	str	r2, [sp, #68]	; 0x44
 8009cae:	785a      	ldrb	r2, [r3, #1]
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	2a30      	cmp	r2, #48	; 0x30
 8009cb4:	d0f8      	beq.n	8009ca8 <_strtod_l+0x1f0>
 8009cb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009cba:	2b08      	cmp	r3, #8
 8009cbc:	f200 8495 	bhi.w	800a5ea <_strtod_l+0xb32>
 8009cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc4:	4683      	mov	fp, r0
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	4603      	mov	r3, r0
 8009cca:	3a30      	subs	r2, #48	; 0x30
 8009ccc:	f100 0101 	add.w	r1, r0, #1
 8009cd0:	d012      	beq.n	8009cf8 <_strtod_l+0x240>
 8009cd2:	448b      	add	fp, r1
 8009cd4:	eb00 0c03 	add.w	ip, r0, r3
 8009cd8:	4619      	mov	r1, r3
 8009cda:	250a      	movs	r5, #10
 8009cdc:	4561      	cmp	r1, ip
 8009cde:	d113      	bne.n	8009d08 <_strtod_l+0x250>
 8009ce0:	1819      	adds	r1, r3, r0
 8009ce2:	2908      	cmp	r1, #8
 8009ce4:	f103 0301 	add.w	r3, r3, #1
 8009ce8:	4403      	add	r3, r0
 8009cea:	dc1b      	bgt.n	8009d24 <_strtod_l+0x26c>
 8009cec:	9807      	ldr	r0, [sp, #28]
 8009cee:	210a      	movs	r1, #10
 8009cf0:	fb01 2200 	mla	r2, r1, r0, r2
 8009cf4:	9207      	str	r2, [sp, #28]
 8009cf6:	2100      	movs	r1, #0
 8009cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009cfa:	1c50      	adds	r0, r2, #1
 8009cfc:	9011      	str	r0, [sp, #68]	; 0x44
 8009cfe:	7852      	ldrb	r2, [r2, #1]
 8009d00:	4608      	mov	r0, r1
 8009d02:	e7cb      	b.n	8009c9c <_strtod_l+0x1e4>
 8009d04:	4630      	mov	r0, r6
 8009d06:	e7d4      	b.n	8009cb2 <_strtod_l+0x1fa>
 8009d08:	2908      	cmp	r1, #8
 8009d0a:	f101 0101 	add.w	r1, r1, #1
 8009d0e:	dc03      	bgt.n	8009d18 <_strtod_l+0x260>
 8009d10:	9f07      	ldr	r7, [sp, #28]
 8009d12:	436f      	muls	r7, r5
 8009d14:	9707      	str	r7, [sp, #28]
 8009d16:	e7e1      	b.n	8009cdc <_strtod_l+0x224>
 8009d18:	2910      	cmp	r1, #16
 8009d1a:	bfde      	ittt	le
 8009d1c:	9f05      	ldrle	r7, [sp, #20]
 8009d1e:	436f      	mulle	r7, r5
 8009d20:	9705      	strle	r7, [sp, #20]
 8009d22:	e7db      	b.n	8009cdc <_strtod_l+0x224>
 8009d24:	2b10      	cmp	r3, #16
 8009d26:	bfdf      	itttt	le
 8009d28:	9805      	ldrle	r0, [sp, #20]
 8009d2a:	210a      	movle	r1, #10
 8009d2c:	fb01 2200 	mlale	r2, r1, r0, r2
 8009d30:	9205      	strle	r2, [sp, #20]
 8009d32:	e7e0      	b.n	8009cf6 <_strtod_l+0x23e>
 8009d34:	f04f 0b00 	mov.w	fp, #0
 8009d38:	2101      	movs	r1, #1
 8009d3a:	e77c      	b.n	8009c36 <_strtod_l+0x17e>
 8009d3c:	f04f 0e00 	mov.w	lr, #0
 8009d40:	f10a 0202 	add.w	r2, sl, #2
 8009d44:	9211      	str	r2, [sp, #68]	; 0x44
 8009d46:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8009d4a:	e785      	b.n	8009c58 <_strtod_l+0x1a0>
 8009d4c:	f04f 0e01 	mov.w	lr, #1
 8009d50:	e7f6      	b.n	8009d40 <_strtod_l+0x288>
 8009d52:	bf00      	nop
 8009d54:	0800be30 	.word	0x0800be30
 8009d58:	0800be2c 	.word	0x0800be2c
 8009d5c:	7ff00000 	.word	0x7ff00000
 8009d60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d62:	1c55      	adds	r5, r2, #1
 8009d64:	9511      	str	r5, [sp, #68]	; 0x44
 8009d66:	7852      	ldrb	r2, [r2, #1]
 8009d68:	2a30      	cmp	r2, #48	; 0x30
 8009d6a:	d0f9      	beq.n	8009d60 <_strtod_l+0x2a8>
 8009d6c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009d70:	2d08      	cmp	r5, #8
 8009d72:	f63f af78 	bhi.w	8009c66 <_strtod_l+0x1ae>
 8009d76:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009d7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d80:	1c55      	adds	r5, r2, #1
 8009d82:	9511      	str	r5, [sp, #68]	; 0x44
 8009d84:	7852      	ldrb	r2, [r2, #1]
 8009d86:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009d8a:	2f09      	cmp	r7, #9
 8009d8c:	d937      	bls.n	8009dfe <_strtod_l+0x346>
 8009d8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009d90:	1bed      	subs	r5, r5, r7
 8009d92:	2d08      	cmp	r5, #8
 8009d94:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009d98:	dc02      	bgt.n	8009da0 <_strtod_l+0x2e8>
 8009d9a:	4565      	cmp	r5, ip
 8009d9c:	bfa8      	it	ge
 8009d9e:	4665      	movge	r5, ip
 8009da0:	f1be 0f00 	cmp.w	lr, #0
 8009da4:	d000      	beq.n	8009da8 <_strtod_l+0x2f0>
 8009da6:	426d      	negs	r5, r5
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d14d      	bne.n	8009e48 <_strtod_l+0x390>
 8009dac:	9b06      	ldr	r3, [sp, #24]
 8009dae:	4303      	orrs	r3, r0
 8009db0:	f47f aebd 	bne.w	8009b2e <_strtod_l+0x76>
 8009db4:	2900      	cmp	r1, #0
 8009db6:	f47f aed6 	bne.w	8009b66 <_strtod_l+0xae>
 8009dba:	2a69      	cmp	r2, #105	; 0x69
 8009dbc:	d027      	beq.n	8009e0e <_strtod_l+0x356>
 8009dbe:	dc24      	bgt.n	8009e0a <_strtod_l+0x352>
 8009dc0:	2a49      	cmp	r2, #73	; 0x49
 8009dc2:	d024      	beq.n	8009e0e <_strtod_l+0x356>
 8009dc4:	2a4e      	cmp	r2, #78	; 0x4e
 8009dc6:	f47f aece 	bne.w	8009b66 <_strtod_l+0xae>
 8009dca:	4995      	ldr	r1, [pc, #596]	; (800a020 <_strtod_l+0x568>)
 8009dcc:	a811      	add	r0, sp, #68	; 0x44
 8009dce:	f001 f9e3 	bl	800b198 <__match>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f43f aec7 	beq.w	8009b66 <_strtod_l+0xae>
 8009dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b28      	cmp	r3, #40	; 0x28
 8009dde:	d12d      	bne.n	8009e3c <_strtod_l+0x384>
 8009de0:	4990      	ldr	r1, [pc, #576]	; (800a024 <_strtod_l+0x56c>)
 8009de2:	aa14      	add	r2, sp, #80	; 0x50
 8009de4:	a811      	add	r0, sp, #68	; 0x44
 8009de6:	f001 f9eb 	bl	800b1c0 <__hexnan>
 8009dea:	2805      	cmp	r0, #5
 8009dec:	d126      	bne.n	8009e3c <_strtod_l+0x384>
 8009dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009df0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009df4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009df8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009dfc:	e697      	b.n	8009b2e <_strtod_l+0x76>
 8009dfe:	250a      	movs	r5, #10
 8009e00:	fb05 2c0c 	mla	ip, r5, ip, r2
 8009e04:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009e08:	e7b9      	b.n	8009d7e <_strtod_l+0x2c6>
 8009e0a:	2a6e      	cmp	r2, #110	; 0x6e
 8009e0c:	e7db      	b.n	8009dc6 <_strtod_l+0x30e>
 8009e0e:	4986      	ldr	r1, [pc, #536]	; (800a028 <_strtod_l+0x570>)
 8009e10:	a811      	add	r0, sp, #68	; 0x44
 8009e12:	f001 f9c1 	bl	800b198 <__match>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f aea5 	beq.w	8009b66 <_strtod_l+0xae>
 8009e1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e1e:	4983      	ldr	r1, [pc, #524]	; (800a02c <_strtod_l+0x574>)
 8009e20:	3b01      	subs	r3, #1
 8009e22:	a811      	add	r0, sp, #68	; 0x44
 8009e24:	9311      	str	r3, [sp, #68]	; 0x44
 8009e26:	f001 f9b7 	bl	800b198 <__match>
 8009e2a:	b910      	cbnz	r0, 8009e32 <_strtod_l+0x37a>
 8009e2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e2e:	3301      	adds	r3, #1
 8009e30:	9311      	str	r3, [sp, #68]	; 0x44
 8009e32:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800a040 <_strtod_l+0x588>
 8009e36:	f04f 0800 	mov.w	r8, #0
 8009e3a:	e678      	b.n	8009b2e <_strtod_l+0x76>
 8009e3c:	487c      	ldr	r0, [pc, #496]	; (800a030 <_strtod_l+0x578>)
 8009e3e:	f000 fec7 	bl	800abd0 <nan>
 8009e42:	ec59 8b10 	vmov	r8, r9, d0
 8009e46:	e672      	b.n	8009b2e <_strtod_l+0x76>
 8009e48:	eddd 7a07 	vldr	s15, [sp, #28]
 8009e4c:	eba5 020b 	sub.w	r2, r5, fp
 8009e50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e54:	2e00      	cmp	r6, #0
 8009e56:	bf08      	it	eq
 8009e58:	461e      	moveq	r6, r3
 8009e5a:	2b10      	cmp	r3, #16
 8009e5c:	9206      	str	r2, [sp, #24]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	bfa8      	it	ge
 8009e62:	2210      	movge	r2, #16
 8009e64:	2b09      	cmp	r3, #9
 8009e66:	ec59 8b17 	vmov	r8, r9, d7
 8009e6a:	dd0c      	ble.n	8009e86 <_strtod_l+0x3ce>
 8009e6c:	4971      	ldr	r1, [pc, #452]	; (800a034 <_strtod_l+0x57c>)
 8009e6e:	eddd 6a05 	vldr	s13, [sp, #20]
 8009e72:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009e76:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009e7a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009e7e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009e82:	ec59 8b16 	vmov	r8, r9, d6
 8009e86:	2b0f      	cmp	r3, #15
 8009e88:	dc37      	bgt.n	8009efa <_strtod_l+0x442>
 8009e8a:	9906      	ldr	r1, [sp, #24]
 8009e8c:	2900      	cmp	r1, #0
 8009e8e:	f43f ae4e 	beq.w	8009b2e <_strtod_l+0x76>
 8009e92:	dd23      	ble.n	8009edc <_strtod_l+0x424>
 8009e94:	2916      	cmp	r1, #22
 8009e96:	dc0b      	bgt.n	8009eb0 <_strtod_l+0x3f8>
 8009e98:	4b66      	ldr	r3, [pc, #408]	; (800a034 <_strtod_l+0x57c>)
 8009e9a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009e9e:	ed93 7b00 	vldr	d7, [r3]
 8009ea2:	ec49 8b16 	vmov	d6, r8, r9
 8009ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009eaa:	ec59 8b17 	vmov	r8, r9, d7
 8009eae:	e63e      	b.n	8009b2e <_strtod_l+0x76>
 8009eb0:	9806      	ldr	r0, [sp, #24]
 8009eb2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8009eb6:	4281      	cmp	r1, r0
 8009eb8:	db1f      	blt.n	8009efa <_strtod_l+0x442>
 8009eba:	4a5e      	ldr	r2, [pc, #376]	; (800a034 <_strtod_l+0x57c>)
 8009ebc:	f1c3 030f 	rsb	r3, r3, #15
 8009ec0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009ec4:	ed91 7b00 	vldr	d7, [r1]
 8009ec8:	ec49 8b16 	vmov	d6, r8, r9
 8009ecc:	1ac3      	subs	r3, r0, r3
 8009ece:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009ed2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ed6:	ed92 6b00 	vldr	d6, [r2]
 8009eda:	e7e4      	b.n	8009ea6 <_strtod_l+0x3ee>
 8009edc:	9906      	ldr	r1, [sp, #24]
 8009ede:	3116      	adds	r1, #22
 8009ee0:	db0b      	blt.n	8009efa <_strtod_l+0x442>
 8009ee2:	4b54      	ldr	r3, [pc, #336]	; (800a034 <_strtod_l+0x57c>)
 8009ee4:	ebab 0505 	sub.w	r5, fp, r5
 8009ee8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009eec:	ed95 7b00 	vldr	d7, [r5]
 8009ef0:	ec49 8b16 	vmov	d6, r8, r9
 8009ef4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ef8:	e7d7      	b.n	8009eaa <_strtod_l+0x3f2>
 8009efa:	9906      	ldr	r1, [sp, #24]
 8009efc:	1a9a      	subs	r2, r3, r2
 8009efe:	440a      	add	r2, r1
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	dd6e      	ble.n	8009fe2 <_strtod_l+0x52a>
 8009f04:	f012 000f 	ands.w	r0, r2, #15
 8009f08:	d00a      	beq.n	8009f20 <_strtod_l+0x468>
 8009f0a:	494a      	ldr	r1, [pc, #296]	; (800a034 <_strtod_l+0x57c>)
 8009f0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009f10:	ed91 7b00 	vldr	d7, [r1]
 8009f14:	ec49 8b16 	vmov	d6, r8, r9
 8009f18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009f1c:	ec59 8b17 	vmov	r8, r9, d7
 8009f20:	f032 020f 	bics.w	r2, r2, #15
 8009f24:	d04e      	beq.n	8009fc4 <_strtod_l+0x50c>
 8009f26:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009f2a:	dd22      	ble.n	8009f72 <_strtod_l+0x4ba>
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	462e      	mov	r6, r5
 8009f30:	9507      	str	r5, [sp, #28]
 8009f32:	462f      	mov	r7, r5
 8009f34:	2322      	movs	r3, #34	; 0x22
 8009f36:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a040 <_strtod_l+0x588>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	f04f 0800 	mov.w	r8, #0
 8009f40:	9b07      	ldr	r3, [sp, #28]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f43f adf3 	beq.w	8009b2e <_strtod_l+0x76>
 8009f48:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f7ff f930 	bl	80091b0 <_Bfree>
 8009f50:	4639      	mov	r1, r7
 8009f52:	4620      	mov	r0, r4
 8009f54:	f7ff f92c 	bl	80091b0 <_Bfree>
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff f928 	bl	80091b0 <_Bfree>
 8009f60:	9907      	ldr	r1, [sp, #28]
 8009f62:	4620      	mov	r0, r4
 8009f64:	f7ff f924 	bl	80091b0 <_Bfree>
 8009f68:	4629      	mov	r1, r5
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f7ff f920 	bl	80091b0 <_Bfree>
 8009f70:	e5dd      	b.n	8009b2e <_strtod_l+0x76>
 8009f72:	2000      	movs	r0, #0
 8009f74:	ec49 8b17 	vmov	d7, r8, r9
 8009f78:	4f2f      	ldr	r7, [pc, #188]	; (800a038 <_strtod_l+0x580>)
 8009f7a:	1112      	asrs	r2, r2, #4
 8009f7c:	4601      	mov	r1, r0
 8009f7e:	2a01      	cmp	r2, #1
 8009f80:	dc23      	bgt.n	8009fca <_strtod_l+0x512>
 8009f82:	b108      	cbz	r0, 8009f88 <_strtod_l+0x4d0>
 8009f84:	ec59 8b17 	vmov	r8, r9, d7
 8009f88:	4a2b      	ldr	r2, [pc, #172]	; (800a038 <_strtod_l+0x580>)
 8009f8a:	482c      	ldr	r0, [pc, #176]	; (800a03c <_strtod_l+0x584>)
 8009f8c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009f90:	ed92 7b00 	vldr	d7, [r2]
 8009f94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009f98:	ec49 8b16 	vmov	d6, r8, r9
 8009f9c:	4a28      	ldr	r2, [pc, #160]	; (800a040 <_strtod_l+0x588>)
 8009f9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fa2:	ee17 1a90 	vmov	r1, s15
 8009fa6:	400a      	ands	r2, r1
 8009fa8:	4282      	cmp	r2, r0
 8009faa:	ec59 8b17 	vmov	r8, r9, d7
 8009fae:	d8bd      	bhi.n	8009f2c <_strtod_l+0x474>
 8009fb0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009fb4:	4282      	cmp	r2, r0
 8009fb6:	bf86      	itte	hi
 8009fb8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800a044 <_strtod_l+0x58c>
 8009fbc:	f04f 38ff 	movhi.w	r8, #4294967295
 8009fc0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	9205      	str	r2, [sp, #20]
 8009fc8:	e076      	b.n	800a0b8 <_strtod_l+0x600>
 8009fca:	f012 0f01 	tst.w	r2, #1
 8009fce:	d004      	beq.n	8009fda <_strtod_l+0x522>
 8009fd0:	ed97 6b00 	vldr	d6, [r7]
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fda:	3101      	adds	r1, #1
 8009fdc:	1052      	asrs	r2, r2, #1
 8009fde:	3708      	adds	r7, #8
 8009fe0:	e7cd      	b.n	8009f7e <_strtod_l+0x4c6>
 8009fe2:	d0ef      	beq.n	8009fc4 <_strtod_l+0x50c>
 8009fe4:	4252      	negs	r2, r2
 8009fe6:	f012 000f 	ands.w	r0, r2, #15
 8009fea:	d00a      	beq.n	800a002 <_strtod_l+0x54a>
 8009fec:	4911      	ldr	r1, [pc, #68]	; (800a034 <_strtod_l+0x57c>)
 8009fee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009ff2:	ed91 7b00 	vldr	d7, [r1]
 8009ff6:	ec49 8b16 	vmov	d6, r8, r9
 8009ffa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ffe:	ec59 8b17 	vmov	r8, r9, d7
 800a002:	1112      	asrs	r2, r2, #4
 800a004:	d0de      	beq.n	8009fc4 <_strtod_l+0x50c>
 800a006:	2a1f      	cmp	r2, #31
 800a008:	dd1e      	ble.n	800a048 <_strtod_l+0x590>
 800a00a:	2500      	movs	r5, #0
 800a00c:	462e      	mov	r6, r5
 800a00e:	9507      	str	r5, [sp, #28]
 800a010:	462f      	mov	r7, r5
 800a012:	2322      	movs	r3, #34	; 0x22
 800a014:	f04f 0800 	mov.w	r8, #0
 800a018:	f04f 0900 	mov.w	r9, #0
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	e78f      	b.n	8009f40 <_strtod_l+0x488>
 800a020:	0800bc1d 	.word	0x0800bc1d
 800a024:	0800be44 	.word	0x0800be44
 800a028:	0800bc15 	.word	0x0800bc15
 800a02c:	0800bc4c 	.word	0x0800bc4c
 800a030:	0800bfd5 	.word	0x0800bfd5
 800a034:	0800bd58 	.word	0x0800bd58
 800a038:	0800bd30 	.word	0x0800bd30
 800a03c:	7ca00000 	.word	0x7ca00000
 800a040:	7ff00000 	.word	0x7ff00000
 800a044:	7fefffff 	.word	0x7fefffff
 800a048:	f012 0110 	ands.w	r1, r2, #16
 800a04c:	bf18      	it	ne
 800a04e:	216a      	movne	r1, #106	; 0x6a
 800a050:	9105      	str	r1, [sp, #20]
 800a052:	ec49 8b17 	vmov	d7, r8, r9
 800a056:	49be      	ldr	r1, [pc, #760]	; (800a350 <_strtod_l+0x898>)
 800a058:	2000      	movs	r0, #0
 800a05a:	07d7      	lsls	r7, r2, #31
 800a05c:	d504      	bpl.n	800a068 <_strtod_l+0x5b0>
 800a05e:	ed91 6b00 	vldr	d6, [r1]
 800a062:	2001      	movs	r0, #1
 800a064:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a068:	1052      	asrs	r2, r2, #1
 800a06a:	f101 0108 	add.w	r1, r1, #8
 800a06e:	d1f4      	bne.n	800a05a <_strtod_l+0x5a2>
 800a070:	b108      	cbz	r0, 800a076 <_strtod_l+0x5be>
 800a072:	ec59 8b17 	vmov	r8, r9, d7
 800a076:	9a05      	ldr	r2, [sp, #20]
 800a078:	b1ba      	cbz	r2, 800a0aa <_strtod_l+0x5f2>
 800a07a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800a07e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800a082:	2a00      	cmp	r2, #0
 800a084:	4648      	mov	r0, r9
 800a086:	dd10      	ble.n	800a0aa <_strtod_l+0x5f2>
 800a088:	2a1f      	cmp	r2, #31
 800a08a:	f340 812c 	ble.w	800a2e6 <_strtod_l+0x82e>
 800a08e:	2a34      	cmp	r2, #52	; 0x34
 800a090:	bfde      	ittt	le
 800a092:	f04f 32ff 	movle.w	r2, #4294967295
 800a096:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800a09a:	408a      	lslle	r2, r1
 800a09c:	f04f 0800 	mov.w	r8, #0
 800a0a0:	bfcc      	ite	gt
 800a0a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a0a6:	ea02 0900 	andle.w	r9, r2, r0
 800a0aa:	ec49 8b17 	vmov	d7, r8, r9
 800a0ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b6:	d0a8      	beq.n	800a00a <_strtod_l+0x552>
 800a0b8:	9a07      	ldr	r2, [sp, #28]
 800a0ba:	9200      	str	r2, [sp, #0]
 800a0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0be:	4632      	mov	r2, r6
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f7ff f8dd 	bl	8009280 <__s2b>
 800a0c6:	9007      	str	r0, [sp, #28]
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f43f af2f 	beq.w	8009f2c <_strtod_l+0x474>
 800a0ce:	9a06      	ldr	r2, [sp, #24]
 800a0d0:	2a00      	cmp	r2, #0
 800a0d2:	ebab 0305 	sub.w	r3, fp, r5
 800a0d6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800a330 <_strtod_l+0x878>
 800a0da:	bfa8      	it	ge
 800a0dc:	2300      	movge	r3, #0
 800a0de:	ed9f ab96 	vldr	d10, [pc, #600]	; 800a338 <_strtod_l+0x880>
 800a0e2:	ed9f bb97 	vldr	d11, [pc, #604]	; 800a340 <_strtod_l+0x888>
 800a0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e8:	2500      	movs	r5, #0
 800a0ea:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a0ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f0:	462e      	mov	r6, r5
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	6859      	ldr	r1, [r3, #4]
 800a0f8:	f7ff f81a 	bl	8009130 <_Balloc>
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f af18 	beq.w	8009f34 <_strtod_l+0x47c>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	691a      	ldr	r2, [r3, #16]
 800a108:	3202      	adds	r2, #2
 800a10a:	f103 010c 	add.w	r1, r3, #12
 800a10e:	0092      	lsls	r2, r2, #2
 800a110:	300c      	adds	r0, #12
 800a112:	f000 fd4f 	bl	800abb4 <memcpy>
 800a116:	ec49 8b10 	vmov	d0, r8, r9
 800a11a:	aa14      	add	r2, sp, #80	; 0x50
 800a11c:	a913      	add	r1, sp, #76	; 0x4c
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff fbe2 	bl	80098e8 <__d2b>
 800a124:	ec49 8b18 	vmov	d8, r8, r9
 800a128:	9012      	str	r0, [sp, #72]	; 0x48
 800a12a:	2800      	cmp	r0, #0
 800a12c:	f43f af02 	beq.w	8009f34 <_strtod_l+0x47c>
 800a130:	2101      	movs	r1, #1
 800a132:	4620      	mov	r0, r4
 800a134:	f7ff f93c 	bl	80093b0 <__i2b>
 800a138:	4606      	mov	r6, r0
 800a13a:	2800      	cmp	r0, #0
 800a13c:	f43f aefa 	beq.w	8009f34 <_strtod_l+0x47c>
 800a140:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a142:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfab      	itete	ge
 800a148:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800a14a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800a14c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800a150:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800a154:	bfac      	ite	ge
 800a156:	eb03 0b02 	addge.w	fp, r3, r2
 800a15a:	eba2 0a03 	sublt.w	sl, r2, r3
 800a15e:	9a05      	ldr	r2, [sp, #20]
 800a160:	1a9b      	subs	r3, r3, r2
 800a162:	440b      	add	r3, r1
 800a164:	4a7b      	ldr	r2, [pc, #492]	; (800a354 <_strtod_l+0x89c>)
 800a166:	3b01      	subs	r3, #1
 800a168:	4293      	cmp	r3, r2
 800a16a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800a16e:	f280 80cd 	bge.w	800a30c <_strtod_l+0x854>
 800a172:	1ad2      	subs	r2, r2, r3
 800a174:	2a1f      	cmp	r2, #31
 800a176:	eba1 0102 	sub.w	r1, r1, r2
 800a17a:	f04f 0001 	mov.w	r0, #1
 800a17e:	f300 80b9 	bgt.w	800a2f4 <_strtod_l+0x83c>
 800a182:	fa00 f302 	lsl.w	r3, r0, r2
 800a186:	930b      	str	r3, [sp, #44]	; 0x2c
 800a188:	2300      	movs	r3, #0
 800a18a:	930a      	str	r3, [sp, #40]	; 0x28
 800a18c:	eb0b 0301 	add.w	r3, fp, r1
 800a190:	9a05      	ldr	r2, [sp, #20]
 800a192:	459b      	cmp	fp, r3
 800a194:	448a      	add	sl, r1
 800a196:	4492      	add	sl, r2
 800a198:	465a      	mov	r2, fp
 800a19a:	bfa8      	it	ge
 800a19c:	461a      	movge	r2, r3
 800a19e:	4552      	cmp	r2, sl
 800a1a0:	bfa8      	it	ge
 800a1a2:	4652      	movge	r2, sl
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	bfc2      	ittt	gt
 800a1a8:	1a9b      	subgt	r3, r3, r2
 800a1aa:	ebaa 0a02 	subgt.w	sl, sl, r2
 800a1ae:	ebab 0b02 	subgt.w	fp, fp, r2
 800a1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b4:	2a00      	cmp	r2, #0
 800a1b6:	dd18      	ble.n	800a1ea <_strtod_l+0x732>
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1be:	f7ff f9b7 	bl	8009530 <__pow5mult>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f43f aeb5 	beq.w	8009f34 <_strtod_l+0x47c>
 800a1ca:	4601      	mov	r1, r0
 800a1cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f7ff f904 	bl	80093dc <__multiply>
 800a1d4:	900e      	str	r0, [sp, #56]	; 0x38
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f43f aeac 	beq.w	8009f34 <_strtod_l+0x47c>
 800a1dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7fe ffe6 	bl	80091b0 <_Bfree>
 800a1e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1e8:	9212      	str	r2, [sp, #72]	; 0x48
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f300 8093 	bgt.w	800a316 <_strtod_l+0x85e>
 800a1f0:	9b06      	ldr	r3, [sp, #24]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd08      	ble.n	800a208 <_strtod_l+0x750>
 800a1f6:	4639      	mov	r1, r7
 800a1f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff f998 	bl	8009530 <__pow5mult>
 800a200:	4607      	mov	r7, r0
 800a202:	2800      	cmp	r0, #0
 800a204:	f43f ae96 	beq.w	8009f34 <_strtod_l+0x47c>
 800a208:	f1ba 0f00 	cmp.w	sl, #0
 800a20c:	dd08      	ble.n	800a220 <_strtod_l+0x768>
 800a20e:	4639      	mov	r1, r7
 800a210:	4652      	mov	r2, sl
 800a212:	4620      	mov	r0, r4
 800a214:	f7ff f9e6 	bl	80095e4 <__lshift>
 800a218:	4607      	mov	r7, r0
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f43f ae8a 	beq.w	8009f34 <_strtod_l+0x47c>
 800a220:	f1bb 0f00 	cmp.w	fp, #0
 800a224:	dd08      	ble.n	800a238 <_strtod_l+0x780>
 800a226:	4631      	mov	r1, r6
 800a228:	465a      	mov	r2, fp
 800a22a:	4620      	mov	r0, r4
 800a22c:	f7ff f9da 	bl	80095e4 <__lshift>
 800a230:	4606      	mov	r6, r0
 800a232:	2800      	cmp	r0, #0
 800a234:	f43f ae7e 	beq.w	8009f34 <_strtod_l+0x47c>
 800a238:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a23a:	463a      	mov	r2, r7
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7ff fa59 	bl	80096f4 <__mdiff>
 800a242:	4605      	mov	r5, r0
 800a244:	2800      	cmp	r0, #0
 800a246:	f43f ae75 	beq.w	8009f34 <_strtod_l+0x47c>
 800a24a:	2300      	movs	r3, #0
 800a24c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a250:	60c3      	str	r3, [r0, #12]
 800a252:	4631      	mov	r1, r6
 800a254:	f7ff fa32 	bl	80096bc <__mcmp>
 800a258:	2800      	cmp	r0, #0
 800a25a:	da7f      	bge.n	800a35c <_strtod_l+0x8a4>
 800a25c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800a260:	f040 80a5 	bne.w	800a3ae <_strtod_l+0x8f6>
 800a264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f040 80a0 	bne.w	800a3ae <_strtod_l+0x8f6>
 800a26e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a272:	0d1b      	lsrs	r3, r3, #20
 800a274:	051b      	lsls	r3, r3, #20
 800a276:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a27a:	f240 8098 	bls.w	800a3ae <_strtod_l+0x8f6>
 800a27e:	696b      	ldr	r3, [r5, #20]
 800a280:	b91b      	cbnz	r3, 800a28a <_strtod_l+0x7d2>
 800a282:	692b      	ldr	r3, [r5, #16]
 800a284:	2b01      	cmp	r3, #1
 800a286:	f340 8092 	ble.w	800a3ae <_strtod_l+0x8f6>
 800a28a:	4629      	mov	r1, r5
 800a28c:	2201      	movs	r2, #1
 800a28e:	4620      	mov	r0, r4
 800a290:	f7ff f9a8 	bl	80095e4 <__lshift>
 800a294:	4631      	mov	r1, r6
 800a296:	4605      	mov	r5, r0
 800a298:	f7ff fa10 	bl	80096bc <__mcmp>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	f340 8086 	ble.w	800a3ae <_strtod_l+0x8f6>
 800a2a2:	9905      	ldr	r1, [sp, #20]
 800a2a4:	4a2c      	ldr	r2, [pc, #176]	; (800a358 <_strtod_l+0x8a0>)
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	2900      	cmp	r1, #0
 800a2aa:	f000 809f 	beq.w	800a3ec <_strtod_l+0x934>
 800a2ae:	ea02 0109 	and.w	r1, r2, r9
 800a2b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a2b6:	f300 8099 	bgt.w	800a3ec <_strtod_l+0x934>
 800a2ba:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a2be:	f77f aea8 	ble.w	800a012 <_strtod_l+0x55a>
 800a2c2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800a348 <_strtod_l+0x890>
 800a2c6:	ec49 8b16 	vmov	d6, r8, r9
 800a2ca:	4b23      	ldr	r3, [pc, #140]	; (800a358 <_strtod_l+0x8a0>)
 800a2cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a2d0:	ee17 2a90 	vmov	r2, s15
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	ec59 8b17 	vmov	r8, r9, d7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f47f ae34 	bne.w	8009f48 <_strtod_l+0x490>
 800a2e0:	2322      	movs	r3, #34	; 0x22
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	e630      	b.n	8009f48 <_strtod_l+0x490>
 800a2e6:	f04f 31ff 	mov.w	r1, #4294967295
 800a2ea:	fa01 f202 	lsl.w	r2, r1, r2
 800a2ee:	ea02 0808 	and.w	r8, r2, r8
 800a2f2:	e6da      	b.n	800a0aa <_strtod_l+0x5f2>
 800a2f4:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800a2f8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a2fc:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800a300:	33e2      	adds	r3, #226	; 0xe2
 800a302:	fa00 f303 	lsl.w	r3, r0, r3
 800a306:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800a30a:	e73f      	b.n	800a18c <_strtod_l+0x6d4>
 800a30c:	2200      	movs	r2, #0
 800a30e:	2301      	movs	r3, #1
 800a310:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a314:	e73a      	b.n	800a18c <_strtod_l+0x6d4>
 800a316:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a318:	461a      	mov	r2, r3
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff f962 	bl	80095e4 <__lshift>
 800a320:	9012      	str	r0, [sp, #72]	; 0x48
 800a322:	2800      	cmp	r0, #0
 800a324:	f47f af64 	bne.w	800a1f0 <_strtod_l+0x738>
 800a328:	e604      	b.n	8009f34 <_strtod_l+0x47c>
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w
 800a330:	94a03595 	.word	0x94a03595
 800a334:	3fcfffff 	.word	0x3fcfffff
 800a338:	94a03595 	.word	0x94a03595
 800a33c:	3fdfffff 	.word	0x3fdfffff
 800a340:	35afe535 	.word	0x35afe535
 800a344:	3fe00000 	.word	0x3fe00000
 800a348:	00000000 	.word	0x00000000
 800a34c:	39500000 	.word	0x39500000
 800a350:	0800be58 	.word	0x0800be58
 800a354:	fffffc02 	.word	0xfffffc02
 800a358:	7ff00000 	.word	0x7ff00000
 800a35c:	46cb      	mov	fp, r9
 800a35e:	d15f      	bne.n	800a420 <_strtod_l+0x968>
 800a360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a364:	f1ba 0f00 	cmp.w	sl, #0
 800a368:	d02a      	beq.n	800a3c0 <_strtod_l+0x908>
 800a36a:	4aa7      	ldr	r2, [pc, #668]	; (800a608 <_strtod_l+0xb50>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d12b      	bne.n	800a3c8 <_strtod_l+0x910>
 800a370:	9b05      	ldr	r3, [sp, #20]
 800a372:	4642      	mov	r2, r8
 800a374:	b1fb      	cbz	r3, 800a3b6 <_strtod_l+0x8fe>
 800a376:	4ba5      	ldr	r3, [pc, #660]	; (800a60c <_strtod_l+0xb54>)
 800a378:	ea09 0303 	and.w	r3, r9, r3
 800a37c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a380:	f04f 31ff 	mov.w	r1, #4294967295
 800a384:	d81a      	bhi.n	800a3bc <_strtod_l+0x904>
 800a386:	0d1b      	lsrs	r3, r3, #20
 800a388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a38c:	fa01 f303 	lsl.w	r3, r1, r3
 800a390:	429a      	cmp	r2, r3
 800a392:	d119      	bne.n	800a3c8 <_strtod_l+0x910>
 800a394:	4b9e      	ldr	r3, [pc, #632]	; (800a610 <_strtod_l+0xb58>)
 800a396:	459b      	cmp	fp, r3
 800a398:	d102      	bne.n	800a3a0 <_strtod_l+0x8e8>
 800a39a:	3201      	adds	r2, #1
 800a39c:	f43f adca 	beq.w	8009f34 <_strtod_l+0x47c>
 800a3a0:	4b9a      	ldr	r3, [pc, #616]	; (800a60c <_strtod_l+0xb54>)
 800a3a2:	ea0b 0303 	and.w	r3, fp, r3
 800a3a6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a3aa:	f04f 0800 	mov.w	r8, #0
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d186      	bne.n	800a2c2 <_strtod_l+0x80a>
 800a3b4:	e5c8      	b.n	8009f48 <_strtod_l+0x490>
 800a3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ba:	e7e9      	b.n	800a390 <_strtod_l+0x8d8>
 800a3bc:	460b      	mov	r3, r1
 800a3be:	e7e7      	b.n	800a390 <_strtod_l+0x8d8>
 800a3c0:	ea53 0308 	orrs.w	r3, r3, r8
 800a3c4:	f43f af6d 	beq.w	800a2a2 <_strtod_l+0x7ea>
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ca:	b1cb      	cbz	r3, 800a400 <_strtod_l+0x948>
 800a3cc:	ea13 0f0b 	tst.w	r3, fp
 800a3d0:	d0ed      	beq.n	800a3ae <_strtod_l+0x8f6>
 800a3d2:	9a05      	ldr	r2, [sp, #20]
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	f1ba 0f00 	cmp.w	sl, #0
 800a3dc:	d014      	beq.n	800a408 <_strtod_l+0x950>
 800a3de:	f7ff fb51 	bl	8009a84 <sulp>
 800a3e2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800a3e6:	ec59 8b17 	vmov	r8, r9, d7
 800a3ea:	e7e0      	b.n	800a3ae <_strtod_l+0x8f6>
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a3f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a3f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a3fa:	f04f 38ff 	mov.w	r8, #4294967295
 800a3fe:	e7d6      	b.n	800a3ae <_strtod_l+0x8f6>
 800a400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a402:	ea13 0f08 	tst.w	r3, r8
 800a406:	e7e3      	b.n	800a3d0 <_strtod_l+0x918>
 800a408:	f7ff fb3c 	bl	8009a84 <sulp>
 800a40c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800a410:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a418:	ec59 8b10 	vmov	r8, r9, d0
 800a41c:	d1c7      	bne.n	800a3ae <_strtod_l+0x8f6>
 800a41e:	e5f8      	b.n	800a012 <_strtod_l+0x55a>
 800a420:	4631      	mov	r1, r6
 800a422:	4628      	mov	r0, r5
 800a424:	f7ff faba 	bl	800999c <__ratio>
 800a428:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a42c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a434:	d85f      	bhi.n	800a4f6 <_strtod_l+0xa3e>
 800a436:	f1ba 0f00 	cmp.w	sl, #0
 800a43a:	d166      	bne.n	800a50a <_strtod_l+0xa52>
 800a43c:	f1b8 0f00 	cmp.w	r8, #0
 800a440:	d14d      	bne.n	800a4de <_strtod_l+0xa26>
 800a442:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a446:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d162      	bne.n	800a514 <_strtod_l+0xa5c>
 800a44e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800a452:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45a:	d401      	bmi.n	800a460 <_strtod_l+0x9a8>
 800a45c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a460:	eeb1 cb4d 	vneg.f64	d12, d13
 800a464:	4869      	ldr	r0, [pc, #420]	; (800a60c <_strtod_l+0xb54>)
 800a466:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800a618 <_strtod_l+0xb60>
 800a46a:	ea0b 0100 	and.w	r1, fp, r0
 800a46e:	4561      	cmp	r1, ip
 800a470:	ec53 2b1c 	vmov	r2, r3, d12
 800a474:	d17a      	bne.n	800a56c <_strtod_l+0xab4>
 800a476:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a47a:	ec49 8b10 	vmov	d0, r8, r9
 800a47e:	910a      	str	r1, [sp, #40]	; 0x28
 800a480:	f7ff f9c2 	bl	8009808 <__ulp>
 800a484:	ec49 8b1e 	vmov	d14, r8, r9
 800a488:	4860      	ldr	r0, [pc, #384]	; (800a60c <_strtod_l+0xb54>)
 800a48a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800a48e:	ee1e 3a90 	vmov	r3, s29
 800a492:	4a60      	ldr	r2, [pc, #384]	; (800a614 <_strtod_l+0xb5c>)
 800a494:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a496:	4018      	ands	r0, r3
 800a498:	4290      	cmp	r0, r2
 800a49a:	ec59 8b1e 	vmov	r8, r9, d14
 800a49e:	d93c      	bls.n	800a51a <_strtod_l+0xa62>
 800a4a0:	ee18 2a90 	vmov	r2, s17
 800a4a4:	4b5a      	ldr	r3, [pc, #360]	; (800a610 <_strtod_l+0xb58>)
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d104      	bne.n	800a4b4 <_strtod_l+0x9fc>
 800a4aa:	ee18 3a10 	vmov	r3, s16
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	f43f ad40 	beq.w	8009f34 <_strtod_l+0x47c>
 800a4b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800a610 <_strtod_l+0xb58>
 800a4b8:	f04f 38ff 	mov.w	r8, #4294967295
 800a4bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7fe fe76 	bl	80091b0 <_Bfree>
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f7fe fe72 	bl	80091b0 <_Bfree>
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7fe fe6e 	bl	80091b0 <_Bfree>
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7fe fe6a 	bl	80091b0 <_Bfree>
 800a4dc:	e609      	b.n	800a0f2 <_strtod_l+0x63a>
 800a4de:	f1b8 0f01 	cmp.w	r8, #1
 800a4e2:	d103      	bne.n	800a4ec <_strtod_l+0xa34>
 800a4e4:	f1b9 0f00 	cmp.w	r9, #0
 800a4e8:	f43f ad93 	beq.w	800a012 <_strtod_l+0x55a>
 800a4ec:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800a4f0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a4f4:	e7b6      	b.n	800a464 <_strtod_l+0x9ac>
 800a4f6:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800a4fa:	ee20 db0d 	vmul.f64	d13, d0, d13
 800a4fe:	f1ba 0f00 	cmp.w	sl, #0
 800a502:	d0ad      	beq.n	800a460 <_strtod_l+0x9a8>
 800a504:	eeb0 cb4d 	vmov.f64	d12, d13
 800a508:	e7ac      	b.n	800a464 <_strtod_l+0x9ac>
 800a50a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800a50e:	eeb0 db4c 	vmov.f64	d13, d12
 800a512:	e7a7      	b.n	800a464 <_strtod_l+0x9ac>
 800a514:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800a518:	e7a4      	b.n	800a464 <_strtod_l+0x9ac>
 800a51a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a51e:	9b05      	ldr	r3, [sp, #20]
 800a520:	46cb      	mov	fp, r9
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1ca      	bne.n	800a4bc <_strtod_l+0xa04>
 800a526:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a52a:	0d1b      	lsrs	r3, r3, #20
 800a52c:	051b      	lsls	r3, r3, #20
 800a52e:	4299      	cmp	r1, r3
 800a530:	d1c4      	bne.n	800a4bc <_strtod_l+0xa04>
 800a532:	ec51 0b1d 	vmov	r0, r1, d13
 800a536:	f7f6 f8af 	bl	8000698 <__aeabi_d2lz>
 800a53a:	f7f6 f867 	bl	800060c <__aeabi_l2d>
 800a53e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800a542:	ec41 0b17 	vmov	d7, r0, r1
 800a546:	ea4b 0b08 	orr.w	fp, fp, r8
 800a54a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800a54e:	ee3d db47 	vsub.f64	d13, d13, d7
 800a552:	d03c      	beq.n	800a5ce <_strtod_l+0xb16>
 800a554:	eeb4 dbca 	vcmpe.f64	d13, d10
 800a558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55c:	f53f acf4 	bmi.w	8009f48 <_strtod_l+0x490>
 800a560:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	dda8      	ble.n	800a4bc <_strtod_l+0xa04>
 800a56a:	e4ed      	b.n	8009f48 <_strtod_l+0x490>
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	b1f0      	cbz	r0, 800a5ae <_strtod_l+0xaf6>
 800a570:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800a574:	d81b      	bhi.n	800a5ae <_strtod_l+0xaf6>
 800a576:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800a600 <_strtod_l+0xb48>
 800a57a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800a57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a582:	d811      	bhi.n	800a5a8 <_strtod_l+0xaf0>
 800a584:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800a588:	ee1d 3a10 	vmov	r3, s26
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	bf38      	it	cc
 800a590:	2301      	movcc	r3, #1
 800a592:	ee0d 3a10 	vmov	s26, r3
 800a596:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800a59a:	f1ba 0f00 	cmp.w	sl, #0
 800a59e:	d113      	bne.n	800a5c8 <_strtod_l+0xb10>
 800a5a0:	eeb1 7b4d 	vneg.f64	d7, d13
 800a5a4:	ec53 2b17 	vmov	r2, r3, d7
 800a5a8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800a5ac:	1a43      	subs	r3, r0, r1
 800a5ae:	eeb0 0b48 	vmov.f64	d0, d8
 800a5b2:	ec43 2b1c 	vmov	d12, r2, r3
 800a5b6:	910a      	str	r1, [sp, #40]	; 0x28
 800a5b8:	f7ff f926 	bl	8009808 <__ulp>
 800a5bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5be:	eeac 8b00 	vfma.f64	d8, d12, d0
 800a5c2:	ec59 8b18 	vmov	r8, r9, d8
 800a5c6:	e7aa      	b.n	800a51e <_strtod_l+0xa66>
 800a5c8:	eeb0 7b4d 	vmov.f64	d7, d13
 800a5cc:	e7ea      	b.n	800a5a4 <_strtod_l+0xaec>
 800a5ce:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800a5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d6:	f57f af71 	bpl.w	800a4bc <_strtod_l+0xa04>
 800a5da:	e4b5      	b.n	8009f48 <_strtod_l+0x490>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9308      	str	r3, [sp, #32]
 800a5e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	f7ff baa6 	b.w	8009b36 <_strtod_l+0x7e>
 800a5ea:	2a65      	cmp	r2, #101	; 0x65
 800a5ec:	f43f aba2 	beq.w	8009d34 <_strtod_l+0x27c>
 800a5f0:	2a45      	cmp	r2, #69	; 0x45
 800a5f2:	f43f ab9f 	beq.w	8009d34 <_strtod_l+0x27c>
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	f7ff bbd8 	b.w	8009dac <_strtod_l+0x2f4>
 800a5fc:	f3af 8000 	nop.w
 800a600:	ffc00000 	.word	0xffc00000
 800a604:	41dfffff 	.word	0x41dfffff
 800a608:	000fffff 	.word	0x000fffff
 800a60c:	7ff00000 	.word	0x7ff00000
 800a610:	7fefffff 	.word	0x7fefffff
 800a614:	7c9fffff 	.word	0x7c9fffff
 800a618:	7fe00000 	.word	0x7fe00000

0800a61c <_strtod_r>:
 800a61c:	4b01      	ldr	r3, [pc, #4]	; (800a624 <_strtod_r+0x8>)
 800a61e:	f7ff ba4b 	b.w	8009ab8 <_strtod_l>
 800a622:	bf00      	nop
 800a624:	2000006c 	.word	0x2000006c

0800a628 <_strtol_l.constprop.0>:
 800a628:	2b01      	cmp	r3, #1
 800a62a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62e:	d001      	beq.n	800a634 <_strtol_l.constprop.0+0xc>
 800a630:	2b24      	cmp	r3, #36	; 0x24
 800a632:	d906      	bls.n	800a642 <_strtol_l.constprop.0+0x1a>
 800a634:	f7fd fe52 	bl	80082dc <__errno>
 800a638:	2316      	movs	r3, #22
 800a63a:	6003      	str	r3, [r0, #0]
 800a63c:	2000      	movs	r0, #0
 800a63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a642:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a728 <_strtol_l.constprop.0+0x100>
 800a646:	460d      	mov	r5, r1
 800a648:	462e      	mov	r6, r5
 800a64a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a64e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a652:	f017 0708 	ands.w	r7, r7, #8
 800a656:	d1f7      	bne.n	800a648 <_strtol_l.constprop.0+0x20>
 800a658:	2c2d      	cmp	r4, #45	; 0x2d
 800a65a:	d132      	bne.n	800a6c2 <_strtol_l.constprop.0+0x9a>
 800a65c:	782c      	ldrb	r4, [r5, #0]
 800a65e:	2701      	movs	r7, #1
 800a660:	1cb5      	adds	r5, r6, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d05b      	beq.n	800a71e <_strtol_l.constprop.0+0xf6>
 800a666:	2b10      	cmp	r3, #16
 800a668:	d109      	bne.n	800a67e <_strtol_l.constprop.0+0x56>
 800a66a:	2c30      	cmp	r4, #48	; 0x30
 800a66c:	d107      	bne.n	800a67e <_strtol_l.constprop.0+0x56>
 800a66e:	782c      	ldrb	r4, [r5, #0]
 800a670:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a674:	2c58      	cmp	r4, #88	; 0x58
 800a676:	d14d      	bne.n	800a714 <_strtol_l.constprop.0+0xec>
 800a678:	786c      	ldrb	r4, [r5, #1]
 800a67a:	2310      	movs	r3, #16
 800a67c:	3502      	adds	r5, #2
 800a67e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a682:	f108 38ff 	add.w	r8, r8, #4294967295
 800a686:	f04f 0e00 	mov.w	lr, #0
 800a68a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a68e:	4676      	mov	r6, lr
 800a690:	fb03 8a19 	mls	sl, r3, r9, r8
 800a694:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a698:	f1bc 0f09 	cmp.w	ip, #9
 800a69c:	d816      	bhi.n	800a6cc <_strtol_l.constprop.0+0xa4>
 800a69e:	4664      	mov	r4, ip
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	dd24      	ble.n	800a6ee <_strtol_l.constprop.0+0xc6>
 800a6a4:	f1be 3fff 	cmp.w	lr, #4294967295
 800a6a8:	d008      	beq.n	800a6bc <_strtol_l.constprop.0+0x94>
 800a6aa:	45b1      	cmp	r9, r6
 800a6ac:	d31c      	bcc.n	800a6e8 <_strtol_l.constprop.0+0xc0>
 800a6ae:	d101      	bne.n	800a6b4 <_strtol_l.constprop.0+0x8c>
 800a6b0:	45a2      	cmp	sl, r4
 800a6b2:	db19      	blt.n	800a6e8 <_strtol_l.constprop.0+0xc0>
 800a6b4:	fb06 4603 	mla	r6, r6, r3, r4
 800a6b8:	f04f 0e01 	mov.w	lr, #1
 800a6bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6c0:	e7e8      	b.n	800a694 <_strtol_l.constprop.0+0x6c>
 800a6c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a6c4:	bf04      	itt	eq
 800a6c6:	782c      	ldrbeq	r4, [r5, #0]
 800a6c8:	1cb5      	addeq	r5, r6, #2
 800a6ca:	e7ca      	b.n	800a662 <_strtol_l.constprop.0+0x3a>
 800a6cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a6d0:	f1bc 0f19 	cmp.w	ip, #25
 800a6d4:	d801      	bhi.n	800a6da <_strtol_l.constprop.0+0xb2>
 800a6d6:	3c37      	subs	r4, #55	; 0x37
 800a6d8:	e7e2      	b.n	800a6a0 <_strtol_l.constprop.0+0x78>
 800a6da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a6de:	f1bc 0f19 	cmp.w	ip, #25
 800a6e2:	d804      	bhi.n	800a6ee <_strtol_l.constprop.0+0xc6>
 800a6e4:	3c57      	subs	r4, #87	; 0x57
 800a6e6:	e7db      	b.n	800a6a0 <_strtol_l.constprop.0+0x78>
 800a6e8:	f04f 3eff 	mov.w	lr, #4294967295
 800a6ec:	e7e6      	b.n	800a6bc <_strtol_l.constprop.0+0x94>
 800a6ee:	f1be 3fff 	cmp.w	lr, #4294967295
 800a6f2:	d105      	bne.n	800a700 <_strtol_l.constprop.0+0xd8>
 800a6f4:	2322      	movs	r3, #34	; 0x22
 800a6f6:	6003      	str	r3, [r0, #0]
 800a6f8:	4646      	mov	r6, r8
 800a6fa:	b942      	cbnz	r2, 800a70e <_strtol_l.constprop.0+0xe6>
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	e79e      	b.n	800a63e <_strtol_l.constprop.0+0x16>
 800a700:	b107      	cbz	r7, 800a704 <_strtol_l.constprop.0+0xdc>
 800a702:	4276      	negs	r6, r6
 800a704:	2a00      	cmp	r2, #0
 800a706:	d0f9      	beq.n	800a6fc <_strtol_l.constprop.0+0xd4>
 800a708:	f1be 0f00 	cmp.w	lr, #0
 800a70c:	d000      	beq.n	800a710 <_strtol_l.constprop.0+0xe8>
 800a70e:	1e69      	subs	r1, r5, #1
 800a710:	6011      	str	r1, [r2, #0]
 800a712:	e7f3      	b.n	800a6fc <_strtol_l.constprop.0+0xd4>
 800a714:	2430      	movs	r4, #48	; 0x30
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1b1      	bne.n	800a67e <_strtol_l.constprop.0+0x56>
 800a71a:	2308      	movs	r3, #8
 800a71c:	e7af      	b.n	800a67e <_strtol_l.constprop.0+0x56>
 800a71e:	2c30      	cmp	r4, #48	; 0x30
 800a720:	d0a5      	beq.n	800a66e <_strtol_l.constprop.0+0x46>
 800a722:	230a      	movs	r3, #10
 800a724:	e7ab      	b.n	800a67e <_strtol_l.constprop.0+0x56>
 800a726:	bf00      	nop
 800a728:	0800be81 	.word	0x0800be81

0800a72c <_strtol_r>:
 800a72c:	f7ff bf7c 	b.w	800a628 <_strtol_l.constprop.0>

0800a730 <__ssputs_r>:
 800a730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	688e      	ldr	r6, [r1, #8]
 800a736:	461f      	mov	r7, r3
 800a738:	42be      	cmp	r6, r7
 800a73a:	680b      	ldr	r3, [r1, #0]
 800a73c:	4682      	mov	sl, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	4690      	mov	r8, r2
 800a742:	d82c      	bhi.n	800a79e <__ssputs_r+0x6e>
 800a744:	898a      	ldrh	r2, [r1, #12]
 800a746:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a74a:	d026      	beq.n	800a79a <__ssputs_r+0x6a>
 800a74c:	6965      	ldr	r5, [r4, #20]
 800a74e:	6909      	ldr	r1, [r1, #16]
 800a750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a754:	eba3 0901 	sub.w	r9, r3, r1
 800a758:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a75c:	1c7b      	adds	r3, r7, #1
 800a75e:	444b      	add	r3, r9
 800a760:	106d      	asrs	r5, r5, #1
 800a762:	429d      	cmp	r5, r3
 800a764:	bf38      	it	cc
 800a766:	461d      	movcc	r5, r3
 800a768:	0553      	lsls	r3, r2, #21
 800a76a:	d527      	bpl.n	800a7bc <__ssputs_r+0x8c>
 800a76c:	4629      	mov	r1, r5
 800a76e:	f7fe fc53 	bl	8009018 <_malloc_r>
 800a772:	4606      	mov	r6, r0
 800a774:	b360      	cbz	r0, 800a7d0 <__ssputs_r+0xa0>
 800a776:	6921      	ldr	r1, [r4, #16]
 800a778:	464a      	mov	r2, r9
 800a77a:	f000 fa1b 	bl	800abb4 <memcpy>
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	6126      	str	r6, [r4, #16]
 800a78c:	6165      	str	r5, [r4, #20]
 800a78e:	444e      	add	r6, r9
 800a790:	eba5 0509 	sub.w	r5, r5, r9
 800a794:	6026      	str	r6, [r4, #0]
 800a796:	60a5      	str	r5, [r4, #8]
 800a798:	463e      	mov	r6, r7
 800a79a:	42be      	cmp	r6, r7
 800a79c:	d900      	bls.n	800a7a0 <__ssputs_r+0x70>
 800a79e:	463e      	mov	r6, r7
 800a7a0:	6820      	ldr	r0, [r4, #0]
 800a7a2:	4632      	mov	r2, r6
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	f000 f9c9 	bl	800ab3c <memmove>
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	1b9b      	subs	r3, r3, r6
 800a7ae:	60a3      	str	r3, [r4, #8]
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	4433      	add	r3, r6
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7bc:	462a      	mov	r2, r5
 800a7be:	f000 fdac 	bl	800b31a <_realloc_r>
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d1e0      	bne.n	800a78a <__ssputs_r+0x5a>
 800a7c8:	6921      	ldr	r1, [r4, #16]
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	f7fe fbb0 	bl	8008f30 <_free_r>
 800a7d0:	230c      	movs	r3, #12
 800a7d2:	f8ca 3000 	str.w	r3, [sl]
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7dc:	81a3      	strh	r3, [r4, #12]
 800a7de:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e2:	e7e9      	b.n	800a7b8 <__ssputs_r+0x88>

0800a7e4 <_svfiprintf_r>:
 800a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	898b      	ldrh	r3, [r1, #12]
 800a7ec:	061b      	lsls	r3, r3, #24
 800a7ee:	b09d      	sub	sp, #116	; 0x74
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	d50e      	bpl.n	800a816 <_svfiprintf_r+0x32>
 800a7f8:	690b      	ldr	r3, [r1, #16]
 800a7fa:	b963      	cbnz	r3, 800a816 <_svfiprintf_r+0x32>
 800a7fc:	2140      	movs	r1, #64	; 0x40
 800a7fe:	f7fe fc0b 	bl	8009018 <_malloc_r>
 800a802:	6028      	str	r0, [r5, #0]
 800a804:	6128      	str	r0, [r5, #16]
 800a806:	b920      	cbnz	r0, 800a812 <_svfiprintf_r+0x2e>
 800a808:	230c      	movs	r3, #12
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	e0d0      	b.n	800a9b4 <_svfiprintf_r+0x1d0>
 800a812:	2340      	movs	r3, #64	; 0x40
 800a814:	616b      	str	r3, [r5, #20]
 800a816:	2300      	movs	r3, #0
 800a818:	9309      	str	r3, [sp, #36]	; 0x24
 800a81a:	2320      	movs	r3, #32
 800a81c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a820:	f8cd 800c 	str.w	r8, [sp, #12]
 800a824:	2330      	movs	r3, #48	; 0x30
 800a826:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a9cc <_svfiprintf_r+0x1e8>
 800a82a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a82e:	f04f 0901 	mov.w	r9, #1
 800a832:	4623      	mov	r3, r4
 800a834:	469a      	mov	sl, r3
 800a836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a83a:	b10a      	cbz	r2, 800a840 <_svfiprintf_r+0x5c>
 800a83c:	2a25      	cmp	r2, #37	; 0x25
 800a83e:	d1f9      	bne.n	800a834 <_svfiprintf_r+0x50>
 800a840:	ebba 0b04 	subs.w	fp, sl, r4
 800a844:	d00b      	beq.n	800a85e <_svfiprintf_r+0x7a>
 800a846:	465b      	mov	r3, fp
 800a848:	4622      	mov	r2, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	4638      	mov	r0, r7
 800a84e:	f7ff ff6f 	bl	800a730 <__ssputs_r>
 800a852:	3001      	adds	r0, #1
 800a854:	f000 80a9 	beq.w	800a9aa <_svfiprintf_r+0x1c6>
 800a858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a85a:	445a      	add	r2, fp
 800a85c:	9209      	str	r2, [sp, #36]	; 0x24
 800a85e:	f89a 3000 	ldrb.w	r3, [sl]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 80a1 	beq.w	800a9aa <_svfiprintf_r+0x1c6>
 800a868:	2300      	movs	r3, #0
 800a86a:	f04f 32ff 	mov.w	r2, #4294967295
 800a86e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a872:	f10a 0a01 	add.w	sl, sl, #1
 800a876:	9304      	str	r3, [sp, #16]
 800a878:	9307      	str	r3, [sp, #28]
 800a87a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a87e:	931a      	str	r3, [sp, #104]	; 0x68
 800a880:	4654      	mov	r4, sl
 800a882:	2205      	movs	r2, #5
 800a884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a888:	4850      	ldr	r0, [pc, #320]	; (800a9cc <_svfiprintf_r+0x1e8>)
 800a88a:	f7f5 fcd9 	bl	8000240 <memchr>
 800a88e:	9a04      	ldr	r2, [sp, #16]
 800a890:	b9d8      	cbnz	r0, 800a8ca <_svfiprintf_r+0xe6>
 800a892:	06d0      	lsls	r0, r2, #27
 800a894:	bf44      	itt	mi
 800a896:	2320      	movmi	r3, #32
 800a898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a89c:	0711      	lsls	r1, r2, #28
 800a89e:	bf44      	itt	mi
 800a8a0:	232b      	movmi	r3, #43	; 0x2b
 800a8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a8aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ac:	d015      	beq.n	800a8da <_svfiprintf_r+0xf6>
 800a8ae:	9a07      	ldr	r2, [sp, #28]
 800a8b0:	4654      	mov	r4, sl
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f04f 0c0a 	mov.w	ip, #10
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8be:	3b30      	subs	r3, #48	; 0x30
 800a8c0:	2b09      	cmp	r3, #9
 800a8c2:	d94d      	bls.n	800a960 <_svfiprintf_r+0x17c>
 800a8c4:	b1b0      	cbz	r0, 800a8f4 <_svfiprintf_r+0x110>
 800a8c6:	9207      	str	r2, [sp, #28]
 800a8c8:	e014      	b.n	800a8f4 <_svfiprintf_r+0x110>
 800a8ca:	eba0 0308 	sub.w	r3, r0, r8
 800a8ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	9304      	str	r3, [sp, #16]
 800a8d6:	46a2      	mov	sl, r4
 800a8d8:	e7d2      	b.n	800a880 <_svfiprintf_r+0x9c>
 800a8da:	9b03      	ldr	r3, [sp, #12]
 800a8dc:	1d19      	adds	r1, r3, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	9103      	str	r1, [sp, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfbb      	ittet	lt
 800a8e6:	425b      	neglt	r3, r3
 800a8e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a8ec:	9307      	strge	r3, [sp, #28]
 800a8ee:	9307      	strlt	r3, [sp, #28]
 800a8f0:	bfb8      	it	lt
 800a8f2:	9204      	strlt	r2, [sp, #16]
 800a8f4:	7823      	ldrb	r3, [r4, #0]
 800a8f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8f8:	d10c      	bne.n	800a914 <_svfiprintf_r+0x130>
 800a8fa:	7863      	ldrb	r3, [r4, #1]
 800a8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a8fe:	d134      	bne.n	800a96a <_svfiprintf_r+0x186>
 800a900:	9b03      	ldr	r3, [sp, #12]
 800a902:	1d1a      	adds	r2, r3, #4
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	9203      	str	r2, [sp, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	bfb8      	it	lt
 800a90c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a910:	3402      	adds	r4, #2
 800a912:	9305      	str	r3, [sp, #20]
 800a914:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a9dc <_svfiprintf_r+0x1f8>
 800a918:	7821      	ldrb	r1, [r4, #0]
 800a91a:	2203      	movs	r2, #3
 800a91c:	4650      	mov	r0, sl
 800a91e:	f7f5 fc8f 	bl	8000240 <memchr>
 800a922:	b138      	cbz	r0, 800a934 <_svfiprintf_r+0x150>
 800a924:	9b04      	ldr	r3, [sp, #16]
 800a926:	eba0 000a 	sub.w	r0, r0, sl
 800a92a:	2240      	movs	r2, #64	; 0x40
 800a92c:	4082      	lsls	r2, r0
 800a92e:	4313      	orrs	r3, r2
 800a930:	3401      	adds	r4, #1
 800a932:	9304      	str	r3, [sp, #16]
 800a934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a938:	4825      	ldr	r0, [pc, #148]	; (800a9d0 <_svfiprintf_r+0x1ec>)
 800a93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a93e:	2206      	movs	r2, #6
 800a940:	f7f5 fc7e 	bl	8000240 <memchr>
 800a944:	2800      	cmp	r0, #0
 800a946:	d038      	beq.n	800a9ba <_svfiprintf_r+0x1d6>
 800a948:	4b22      	ldr	r3, [pc, #136]	; (800a9d4 <_svfiprintf_r+0x1f0>)
 800a94a:	bb1b      	cbnz	r3, 800a994 <_svfiprintf_r+0x1b0>
 800a94c:	9b03      	ldr	r3, [sp, #12]
 800a94e:	3307      	adds	r3, #7
 800a950:	f023 0307 	bic.w	r3, r3, #7
 800a954:	3308      	adds	r3, #8
 800a956:	9303      	str	r3, [sp, #12]
 800a958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95a:	4433      	add	r3, r6
 800a95c:	9309      	str	r3, [sp, #36]	; 0x24
 800a95e:	e768      	b.n	800a832 <_svfiprintf_r+0x4e>
 800a960:	fb0c 3202 	mla	r2, ip, r2, r3
 800a964:	460c      	mov	r4, r1
 800a966:	2001      	movs	r0, #1
 800a968:	e7a6      	b.n	800a8b8 <_svfiprintf_r+0xd4>
 800a96a:	2300      	movs	r3, #0
 800a96c:	3401      	adds	r4, #1
 800a96e:	9305      	str	r3, [sp, #20]
 800a970:	4619      	mov	r1, r3
 800a972:	f04f 0c0a 	mov.w	ip, #10
 800a976:	4620      	mov	r0, r4
 800a978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a97c:	3a30      	subs	r2, #48	; 0x30
 800a97e:	2a09      	cmp	r2, #9
 800a980:	d903      	bls.n	800a98a <_svfiprintf_r+0x1a6>
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0c6      	beq.n	800a914 <_svfiprintf_r+0x130>
 800a986:	9105      	str	r1, [sp, #20]
 800a988:	e7c4      	b.n	800a914 <_svfiprintf_r+0x130>
 800a98a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a98e:	4604      	mov	r4, r0
 800a990:	2301      	movs	r3, #1
 800a992:	e7f0      	b.n	800a976 <_svfiprintf_r+0x192>
 800a994:	ab03      	add	r3, sp, #12
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	462a      	mov	r2, r5
 800a99a:	4b0f      	ldr	r3, [pc, #60]	; (800a9d8 <_svfiprintf_r+0x1f4>)
 800a99c:	a904      	add	r1, sp, #16
 800a99e:	4638      	mov	r0, r7
 800a9a0:	f7fc fd76 	bl	8007490 <_printf_float>
 800a9a4:	1c42      	adds	r2, r0, #1
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	d1d6      	bne.n	800a958 <_svfiprintf_r+0x174>
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	065b      	lsls	r3, r3, #25
 800a9ae:	f53f af2d 	bmi.w	800a80c <_svfiprintf_r+0x28>
 800a9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9b4:	b01d      	add	sp, #116	; 0x74
 800a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ba:	ab03      	add	r3, sp, #12
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	462a      	mov	r2, r5
 800a9c0:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <_svfiprintf_r+0x1f4>)
 800a9c2:	a904      	add	r1, sp, #16
 800a9c4:	4638      	mov	r0, r7
 800a9c6:	f7fc ffeb 	bl	80079a0 <_printf_i>
 800a9ca:	e7eb      	b.n	800a9a4 <_svfiprintf_r+0x1c0>
 800a9cc:	0800bf81 	.word	0x0800bf81
 800a9d0:	0800bf8b 	.word	0x0800bf8b
 800a9d4:	08007491 	.word	0x08007491
 800a9d8:	0800a731 	.word	0x0800a731
 800a9dc:	0800bf87 	.word	0x0800bf87

0800a9e0 <__sflush_r>:
 800a9e0:	898a      	ldrh	r2, [r1, #12]
 800a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	0710      	lsls	r0, r2, #28
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	d458      	bmi.n	800aaa0 <__sflush_r+0xc0>
 800a9ee:	684b      	ldr	r3, [r1, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc05      	bgt.n	800aa00 <__sflush_r+0x20>
 800a9f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dc02      	bgt.n	800aa00 <__sflush_r+0x20>
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	d0f9      	beq.n	800a9fa <__sflush_r+0x1a>
 800aa06:	2300      	movs	r3, #0
 800aa08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa0c:	682f      	ldr	r7, [r5, #0]
 800aa0e:	6a21      	ldr	r1, [r4, #32]
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	d032      	beq.n	800aa7a <__sflush_r+0x9a>
 800aa14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	075a      	lsls	r2, r3, #29
 800aa1a:	d505      	bpl.n	800aa28 <__sflush_r+0x48>
 800aa1c:	6863      	ldr	r3, [r4, #4]
 800aa1e:	1ac0      	subs	r0, r0, r3
 800aa20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa22:	b10b      	cbz	r3, 800aa28 <__sflush_r+0x48>
 800aa24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa26:	1ac0      	subs	r0, r0, r3
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa2e:	6a21      	ldr	r1, [r4, #32]
 800aa30:	4628      	mov	r0, r5
 800aa32:	47b0      	blx	r6
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	d106      	bne.n	800aa48 <__sflush_r+0x68>
 800aa3a:	6829      	ldr	r1, [r5, #0]
 800aa3c:	291d      	cmp	r1, #29
 800aa3e:	d82b      	bhi.n	800aa98 <__sflush_r+0xb8>
 800aa40:	4a29      	ldr	r2, [pc, #164]	; (800aae8 <__sflush_r+0x108>)
 800aa42:	410a      	asrs	r2, r1
 800aa44:	07d6      	lsls	r6, r2, #31
 800aa46:	d427      	bmi.n	800aa98 <__sflush_r+0xb8>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	6062      	str	r2, [r4, #4]
 800aa4c:	04d9      	lsls	r1, r3, #19
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	6022      	str	r2, [r4, #0]
 800aa52:	d504      	bpl.n	800aa5e <__sflush_r+0x7e>
 800aa54:	1c42      	adds	r2, r0, #1
 800aa56:	d101      	bne.n	800aa5c <__sflush_r+0x7c>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b903      	cbnz	r3, 800aa5e <__sflush_r+0x7e>
 800aa5c:	6560      	str	r0, [r4, #84]	; 0x54
 800aa5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa60:	602f      	str	r7, [r5, #0]
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d0c9      	beq.n	800a9fa <__sflush_r+0x1a>
 800aa66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa6a:	4299      	cmp	r1, r3
 800aa6c:	d002      	beq.n	800aa74 <__sflush_r+0x94>
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f7fe fa5e 	bl	8008f30 <_free_r>
 800aa74:	2000      	movs	r0, #0
 800aa76:	6360      	str	r0, [r4, #52]	; 0x34
 800aa78:	e7c0      	b.n	800a9fc <__sflush_r+0x1c>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	47b0      	blx	r6
 800aa80:	1c41      	adds	r1, r0, #1
 800aa82:	d1c8      	bne.n	800aa16 <__sflush_r+0x36>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0c5      	beq.n	800aa16 <__sflush_r+0x36>
 800aa8a:	2b1d      	cmp	r3, #29
 800aa8c:	d001      	beq.n	800aa92 <__sflush_r+0xb2>
 800aa8e:	2b16      	cmp	r3, #22
 800aa90:	d101      	bne.n	800aa96 <__sflush_r+0xb6>
 800aa92:	602f      	str	r7, [r5, #0]
 800aa94:	e7b1      	b.n	800a9fa <__sflush_r+0x1a>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	e7ad      	b.n	800a9fc <__sflush_r+0x1c>
 800aaa0:	690f      	ldr	r7, [r1, #16]
 800aaa2:	2f00      	cmp	r7, #0
 800aaa4:	d0a9      	beq.n	800a9fa <__sflush_r+0x1a>
 800aaa6:	0793      	lsls	r3, r2, #30
 800aaa8:	680e      	ldr	r6, [r1, #0]
 800aaaa:	bf08      	it	eq
 800aaac:	694b      	ldreq	r3, [r1, #20]
 800aaae:	600f      	str	r7, [r1, #0]
 800aab0:	bf18      	it	ne
 800aab2:	2300      	movne	r3, #0
 800aab4:	eba6 0807 	sub.w	r8, r6, r7
 800aab8:	608b      	str	r3, [r1, #8]
 800aaba:	f1b8 0f00 	cmp.w	r8, #0
 800aabe:	dd9c      	ble.n	800a9fa <__sflush_r+0x1a>
 800aac0:	6a21      	ldr	r1, [r4, #32]
 800aac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aac4:	4643      	mov	r3, r8
 800aac6:	463a      	mov	r2, r7
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b0      	blx	r6
 800aacc:	2800      	cmp	r0, #0
 800aace:	dc06      	bgt.n	800aade <__sflush_r+0xfe>
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e78e      	b.n	800a9fc <__sflush_r+0x1c>
 800aade:	4407      	add	r7, r0
 800aae0:	eba8 0800 	sub.w	r8, r8, r0
 800aae4:	e7e9      	b.n	800aaba <__sflush_r+0xda>
 800aae6:	bf00      	nop
 800aae8:	dfbffffe 	.word	0xdfbffffe

0800aaec <_fflush_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	690b      	ldr	r3, [r1, #16]
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b913      	cbnz	r3, 800aafc <_fflush_r+0x10>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	4628      	mov	r0, r5
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	b118      	cbz	r0, 800ab06 <_fflush_r+0x1a>
 800aafe:	6a03      	ldr	r3, [r0, #32]
 800ab00:	b90b      	cbnz	r3, 800ab06 <_fflush_r+0x1a>
 800ab02:	f7fd faff 	bl	8008104 <__sinit>
 800ab06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f3      	beq.n	800aaf6 <_fflush_r+0xa>
 800ab0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab10:	07d0      	lsls	r0, r2, #31
 800ab12:	d404      	bmi.n	800ab1e <_fflush_r+0x32>
 800ab14:	0599      	lsls	r1, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_fflush_r+0x32>
 800ab18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1a:	f7fd fc0a 	bl	8008332 <__retarget_lock_acquire_recursive>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4621      	mov	r1, r4
 800ab22:	f7ff ff5d 	bl	800a9e0 <__sflush_r>
 800ab26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab28:	07da      	lsls	r2, r3, #31
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	d4e4      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	059b      	lsls	r3, r3, #22
 800ab32:	d4e1      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab36:	f7fd fbfd 	bl	8008334 <__retarget_lock_release_recursive>
 800ab3a:	e7dd      	b.n	800aaf8 <_fflush_r+0xc>

0800ab3c <memmove>:
 800ab3c:	4288      	cmp	r0, r1
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	eb01 0402 	add.w	r4, r1, r2
 800ab44:	d902      	bls.n	800ab4c <memmove+0x10>
 800ab46:	4284      	cmp	r4, r0
 800ab48:	4623      	mov	r3, r4
 800ab4a:	d807      	bhi.n	800ab5c <memmove+0x20>
 800ab4c:	1e43      	subs	r3, r0, #1
 800ab4e:	42a1      	cmp	r1, r4
 800ab50:	d008      	beq.n	800ab64 <memmove+0x28>
 800ab52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab5a:	e7f8      	b.n	800ab4e <memmove+0x12>
 800ab5c:	4402      	add	r2, r0
 800ab5e:	4601      	mov	r1, r0
 800ab60:	428a      	cmp	r2, r1
 800ab62:	d100      	bne.n	800ab66 <memmove+0x2a>
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab6e:	e7f7      	b.n	800ab60 <memmove+0x24>

0800ab70 <strncmp>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	b16a      	cbz	r2, 800ab90 <strncmp+0x20>
 800ab74:	3901      	subs	r1, #1
 800ab76:	1884      	adds	r4, r0, r2
 800ab78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d103      	bne.n	800ab8c <strncmp+0x1c>
 800ab84:	42a0      	cmp	r0, r4
 800ab86:	d001      	beq.n	800ab8c <strncmp+0x1c>
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	d1f5      	bne.n	800ab78 <strncmp+0x8>
 800ab8c:	1ad0      	subs	r0, r2, r3
 800ab8e:	bd10      	pop	{r4, pc}
 800ab90:	4610      	mov	r0, r2
 800ab92:	e7fc      	b.n	800ab8e <strncmp+0x1e>

0800ab94 <_sbrk_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	4d06      	ldr	r5, [pc, #24]	; (800abb0 <_sbrk_r+0x1c>)
 800ab98:	2300      	movs	r3, #0
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f7 fa56 	bl	8002050 <_sbrk>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_sbrk_r+0x1a>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_sbrk_r+0x1a>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	2000056c 	.word	0x2000056c

0800abb4 <memcpy>:
 800abb4:	440a      	add	r2, r1
 800abb6:	4291      	cmp	r1, r2
 800abb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800abbc:	d100      	bne.n	800abc0 <memcpy+0xc>
 800abbe:	4770      	bx	lr
 800abc0:	b510      	push	{r4, lr}
 800abc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abca:	4291      	cmp	r1, r2
 800abcc:	d1f9      	bne.n	800abc2 <memcpy+0xe>
 800abce:	bd10      	pop	{r4, pc}

0800abd0 <nan>:
 800abd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abd8 <nan+0x8>
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	00000000 	.word	0x00000000
 800abdc:	7ff80000 	.word	0x7ff80000

0800abe0 <__assert_func>:
 800abe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abe2:	4614      	mov	r4, r2
 800abe4:	461a      	mov	r2, r3
 800abe6:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <__assert_func+0x2c>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4605      	mov	r5, r0
 800abec:	68d8      	ldr	r0, [r3, #12]
 800abee:	b14c      	cbz	r4, 800ac04 <__assert_func+0x24>
 800abf0:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <__assert_func+0x30>)
 800abf2:	9100      	str	r1, [sp, #0]
 800abf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abf8:	4906      	ldr	r1, [pc, #24]	; (800ac14 <__assert_func+0x34>)
 800abfa:	462b      	mov	r3, r5
 800abfc:	f000 fbca 	bl	800b394 <fiprintf>
 800ac00:	f000 fbda 	bl	800b3b8 <abort>
 800ac04:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <__assert_func+0x38>)
 800ac06:	461c      	mov	r4, r3
 800ac08:	e7f3      	b.n	800abf2 <__assert_func+0x12>
 800ac0a:	bf00      	nop
 800ac0c:	20000068 	.word	0x20000068
 800ac10:	0800bf9a 	.word	0x0800bf9a
 800ac14:	0800bfa7 	.word	0x0800bfa7
 800ac18:	0800bfd5 	.word	0x0800bfd5

0800ac1c <_calloc_r>:
 800ac1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1e:	fba1 2402 	umull	r2, r4, r1, r2
 800ac22:	b94c      	cbnz	r4, 800ac38 <_calloc_r+0x1c>
 800ac24:	4611      	mov	r1, r2
 800ac26:	9201      	str	r2, [sp, #4]
 800ac28:	f7fe f9f6 	bl	8009018 <_malloc_r>
 800ac2c:	9a01      	ldr	r2, [sp, #4]
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b930      	cbnz	r0, 800ac40 <_calloc_r+0x24>
 800ac32:	4628      	mov	r0, r5
 800ac34:	b003      	add	sp, #12
 800ac36:	bd30      	pop	{r4, r5, pc}
 800ac38:	220c      	movs	r2, #12
 800ac3a:	6002      	str	r2, [r0, #0]
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	e7f8      	b.n	800ac32 <_calloc_r+0x16>
 800ac40:	4621      	mov	r1, r4
 800ac42:	f7fd faf8 	bl	8008236 <memset>
 800ac46:	e7f4      	b.n	800ac32 <_calloc_r+0x16>

0800ac48 <rshift>:
 800ac48:	6903      	ldr	r3, [r0, #16]
 800ac4a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac52:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac56:	f100 0414 	add.w	r4, r0, #20
 800ac5a:	dd45      	ble.n	800ace8 <rshift+0xa0>
 800ac5c:	f011 011f 	ands.w	r1, r1, #31
 800ac60:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac64:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac68:	d10c      	bne.n	800ac84 <rshift+0x3c>
 800ac6a:	f100 0710 	add.w	r7, r0, #16
 800ac6e:	4629      	mov	r1, r5
 800ac70:	42b1      	cmp	r1, r6
 800ac72:	d334      	bcc.n	800acde <rshift+0x96>
 800ac74:	1a9b      	subs	r3, r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	1eea      	subs	r2, r5, #3
 800ac7a:	4296      	cmp	r6, r2
 800ac7c:	bf38      	it	cc
 800ac7e:	2300      	movcc	r3, #0
 800ac80:	4423      	add	r3, r4
 800ac82:	e015      	b.n	800acb0 <rshift+0x68>
 800ac84:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ac88:	f1c1 0820 	rsb	r8, r1, #32
 800ac8c:	40cf      	lsrs	r7, r1
 800ac8e:	f105 0e04 	add.w	lr, r5, #4
 800ac92:	46a1      	mov	r9, r4
 800ac94:	4576      	cmp	r6, lr
 800ac96:	46f4      	mov	ip, lr
 800ac98:	d815      	bhi.n	800acc6 <rshift+0x7e>
 800ac9a:	1a9a      	subs	r2, r3, r2
 800ac9c:	0092      	lsls	r2, r2, #2
 800ac9e:	3a04      	subs	r2, #4
 800aca0:	3501      	adds	r5, #1
 800aca2:	42ae      	cmp	r6, r5
 800aca4:	bf38      	it	cc
 800aca6:	2200      	movcc	r2, #0
 800aca8:	18a3      	adds	r3, r4, r2
 800acaa:	50a7      	str	r7, [r4, r2]
 800acac:	b107      	cbz	r7, 800acb0 <rshift+0x68>
 800acae:	3304      	adds	r3, #4
 800acb0:	1b1a      	subs	r2, r3, r4
 800acb2:	42a3      	cmp	r3, r4
 800acb4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800acb8:	bf08      	it	eq
 800acba:	2300      	moveq	r3, #0
 800acbc:	6102      	str	r2, [r0, #16]
 800acbe:	bf08      	it	eq
 800acc0:	6143      	streq	r3, [r0, #20]
 800acc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acc6:	f8dc c000 	ldr.w	ip, [ip]
 800acca:	fa0c fc08 	lsl.w	ip, ip, r8
 800acce:	ea4c 0707 	orr.w	r7, ip, r7
 800acd2:	f849 7b04 	str.w	r7, [r9], #4
 800acd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800acda:	40cf      	lsrs	r7, r1
 800acdc:	e7da      	b.n	800ac94 <rshift+0x4c>
 800acde:	f851 cb04 	ldr.w	ip, [r1], #4
 800ace2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ace6:	e7c3      	b.n	800ac70 <rshift+0x28>
 800ace8:	4623      	mov	r3, r4
 800acea:	e7e1      	b.n	800acb0 <rshift+0x68>

0800acec <__hexdig_fun>:
 800acec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800acf0:	2b09      	cmp	r3, #9
 800acf2:	d802      	bhi.n	800acfa <__hexdig_fun+0xe>
 800acf4:	3820      	subs	r0, #32
 800acf6:	b2c0      	uxtb	r0, r0
 800acf8:	4770      	bx	lr
 800acfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d801      	bhi.n	800ad06 <__hexdig_fun+0x1a>
 800ad02:	3847      	subs	r0, #71	; 0x47
 800ad04:	e7f7      	b.n	800acf6 <__hexdig_fun+0xa>
 800ad06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad0a:	2b05      	cmp	r3, #5
 800ad0c:	d801      	bhi.n	800ad12 <__hexdig_fun+0x26>
 800ad0e:	3827      	subs	r0, #39	; 0x27
 800ad10:	e7f1      	b.n	800acf6 <__hexdig_fun+0xa>
 800ad12:	2000      	movs	r0, #0
 800ad14:	4770      	bx	lr
	...

0800ad18 <__gethex>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	4617      	mov	r7, r2
 800ad1e:	680a      	ldr	r2, [r1, #0]
 800ad20:	b085      	sub	sp, #20
 800ad22:	f102 0b02 	add.w	fp, r2, #2
 800ad26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ad2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ad2e:	4681      	mov	r9, r0
 800ad30:	468a      	mov	sl, r1
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	32fe      	adds	r2, #254	; 0xfe
 800ad36:	eb02 030b 	add.w	r3, r2, fp
 800ad3a:	46d8      	mov	r8, fp
 800ad3c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	2830      	cmp	r0, #48	; 0x30
 800ad44:	d0f7      	beq.n	800ad36 <__gethex+0x1e>
 800ad46:	f7ff ffd1 	bl	800acec <__hexdig_fun>
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d138      	bne.n	800adc2 <__gethex+0xaa>
 800ad50:	49a7      	ldr	r1, [pc, #668]	; (800aff0 <__gethex+0x2d8>)
 800ad52:	2201      	movs	r2, #1
 800ad54:	4640      	mov	r0, r8
 800ad56:	f7ff ff0b 	bl	800ab70 <strncmp>
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d169      	bne.n	800ae34 <__gethex+0x11c>
 800ad60:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ad64:	465d      	mov	r5, fp
 800ad66:	f7ff ffc1 	bl	800acec <__hexdig_fun>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d064      	beq.n	800ae38 <__gethex+0x120>
 800ad6e:	465a      	mov	r2, fp
 800ad70:	7810      	ldrb	r0, [r2, #0]
 800ad72:	2830      	cmp	r0, #48	; 0x30
 800ad74:	4690      	mov	r8, r2
 800ad76:	f102 0201 	add.w	r2, r2, #1
 800ad7a:	d0f9      	beq.n	800ad70 <__gethex+0x58>
 800ad7c:	f7ff ffb6 	bl	800acec <__hexdig_fun>
 800ad80:	2301      	movs	r3, #1
 800ad82:	fab0 f480 	clz	r4, r0
 800ad86:	0964      	lsrs	r4, r4, #5
 800ad88:	465e      	mov	r6, fp
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	4642      	mov	r2, r8
 800ad8e:	4615      	mov	r5, r2
 800ad90:	3201      	adds	r2, #1
 800ad92:	7828      	ldrb	r0, [r5, #0]
 800ad94:	f7ff ffaa 	bl	800acec <__hexdig_fun>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1f8      	bne.n	800ad8e <__gethex+0x76>
 800ad9c:	4994      	ldr	r1, [pc, #592]	; (800aff0 <__gethex+0x2d8>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4628      	mov	r0, r5
 800ada2:	f7ff fee5 	bl	800ab70 <strncmp>
 800ada6:	b978      	cbnz	r0, 800adc8 <__gethex+0xb0>
 800ada8:	b946      	cbnz	r6, 800adbc <__gethex+0xa4>
 800adaa:	1c6e      	adds	r6, r5, #1
 800adac:	4632      	mov	r2, r6
 800adae:	4615      	mov	r5, r2
 800adb0:	3201      	adds	r2, #1
 800adb2:	7828      	ldrb	r0, [r5, #0]
 800adb4:	f7ff ff9a 	bl	800acec <__hexdig_fun>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d1f8      	bne.n	800adae <__gethex+0x96>
 800adbc:	1b73      	subs	r3, r6, r5
 800adbe:	009e      	lsls	r6, r3, #2
 800adc0:	e004      	b.n	800adcc <__gethex+0xb4>
 800adc2:	2400      	movs	r4, #0
 800adc4:	4626      	mov	r6, r4
 800adc6:	e7e1      	b.n	800ad8c <__gethex+0x74>
 800adc8:	2e00      	cmp	r6, #0
 800adca:	d1f7      	bne.n	800adbc <__gethex+0xa4>
 800adcc:	782b      	ldrb	r3, [r5, #0]
 800adce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800add2:	2b50      	cmp	r3, #80	; 0x50
 800add4:	d13d      	bne.n	800ae52 <__gethex+0x13a>
 800add6:	786b      	ldrb	r3, [r5, #1]
 800add8:	2b2b      	cmp	r3, #43	; 0x2b
 800adda:	d02f      	beq.n	800ae3c <__gethex+0x124>
 800addc:	2b2d      	cmp	r3, #45	; 0x2d
 800adde:	d031      	beq.n	800ae44 <__gethex+0x12c>
 800ade0:	1c69      	adds	r1, r5, #1
 800ade2:	f04f 0b00 	mov.w	fp, #0
 800ade6:	7808      	ldrb	r0, [r1, #0]
 800ade8:	f7ff ff80 	bl	800acec <__hexdig_fun>
 800adec:	1e42      	subs	r2, r0, #1
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	2a18      	cmp	r2, #24
 800adf2:	d82e      	bhi.n	800ae52 <__gethex+0x13a>
 800adf4:	f1a0 0210 	sub.w	r2, r0, #16
 800adf8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800adfc:	f7ff ff76 	bl	800acec <__hexdig_fun>
 800ae00:	f100 3cff 	add.w	ip, r0, #4294967295
 800ae04:	fa5f fc8c 	uxtb.w	ip, ip
 800ae08:	f1bc 0f18 	cmp.w	ip, #24
 800ae0c:	d91d      	bls.n	800ae4a <__gethex+0x132>
 800ae0e:	f1bb 0f00 	cmp.w	fp, #0
 800ae12:	d000      	beq.n	800ae16 <__gethex+0xfe>
 800ae14:	4252      	negs	r2, r2
 800ae16:	4416      	add	r6, r2
 800ae18:	f8ca 1000 	str.w	r1, [sl]
 800ae1c:	b1dc      	cbz	r4, 800ae56 <__gethex+0x13e>
 800ae1e:	9b01      	ldr	r3, [sp, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf14      	ite	ne
 800ae24:	f04f 0800 	movne.w	r8, #0
 800ae28:	f04f 0806 	moveq.w	r8, #6
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	b005      	add	sp, #20
 800ae30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae34:	4645      	mov	r5, r8
 800ae36:	4626      	mov	r6, r4
 800ae38:	2401      	movs	r4, #1
 800ae3a:	e7c7      	b.n	800adcc <__gethex+0xb4>
 800ae3c:	f04f 0b00 	mov.w	fp, #0
 800ae40:	1ca9      	adds	r1, r5, #2
 800ae42:	e7d0      	b.n	800ade6 <__gethex+0xce>
 800ae44:	f04f 0b01 	mov.w	fp, #1
 800ae48:	e7fa      	b.n	800ae40 <__gethex+0x128>
 800ae4a:	230a      	movs	r3, #10
 800ae4c:	fb03 0002 	mla	r0, r3, r2, r0
 800ae50:	e7d0      	b.n	800adf4 <__gethex+0xdc>
 800ae52:	4629      	mov	r1, r5
 800ae54:	e7e0      	b.n	800ae18 <__gethex+0x100>
 800ae56:	eba5 0308 	sub.w	r3, r5, r8
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	2b07      	cmp	r3, #7
 800ae60:	dc0a      	bgt.n	800ae78 <__gethex+0x160>
 800ae62:	4648      	mov	r0, r9
 800ae64:	f7fe f964 	bl	8009130 <_Balloc>
 800ae68:	4604      	mov	r4, r0
 800ae6a:	b940      	cbnz	r0, 800ae7e <__gethex+0x166>
 800ae6c:	4b61      	ldr	r3, [pc, #388]	; (800aff4 <__gethex+0x2dc>)
 800ae6e:	4602      	mov	r2, r0
 800ae70:	21e4      	movs	r1, #228	; 0xe4
 800ae72:	4861      	ldr	r0, [pc, #388]	; (800aff8 <__gethex+0x2e0>)
 800ae74:	f7ff feb4 	bl	800abe0 <__assert_func>
 800ae78:	3101      	adds	r1, #1
 800ae7a:	105b      	asrs	r3, r3, #1
 800ae7c:	e7ef      	b.n	800ae5e <__gethex+0x146>
 800ae7e:	f100 0a14 	add.w	sl, r0, #20
 800ae82:	2300      	movs	r3, #0
 800ae84:	495a      	ldr	r1, [pc, #360]	; (800aff0 <__gethex+0x2d8>)
 800ae86:	f8cd a004 	str.w	sl, [sp, #4]
 800ae8a:	469b      	mov	fp, r3
 800ae8c:	45a8      	cmp	r8, r5
 800ae8e:	d342      	bcc.n	800af16 <__gethex+0x1fe>
 800ae90:	9801      	ldr	r0, [sp, #4]
 800ae92:	f840 bb04 	str.w	fp, [r0], #4
 800ae96:	eba0 000a 	sub.w	r0, r0, sl
 800ae9a:	1080      	asrs	r0, r0, #2
 800ae9c:	6120      	str	r0, [r4, #16]
 800ae9e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800aea2:	4658      	mov	r0, fp
 800aea4:	f7fe fa36 	bl	8009314 <__hi0bits>
 800aea8:	683d      	ldr	r5, [r7, #0]
 800aeaa:	eba8 0000 	sub.w	r0, r8, r0
 800aeae:	42a8      	cmp	r0, r5
 800aeb0:	dd59      	ble.n	800af66 <__gethex+0x24e>
 800aeb2:	eba0 0805 	sub.w	r8, r0, r5
 800aeb6:	4641      	mov	r1, r8
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f7fe fdc2 	bl	8009a42 <__any_on>
 800aebe:	4683      	mov	fp, r0
 800aec0:	b1b8      	cbz	r0, 800aef2 <__gethex+0x1da>
 800aec2:	f108 33ff 	add.w	r3, r8, #4294967295
 800aec6:	1159      	asrs	r1, r3, #5
 800aec8:	f003 021f 	and.w	r2, r3, #31
 800aecc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aed0:	f04f 0b01 	mov.w	fp, #1
 800aed4:	fa0b f202 	lsl.w	r2, fp, r2
 800aed8:	420a      	tst	r2, r1
 800aeda:	d00a      	beq.n	800aef2 <__gethex+0x1da>
 800aedc:	455b      	cmp	r3, fp
 800aede:	dd06      	ble.n	800aeee <__gethex+0x1d6>
 800aee0:	f1a8 0102 	sub.w	r1, r8, #2
 800aee4:	4620      	mov	r0, r4
 800aee6:	f7fe fdac 	bl	8009a42 <__any_on>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d138      	bne.n	800af60 <__gethex+0x248>
 800aeee:	f04f 0b02 	mov.w	fp, #2
 800aef2:	4641      	mov	r1, r8
 800aef4:	4620      	mov	r0, r4
 800aef6:	f7ff fea7 	bl	800ac48 <rshift>
 800aefa:	4446      	add	r6, r8
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	42b3      	cmp	r3, r6
 800af00:	da41      	bge.n	800af86 <__gethex+0x26e>
 800af02:	4621      	mov	r1, r4
 800af04:	4648      	mov	r0, r9
 800af06:	f7fe f953 	bl	80091b0 <_Bfree>
 800af0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af0c:	2300      	movs	r3, #0
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800af14:	e78a      	b.n	800ae2c <__gethex+0x114>
 800af16:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800af1a:	2a2e      	cmp	r2, #46	; 0x2e
 800af1c:	d014      	beq.n	800af48 <__gethex+0x230>
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d106      	bne.n	800af30 <__gethex+0x218>
 800af22:	9b01      	ldr	r3, [sp, #4]
 800af24:	f843 bb04 	str.w	fp, [r3], #4
 800af28:	f04f 0b00 	mov.w	fp, #0
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	465b      	mov	r3, fp
 800af30:	7828      	ldrb	r0, [r5, #0]
 800af32:	9303      	str	r3, [sp, #12]
 800af34:	f7ff feda 	bl	800acec <__hexdig_fun>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	f000 000f 	and.w	r0, r0, #15
 800af3e:	4098      	lsls	r0, r3
 800af40:	ea4b 0b00 	orr.w	fp, fp, r0
 800af44:	3304      	adds	r3, #4
 800af46:	e7a1      	b.n	800ae8c <__gethex+0x174>
 800af48:	45a8      	cmp	r8, r5
 800af4a:	d8e8      	bhi.n	800af1e <__gethex+0x206>
 800af4c:	2201      	movs	r2, #1
 800af4e:	4628      	mov	r0, r5
 800af50:	9303      	str	r3, [sp, #12]
 800af52:	f7ff fe0d 	bl	800ab70 <strncmp>
 800af56:	4926      	ldr	r1, [pc, #152]	; (800aff0 <__gethex+0x2d8>)
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d1df      	bne.n	800af1e <__gethex+0x206>
 800af5e:	e795      	b.n	800ae8c <__gethex+0x174>
 800af60:	f04f 0b03 	mov.w	fp, #3
 800af64:	e7c5      	b.n	800aef2 <__gethex+0x1da>
 800af66:	da0b      	bge.n	800af80 <__gethex+0x268>
 800af68:	eba5 0800 	sub.w	r8, r5, r0
 800af6c:	4621      	mov	r1, r4
 800af6e:	4642      	mov	r2, r8
 800af70:	4648      	mov	r0, r9
 800af72:	f7fe fb37 	bl	80095e4 <__lshift>
 800af76:	eba6 0608 	sub.w	r6, r6, r8
 800af7a:	4604      	mov	r4, r0
 800af7c:	f100 0a14 	add.w	sl, r0, #20
 800af80:	f04f 0b00 	mov.w	fp, #0
 800af84:	e7ba      	b.n	800aefc <__gethex+0x1e4>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	42b3      	cmp	r3, r6
 800af8a:	dd73      	ble.n	800b074 <__gethex+0x35c>
 800af8c:	1b9e      	subs	r6, r3, r6
 800af8e:	42b5      	cmp	r5, r6
 800af90:	dc34      	bgt.n	800affc <__gethex+0x2e4>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d023      	beq.n	800afe0 <__gethex+0x2c8>
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d025      	beq.n	800afe8 <__gethex+0x2d0>
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d115      	bne.n	800afcc <__gethex+0x2b4>
 800afa0:	42b5      	cmp	r5, r6
 800afa2:	d113      	bne.n	800afcc <__gethex+0x2b4>
 800afa4:	2d01      	cmp	r5, #1
 800afa6:	d10b      	bne.n	800afc0 <__gethex+0x2a8>
 800afa8:	9a02      	ldr	r2, [sp, #8]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	2301      	movs	r3, #1
 800afb0:	6123      	str	r3, [r4, #16]
 800afb2:	f8ca 3000 	str.w	r3, [sl]
 800afb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afb8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800afbc:	601c      	str	r4, [r3, #0]
 800afbe:	e735      	b.n	800ae2c <__gethex+0x114>
 800afc0:	1e69      	subs	r1, r5, #1
 800afc2:	4620      	mov	r0, r4
 800afc4:	f7fe fd3d 	bl	8009a42 <__any_on>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d1ed      	bne.n	800afa8 <__gethex+0x290>
 800afcc:	4621      	mov	r1, r4
 800afce:	4648      	mov	r0, r9
 800afd0:	f7fe f8ee 	bl	80091b0 <_Bfree>
 800afd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afd6:	2300      	movs	r3, #0
 800afd8:	6013      	str	r3, [r2, #0]
 800afda:	f04f 0850 	mov.w	r8, #80	; 0x50
 800afde:	e725      	b.n	800ae2c <__gethex+0x114>
 800afe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1f2      	bne.n	800afcc <__gethex+0x2b4>
 800afe6:	e7df      	b.n	800afa8 <__gethex+0x290>
 800afe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1dc      	bne.n	800afa8 <__gethex+0x290>
 800afee:	e7ed      	b.n	800afcc <__gethex+0x2b4>
 800aff0:	0800be2c 	.word	0x0800be2c
 800aff4:	0800bcc5 	.word	0x0800bcc5
 800aff8:	0800bfd6 	.word	0x0800bfd6
 800affc:	f106 38ff 	add.w	r8, r6, #4294967295
 800b000:	f1bb 0f00 	cmp.w	fp, #0
 800b004:	d133      	bne.n	800b06e <__gethex+0x356>
 800b006:	f1b8 0f00 	cmp.w	r8, #0
 800b00a:	d004      	beq.n	800b016 <__gethex+0x2fe>
 800b00c:	4641      	mov	r1, r8
 800b00e:	4620      	mov	r0, r4
 800b010:	f7fe fd17 	bl	8009a42 <__any_on>
 800b014:	4683      	mov	fp, r0
 800b016:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b01a:	2301      	movs	r3, #1
 800b01c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b020:	f008 081f 	and.w	r8, r8, #31
 800b024:	fa03 f308 	lsl.w	r3, r3, r8
 800b028:	4213      	tst	r3, r2
 800b02a:	4631      	mov	r1, r6
 800b02c:	4620      	mov	r0, r4
 800b02e:	bf18      	it	ne
 800b030:	f04b 0b02 	orrne.w	fp, fp, #2
 800b034:	1bad      	subs	r5, r5, r6
 800b036:	f7ff fe07 	bl	800ac48 <rshift>
 800b03a:	687e      	ldr	r6, [r7, #4]
 800b03c:	f04f 0802 	mov.w	r8, #2
 800b040:	f1bb 0f00 	cmp.w	fp, #0
 800b044:	d04a      	beq.n	800b0dc <__gethex+0x3c4>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d016      	beq.n	800b07a <__gethex+0x362>
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d018      	beq.n	800b082 <__gethex+0x36a>
 800b050:	2b01      	cmp	r3, #1
 800b052:	d109      	bne.n	800b068 <__gethex+0x350>
 800b054:	f01b 0f02 	tst.w	fp, #2
 800b058:	d006      	beq.n	800b068 <__gethex+0x350>
 800b05a:	f8da 3000 	ldr.w	r3, [sl]
 800b05e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b062:	f01b 0f01 	tst.w	fp, #1
 800b066:	d10f      	bne.n	800b088 <__gethex+0x370>
 800b068:	f048 0810 	orr.w	r8, r8, #16
 800b06c:	e036      	b.n	800b0dc <__gethex+0x3c4>
 800b06e:	f04f 0b01 	mov.w	fp, #1
 800b072:	e7d0      	b.n	800b016 <__gethex+0x2fe>
 800b074:	f04f 0801 	mov.w	r8, #1
 800b078:	e7e2      	b.n	800b040 <__gethex+0x328>
 800b07a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b07c:	f1c3 0301 	rsb	r3, r3, #1
 800b080:	930f      	str	r3, [sp, #60]	; 0x3c
 800b082:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0ef      	beq.n	800b068 <__gethex+0x350>
 800b088:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b08c:	f104 0214 	add.w	r2, r4, #20
 800b090:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b09a:	2300      	movs	r3, #0
 800b09c:	4694      	mov	ip, r2
 800b09e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b0a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b0a6:	d01e      	beq.n	800b0e6 <__gethex+0x3ce>
 800b0a8:	3101      	adds	r1, #1
 800b0aa:	f8cc 1000 	str.w	r1, [ip]
 800b0ae:	f1b8 0f02 	cmp.w	r8, #2
 800b0b2:	f104 0214 	add.w	r2, r4, #20
 800b0b6:	d13d      	bne.n	800b134 <__gethex+0x41c>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	42ab      	cmp	r3, r5
 800b0be:	d10b      	bne.n	800b0d8 <__gethex+0x3c0>
 800b0c0:	1169      	asrs	r1, r5, #5
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f005 051f 	and.w	r5, r5, #31
 800b0c8:	fa03 f505 	lsl.w	r5, r3, r5
 800b0cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0d0:	421d      	tst	r5, r3
 800b0d2:	bf18      	it	ne
 800b0d4:	f04f 0801 	movne.w	r8, #1
 800b0d8:	f048 0820 	orr.w	r8, r8, #32
 800b0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0de:	601c      	str	r4, [r3, #0]
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	601e      	str	r6, [r3, #0]
 800b0e4:	e6a2      	b.n	800ae2c <__gethex+0x114>
 800b0e6:	4290      	cmp	r0, r2
 800b0e8:	f842 3c04 	str.w	r3, [r2, #-4]
 800b0ec:	d8d6      	bhi.n	800b09c <__gethex+0x384>
 800b0ee:	68a2      	ldr	r2, [r4, #8]
 800b0f0:	4593      	cmp	fp, r2
 800b0f2:	db17      	blt.n	800b124 <__gethex+0x40c>
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4648      	mov	r0, r9
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	f7fe f819 	bl	8009130 <_Balloc>
 800b0fe:	4682      	mov	sl, r0
 800b100:	b918      	cbnz	r0, 800b10a <__gethex+0x3f2>
 800b102:	4b1b      	ldr	r3, [pc, #108]	; (800b170 <__gethex+0x458>)
 800b104:	4602      	mov	r2, r0
 800b106:	2184      	movs	r1, #132	; 0x84
 800b108:	e6b3      	b.n	800ae72 <__gethex+0x15a>
 800b10a:	6922      	ldr	r2, [r4, #16]
 800b10c:	3202      	adds	r2, #2
 800b10e:	f104 010c 	add.w	r1, r4, #12
 800b112:	0092      	lsls	r2, r2, #2
 800b114:	300c      	adds	r0, #12
 800b116:	f7ff fd4d 	bl	800abb4 <memcpy>
 800b11a:	4621      	mov	r1, r4
 800b11c:	4648      	mov	r0, r9
 800b11e:	f7fe f847 	bl	80091b0 <_Bfree>
 800b122:	4654      	mov	r4, sl
 800b124:	6922      	ldr	r2, [r4, #16]
 800b126:	1c51      	adds	r1, r2, #1
 800b128:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b12c:	6121      	str	r1, [r4, #16]
 800b12e:	2101      	movs	r1, #1
 800b130:	6151      	str	r1, [r2, #20]
 800b132:	e7bc      	b.n	800b0ae <__gethex+0x396>
 800b134:	6921      	ldr	r1, [r4, #16]
 800b136:	4559      	cmp	r1, fp
 800b138:	dd0b      	ble.n	800b152 <__gethex+0x43a>
 800b13a:	2101      	movs	r1, #1
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7ff fd83 	bl	800ac48 <rshift>
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	3601      	adds	r6, #1
 800b146:	42b3      	cmp	r3, r6
 800b148:	f6ff aedb 	blt.w	800af02 <__gethex+0x1ea>
 800b14c:	f04f 0801 	mov.w	r8, #1
 800b150:	e7c2      	b.n	800b0d8 <__gethex+0x3c0>
 800b152:	f015 051f 	ands.w	r5, r5, #31
 800b156:	d0f9      	beq.n	800b14c <__gethex+0x434>
 800b158:	9b01      	ldr	r3, [sp, #4]
 800b15a:	441a      	add	r2, r3
 800b15c:	f1c5 0520 	rsb	r5, r5, #32
 800b160:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b164:	f7fe f8d6 	bl	8009314 <__hi0bits>
 800b168:	42a8      	cmp	r0, r5
 800b16a:	dbe6      	blt.n	800b13a <__gethex+0x422>
 800b16c:	e7ee      	b.n	800b14c <__gethex+0x434>
 800b16e:	bf00      	nop
 800b170:	0800bcc5 	.word	0x0800bcc5

0800b174 <L_shift>:
 800b174:	f1c2 0208 	rsb	r2, r2, #8
 800b178:	0092      	lsls	r2, r2, #2
 800b17a:	b570      	push	{r4, r5, r6, lr}
 800b17c:	f1c2 0620 	rsb	r6, r2, #32
 800b180:	6843      	ldr	r3, [r0, #4]
 800b182:	6804      	ldr	r4, [r0, #0]
 800b184:	fa03 f506 	lsl.w	r5, r3, r6
 800b188:	432c      	orrs	r4, r5
 800b18a:	40d3      	lsrs	r3, r2
 800b18c:	6004      	str	r4, [r0, #0]
 800b18e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b192:	4288      	cmp	r0, r1
 800b194:	d3f4      	bcc.n	800b180 <L_shift+0xc>
 800b196:	bd70      	pop	{r4, r5, r6, pc}

0800b198 <__match>:
 800b198:	b530      	push	{r4, r5, lr}
 800b19a:	6803      	ldr	r3, [r0, #0]
 800b19c:	3301      	adds	r3, #1
 800b19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a2:	b914      	cbnz	r4, 800b1aa <__match+0x12>
 800b1a4:	6003      	str	r3, [r0, #0]
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	bd30      	pop	{r4, r5, pc}
 800b1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b1b2:	2d19      	cmp	r5, #25
 800b1b4:	bf98      	it	ls
 800b1b6:	3220      	addls	r2, #32
 800b1b8:	42a2      	cmp	r2, r4
 800b1ba:	d0f0      	beq.n	800b19e <__match+0x6>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e7f3      	b.n	800b1a8 <__match+0x10>

0800b1c0 <__hexnan>:
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	680b      	ldr	r3, [r1, #0]
 800b1c6:	6801      	ldr	r1, [r0, #0]
 800b1c8:	115e      	asrs	r6, r3, #5
 800b1ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b1ce:	f013 031f 	ands.w	r3, r3, #31
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	bf18      	it	ne
 800b1d6:	3604      	addne	r6, #4
 800b1d8:	2500      	movs	r5, #0
 800b1da:	1f37      	subs	r7, r6, #4
 800b1dc:	4682      	mov	sl, r0
 800b1de:	4690      	mov	r8, r2
 800b1e0:	9301      	str	r3, [sp, #4]
 800b1e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b1e6:	46b9      	mov	r9, r7
 800b1e8:	463c      	mov	r4, r7
 800b1ea:	9502      	str	r5, [sp, #8]
 800b1ec:	46ab      	mov	fp, r5
 800b1ee:	784a      	ldrb	r2, [r1, #1]
 800b1f0:	1c4b      	adds	r3, r1, #1
 800b1f2:	9303      	str	r3, [sp, #12]
 800b1f4:	b342      	cbz	r2, 800b248 <__hexnan+0x88>
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	9105      	str	r1, [sp, #20]
 800b1fa:	9204      	str	r2, [sp, #16]
 800b1fc:	f7ff fd76 	bl	800acec <__hexdig_fun>
 800b200:	2800      	cmp	r0, #0
 800b202:	d14f      	bne.n	800b2a4 <__hexnan+0xe4>
 800b204:	9a04      	ldr	r2, [sp, #16]
 800b206:	9905      	ldr	r1, [sp, #20]
 800b208:	2a20      	cmp	r2, #32
 800b20a:	d818      	bhi.n	800b23e <__hexnan+0x7e>
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	459b      	cmp	fp, r3
 800b210:	dd13      	ble.n	800b23a <__hexnan+0x7a>
 800b212:	454c      	cmp	r4, r9
 800b214:	d206      	bcs.n	800b224 <__hexnan+0x64>
 800b216:	2d07      	cmp	r5, #7
 800b218:	dc04      	bgt.n	800b224 <__hexnan+0x64>
 800b21a:	462a      	mov	r2, r5
 800b21c:	4649      	mov	r1, r9
 800b21e:	4620      	mov	r0, r4
 800b220:	f7ff ffa8 	bl	800b174 <L_shift>
 800b224:	4544      	cmp	r4, r8
 800b226:	d950      	bls.n	800b2ca <__hexnan+0x10a>
 800b228:	2300      	movs	r3, #0
 800b22a:	f1a4 0904 	sub.w	r9, r4, #4
 800b22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b232:	f8cd b008 	str.w	fp, [sp, #8]
 800b236:	464c      	mov	r4, r9
 800b238:	461d      	mov	r5, r3
 800b23a:	9903      	ldr	r1, [sp, #12]
 800b23c:	e7d7      	b.n	800b1ee <__hexnan+0x2e>
 800b23e:	2a29      	cmp	r2, #41	; 0x29
 800b240:	d155      	bne.n	800b2ee <__hexnan+0x12e>
 800b242:	3102      	adds	r1, #2
 800b244:	f8ca 1000 	str.w	r1, [sl]
 800b248:	f1bb 0f00 	cmp.w	fp, #0
 800b24c:	d04f      	beq.n	800b2ee <__hexnan+0x12e>
 800b24e:	454c      	cmp	r4, r9
 800b250:	d206      	bcs.n	800b260 <__hexnan+0xa0>
 800b252:	2d07      	cmp	r5, #7
 800b254:	dc04      	bgt.n	800b260 <__hexnan+0xa0>
 800b256:	462a      	mov	r2, r5
 800b258:	4649      	mov	r1, r9
 800b25a:	4620      	mov	r0, r4
 800b25c:	f7ff ff8a 	bl	800b174 <L_shift>
 800b260:	4544      	cmp	r4, r8
 800b262:	d934      	bls.n	800b2ce <__hexnan+0x10e>
 800b264:	f1a8 0204 	sub.w	r2, r8, #4
 800b268:	4623      	mov	r3, r4
 800b26a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b26e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b272:	429f      	cmp	r7, r3
 800b274:	d2f9      	bcs.n	800b26a <__hexnan+0xaa>
 800b276:	1b3b      	subs	r3, r7, r4
 800b278:	f023 0303 	bic.w	r3, r3, #3
 800b27c:	3304      	adds	r3, #4
 800b27e:	3e03      	subs	r6, #3
 800b280:	3401      	adds	r4, #1
 800b282:	42a6      	cmp	r6, r4
 800b284:	bf38      	it	cc
 800b286:	2304      	movcc	r3, #4
 800b288:	4443      	add	r3, r8
 800b28a:	2200      	movs	r2, #0
 800b28c:	f843 2b04 	str.w	r2, [r3], #4
 800b290:	429f      	cmp	r7, r3
 800b292:	d2fb      	bcs.n	800b28c <__hexnan+0xcc>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	b91b      	cbnz	r3, 800b2a0 <__hexnan+0xe0>
 800b298:	4547      	cmp	r7, r8
 800b29a:	d126      	bne.n	800b2ea <__hexnan+0x12a>
 800b29c:	2301      	movs	r3, #1
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	2005      	movs	r0, #5
 800b2a2:	e025      	b.n	800b2f0 <__hexnan+0x130>
 800b2a4:	3501      	adds	r5, #1
 800b2a6:	2d08      	cmp	r5, #8
 800b2a8:	f10b 0b01 	add.w	fp, fp, #1
 800b2ac:	dd06      	ble.n	800b2bc <__hexnan+0xfc>
 800b2ae:	4544      	cmp	r4, r8
 800b2b0:	d9c3      	bls.n	800b23a <__hexnan+0x7a>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2b8:	2501      	movs	r5, #1
 800b2ba:	3c04      	subs	r4, #4
 800b2bc:	6822      	ldr	r2, [r4, #0]
 800b2be:	f000 000f 	and.w	r0, r0, #15
 800b2c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b2c6:	6020      	str	r0, [r4, #0]
 800b2c8:	e7b7      	b.n	800b23a <__hexnan+0x7a>
 800b2ca:	2508      	movs	r5, #8
 800b2cc:	e7b5      	b.n	800b23a <__hexnan+0x7a>
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0df      	beq.n	800b294 <__hexnan+0xd4>
 800b2d4:	f1c3 0320 	rsb	r3, r3, #32
 800b2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2dc:	40da      	lsrs	r2, r3
 800b2de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800b2e8:	e7d4      	b.n	800b294 <__hexnan+0xd4>
 800b2ea:	3f04      	subs	r7, #4
 800b2ec:	e7d2      	b.n	800b294 <__hexnan+0xd4>
 800b2ee:	2004      	movs	r0, #4
 800b2f0:	b007      	add	sp, #28
 800b2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2f6 <__ascii_mbtowc>:
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	b901      	cbnz	r1, 800b2fc <__ascii_mbtowc+0x6>
 800b2fa:	a901      	add	r1, sp, #4
 800b2fc:	b142      	cbz	r2, 800b310 <__ascii_mbtowc+0x1a>
 800b2fe:	b14b      	cbz	r3, 800b314 <__ascii_mbtowc+0x1e>
 800b300:	7813      	ldrb	r3, [r2, #0]
 800b302:	600b      	str	r3, [r1, #0]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	1e10      	subs	r0, r2, #0
 800b308:	bf18      	it	ne
 800b30a:	2001      	movne	r0, #1
 800b30c:	b002      	add	sp, #8
 800b30e:	4770      	bx	lr
 800b310:	4610      	mov	r0, r2
 800b312:	e7fb      	b.n	800b30c <__ascii_mbtowc+0x16>
 800b314:	f06f 0001 	mvn.w	r0, #1
 800b318:	e7f8      	b.n	800b30c <__ascii_mbtowc+0x16>

0800b31a <_realloc_r>:
 800b31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b31e:	4680      	mov	r8, r0
 800b320:	4614      	mov	r4, r2
 800b322:	460e      	mov	r6, r1
 800b324:	b921      	cbnz	r1, 800b330 <_realloc_r+0x16>
 800b326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b32a:	4611      	mov	r1, r2
 800b32c:	f7fd be74 	b.w	8009018 <_malloc_r>
 800b330:	b92a      	cbnz	r2, 800b33e <_realloc_r+0x24>
 800b332:	f7fd fdfd 	bl	8008f30 <_free_r>
 800b336:	4625      	mov	r5, r4
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33e:	f000 f842 	bl	800b3c6 <_malloc_usable_size_r>
 800b342:	4284      	cmp	r4, r0
 800b344:	4607      	mov	r7, r0
 800b346:	d802      	bhi.n	800b34e <_realloc_r+0x34>
 800b348:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b34c:	d812      	bhi.n	800b374 <_realloc_r+0x5a>
 800b34e:	4621      	mov	r1, r4
 800b350:	4640      	mov	r0, r8
 800b352:	f7fd fe61 	bl	8009018 <_malloc_r>
 800b356:	4605      	mov	r5, r0
 800b358:	2800      	cmp	r0, #0
 800b35a:	d0ed      	beq.n	800b338 <_realloc_r+0x1e>
 800b35c:	42bc      	cmp	r4, r7
 800b35e:	4622      	mov	r2, r4
 800b360:	4631      	mov	r1, r6
 800b362:	bf28      	it	cs
 800b364:	463a      	movcs	r2, r7
 800b366:	f7ff fc25 	bl	800abb4 <memcpy>
 800b36a:	4631      	mov	r1, r6
 800b36c:	4640      	mov	r0, r8
 800b36e:	f7fd fddf 	bl	8008f30 <_free_r>
 800b372:	e7e1      	b.n	800b338 <_realloc_r+0x1e>
 800b374:	4635      	mov	r5, r6
 800b376:	e7df      	b.n	800b338 <_realloc_r+0x1e>

0800b378 <__ascii_wctomb>:
 800b378:	b149      	cbz	r1, 800b38e <__ascii_wctomb+0x16>
 800b37a:	2aff      	cmp	r2, #255	; 0xff
 800b37c:	bf85      	ittet	hi
 800b37e:	238a      	movhi	r3, #138	; 0x8a
 800b380:	6003      	strhi	r3, [r0, #0]
 800b382:	700a      	strbls	r2, [r1, #0]
 800b384:	f04f 30ff 	movhi.w	r0, #4294967295
 800b388:	bf98      	it	ls
 800b38a:	2001      	movls	r0, #1
 800b38c:	4770      	bx	lr
 800b38e:	4608      	mov	r0, r1
 800b390:	4770      	bx	lr
	...

0800b394 <fiprintf>:
 800b394:	b40e      	push	{r1, r2, r3}
 800b396:	b503      	push	{r0, r1, lr}
 800b398:	4601      	mov	r1, r0
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	4805      	ldr	r0, [pc, #20]	; (800b3b4 <fiprintf+0x20>)
 800b39e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3a2:	6800      	ldr	r0, [r0, #0]
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	f000 f83f 	bl	800b428 <_vfiprintf_r>
 800b3aa:	b002      	add	sp, #8
 800b3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3b0:	b003      	add	sp, #12
 800b3b2:	4770      	bx	lr
 800b3b4:	20000068 	.word	0x20000068

0800b3b8 <abort>:
 800b3b8:	b508      	push	{r3, lr}
 800b3ba:	2006      	movs	r0, #6
 800b3bc:	f000 fa0c 	bl	800b7d8 <raise>
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	f7f6 fdcd 	bl	8001f60 <_exit>

0800b3c6 <_malloc_usable_size_r>:
 800b3c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ca:	1f18      	subs	r0, r3, #4
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfbc      	itt	lt
 800b3d0:	580b      	ldrlt	r3, [r1, r0]
 800b3d2:	18c0      	addlt	r0, r0, r3
 800b3d4:	4770      	bx	lr

0800b3d6 <__sfputc_r>:
 800b3d6:	6893      	ldr	r3, [r2, #8]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	b410      	push	{r4}
 800b3de:	6093      	str	r3, [r2, #8]
 800b3e0:	da08      	bge.n	800b3f4 <__sfputc_r+0x1e>
 800b3e2:	6994      	ldr	r4, [r2, #24]
 800b3e4:	42a3      	cmp	r3, r4
 800b3e6:	db01      	blt.n	800b3ec <__sfputc_r+0x16>
 800b3e8:	290a      	cmp	r1, #10
 800b3ea:	d103      	bne.n	800b3f4 <__sfputc_r+0x1e>
 800b3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f0:	f000 b934 	b.w	800b65c <__swbuf_r>
 800b3f4:	6813      	ldr	r3, [r2, #0]
 800b3f6:	1c58      	adds	r0, r3, #1
 800b3f8:	6010      	str	r0, [r2, #0]
 800b3fa:	7019      	strb	r1, [r3, #0]
 800b3fc:	4608      	mov	r0, r1
 800b3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <__sfputs_r>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	4614      	mov	r4, r2
 800b40c:	18d5      	adds	r5, r2, r3
 800b40e:	42ac      	cmp	r4, r5
 800b410:	d101      	bne.n	800b416 <__sfputs_r+0x12>
 800b412:	2000      	movs	r0, #0
 800b414:	e007      	b.n	800b426 <__sfputs_r+0x22>
 800b416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b41a:	463a      	mov	r2, r7
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff ffda 	bl	800b3d6 <__sfputc_r>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	d1f3      	bne.n	800b40e <__sfputs_r+0xa>
 800b426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b428 <_vfiprintf_r>:
 800b428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b42c:	460d      	mov	r5, r1
 800b42e:	b09d      	sub	sp, #116	; 0x74
 800b430:	4614      	mov	r4, r2
 800b432:	4698      	mov	r8, r3
 800b434:	4606      	mov	r6, r0
 800b436:	b118      	cbz	r0, 800b440 <_vfiprintf_r+0x18>
 800b438:	6a03      	ldr	r3, [r0, #32]
 800b43a:	b90b      	cbnz	r3, 800b440 <_vfiprintf_r+0x18>
 800b43c:	f7fc fe62 	bl	8008104 <__sinit>
 800b440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b442:	07d9      	lsls	r1, r3, #31
 800b444:	d405      	bmi.n	800b452 <_vfiprintf_r+0x2a>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	059a      	lsls	r2, r3, #22
 800b44a:	d402      	bmi.n	800b452 <_vfiprintf_r+0x2a>
 800b44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b44e:	f7fc ff70 	bl	8008332 <__retarget_lock_acquire_recursive>
 800b452:	89ab      	ldrh	r3, [r5, #12]
 800b454:	071b      	lsls	r3, r3, #28
 800b456:	d501      	bpl.n	800b45c <_vfiprintf_r+0x34>
 800b458:	692b      	ldr	r3, [r5, #16]
 800b45a:	b99b      	cbnz	r3, 800b484 <_vfiprintf_r+0x5c>
 800b45c:	4629      	mov	r1, r5
 800b45e:	4630      	mov	r0, r6
 800b460:	f000 f93a 	bl	800b6d8 <__swsetup_r>
 800b464:	b170      	cbz	r0, 800b484 <_vfiprintf_r+0x5c>
 800b466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b468:	07dc      	lsls	r4, r3, #31
 800b46a:	d504      	bpl.n	800b476 <_vfiprintf_r+0x4e>
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	b01d      	add	sp, #116	; 0x74
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	0598      	lsls	r0, r3, #22
 800b47a:	d4f7      	bmi.n	800b46c <_vfiprintf_r+0x44>
 800b47c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b47e:	f7fc ff59 	bl	8008334 <__retarget_lock_release_recursive>
 800b482:	e7f3      	b.n	800b46c <_vfiprintf_r+0x44>
 800b484:	2300      	movs	r3, #0
 800b486:	9309      	str	r3, [sp, #36]	; 0x24
 800b488:	2320      	movs	r3, #32
 800b48a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b492:	2330      	movs	r3, #48	; 0x30
 800b494:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b648 <_vfiprintf_r+0x220>
 800b498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b49c:	f04f 0901 	mov.w	r9, #1
 800b4a0:	4623      	mov	r3, r4
 800b4a2:	469a      	mov	sl, r3
 800b4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a8:	b10a      	cbz	r2, 800b4ae <_vfiprintf_r+0x86>
 800b4aa:	2a25      	cmp	r2, #37	; 0x25
 800b4ac:	d1f9      	bne.n	800b4a2 <_vfiprintf_r+0x7a>
 800b4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b2:	d00b      	beq.n	800b4cc <_vfiprintf_r+0xa4>
 800b4b4:	465b      	mov	r3, fp
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff ffa2 	bl	800b404 <__sfputs_r>
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	f000 80a9 	beq.w	800b618 <_vfiprintf_r+0x1f0>
 800b4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c8:	445a      	add	r2, fp
 800b4ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80a1 	beq.w	800b618 <_vfiprintf_r+0x1f0>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4e0:	f10a 0a01 	add.w	sl, sl, #1
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	9307      	str	r3, [sp, #28]
 800b4e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	2205      	movs	r2, #5
 800b4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f6:	4854      	ldr	r0, [pc, #336]	; (800b648 <_vfiprintf_r+0x220>)
 800b4f8:	f7f4 fea2 	bl	8000240 <memchr>
 800b4fc:	9a04      	ldr	r2, [sp, #16]
 800b4fe:	b9d8      	cbnz	r0, 800b538 <_vfiprintf_r+0x110>
 800b500:	06d1      	lsls	r1, r2, #27
 800b502:	bf44      	itt	mi
 800b504:	2320      	movmi	r3, #32
 800b506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50a:	0713      	lsls	r3, r2, #28
 800b50c:	bf44      	itt	mi
 800b50e:	232b      	movmi	r3, #43	; 0x2b
 800b510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b514:	f89a 3000 	ldrb.w	r3, [sl]
 800b518:	2b2a      	cmp	r3, #42	; 0x2a
 800b51a:	d015      	beq.n	800b548 <_vfiprintf_r+0x120>
 800b51c:	9a07      	ldr	r2, [sp, #28]
 800b51e:	4654      	mov	r4, sl
 800b520:	2000      	movs	r0, #0
 800b522:	f04f 0c0a 	mov.w	ip, #10
 800b526:	4621      	mov	r1, r4
 800b528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b52c:	3b30      	subs	r3, #48	; 0x30
 800b52e:	2b09      	cmp	r3, #9
 800b530:	d94d      	bls.n	800b5ce <_vfiprintf_r+0x1a6>
 800b532:	b1b0      	cbz	r0, 800b562 <_vfiprintf_r+0x13a>
 800b534:	9207      	str	r2, [sp, #28]
 800b536:	e014      	b.n	800b562 <_vfiprintf_r+0x13a>
 800b538:	eba0 0308 	sub.w	r3, r0, r8
 800b53c:	fa09 f303 	lsl.w	r3, r9, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	46a2      	mov	sl, r4
 800b546:	e7d2      	b.n	800b4ee <_vfiprintf_r+0xc6>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	1d19      	adds	r1, r3, #4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	9103      	str	r1, [sp, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfbb      	ittet	lt
 800b554:	425b      	neglt	r3, r3
 800b556:	f042 0202 	orrlt.w	r2, r2, #2
 800b55a:	9307      	strge	r3, [sp, #28]
 800b55c:	9307      	strlt	r3, [sp, #28]
 800b55e:	bfb8      	it	lt
 800b560:	9204      	strlt	r2, [sp, #16]
 800b562:	7823      	ldrb	r3, [r4, #0]
 800b564:	2b2e      	cmp	r3, #46	; 0x2e
 800b566:	d10c      	bne.n	800b582 <_vfiprintf_r+0x15a>
 800b568:	7863      	ldrb	r3, [r4, #1]
 800b56a:	2b2a      	cmp	r3, #42	; 0x2a
 800b56c:	d134      	bne.n	800b5d8 <_vfiprintf_r+0x1b0>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	1d1a      	adds	r2, r3, #4
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	9203      	str	r2, [sp, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	bfb8      	it	lt
 800b57a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b57e:	3402      	adds	r4, #2
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b658 <_vfiprintf_r+0x230>
 800b586:	7821      	ldrb	r1, [r4, #0]
 800b588:	2203      	movs	r2, #3
 800b58a:	4650      	mov	r0, sl
 800b58c:	f7f4 fe58 	bl	8000240 <memchr>
 800b590:	b138      	cbz	r0, 800b5a2 <_vfiprintf_r+0x17a>
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	eba0 000a 	sub.w	r0, r0, sl
 800b598:	2240      	movs	r2, #64	; 0x40
 800b59a:	4082      	lsls	r2, r0
 800b59c:	4313      	orrs	r3, r2
 800b59e:	3401      	adds	r4, #1
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a6:	4829      	ldr	r0, [pc, #164]	; (800b64c <_vfiprintf_r+0x224>)
 800b5a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ac:	2206      	movs	r2, #6
 800b5ae:	f7f4 fe47 	bl	8000240 <memchr>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d03f      	beq.n	800b636 <_vfiprintf_r+0x20e>
 800b5b6:	4b26      	ldr	r3, [pc, #152]	; (800b650 <_vfiprintf_r+0x228>)
 800b5b8:	bb1b      	cbnz	r3, 800b602 <_vfiprintf_r+0x1da>
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	3307      	adds	r3, #7
 800b5be:	f023 0307 	bic.w	r3, r3, #7
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	9303      	str	r3, [sp, #12]
 800b5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c8:	443b      	add	r3, r7
 800b5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b5cc:	e768      	b.n	800b4a0 <_vfiprintf_r+0x78>
 800b5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	e7a6      	b.n	800b526 <_vfiprintf_r+0xfe>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	3401      	adds	r4, #1
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	4619      	mov	r1, r3
 800b5e0:	f04f 0c0a 	mov.w	ip, #10
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ea:	3a30      	subs	r2, #48	; 0x30
 800b5ec:	2a09      	cmp	r2, #9
 800b5ee:	d903      	bls.n	800b5f8 <_vfiprintf_r+0x1d0>
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0c6      	beq.n	800b582 <_vfiprintf_r+0x15a>
 800b5f4:	9105      	str	r1, [sp, #20]
 800b5f6:	e7c4      	b.n	800b582 <_vfiprintf_r+0x15a>
 800b5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	2301      	movs	r3, #1
 800b600:	e7f0      	b.n	800b5e4 <_vfiprintf_r+0x1bc>
 800b602:	ab03      	add	r3, sp, #12
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	462a      	mov	r2, r5
 800b608:	4b12      	ldr	r3, [pc, #72]	; (800b654 <_vfiprintf_r+0x22c>)
 800b60a:	a904      	add	r1, sp, #16
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7fb ff3f 	bl	8007490 <_printf_float>
 800b612:	4607      	mov	r7, r0
 800b614:	1c78      	adds	r0, r7, #1
 800b616:	d1d6      	bne.n	800b5c6 <_vfiprintf_r+0x19e>
 800b618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b61a:	07d9      	lsls	r1, r3, #31
 800b61c:	d405      	bmi.n	800b62a <_vfiprintf_r+0x202>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	059a      	lsls	r2, r3, #22
 800b622:	d402      	bmi.n	800b62a <_vfiprintf_r+0x202>
 800b624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b626:	f7fc fe85 	bl	8008334 <__retarget_lock_release_recursive>
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	065b      	lsls	r3, r3, #25
 800b62e:	f53f af1d 	bmi.w	800b46c <_vfiprintf_r+0x44>
 800b632:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b634:	e71c      	b.n	800b470 <_vfiprintf_r+0x48>
 800b636:	ab03      	add	r3, sp, #12
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	462a      	mov	r2, r5
 800b63c:	4b05      	ldr	r3, [pc, #20]	; (800b654 <_vfiprintf_r+0x22c>)
 800b63e:	a904      	add	r1, sp, #16
 800b640:	4630      	mov	r0, r6
 800b642:	f7fc f9ad 	bl	80079a0 <_printf_i>
 800b646:	e7e4      	b.n	800b612 <_vfiprintf_r+0x1ea>
 800b648:	0800bf81 	.word	0x0800bf81
 800b64c:	0800bf8b 	.word	0x0800bf8b
 800b650:	08007491 	.word	0x08007491
 800b654:	0800b405 	.word	0x0800b405
 800b658:	0800bf87 	.word	0x0800bf87

0800b65c <__swbuf_r>:
 800b65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65e:	460e      	mov	r6, r1
 800b660:	4614      	mov	r4, r2
 800b662:	4605      	mov	r5, r0
 800b664:	b118      	cbz	r0, 800b66e <__swbuf_r+0x12>
 800b666:	6a03      	ldr	r3, [r0, #32]
 800b668:	b90b      	cbnz	r3, 800b66e <__swbuf_r+0x12>
 800b66a:	f7fc fd4b 	bl	8008104 <__sinit>
 800b66e:	69a3      	ldr	r3, [r4, #24]
 800b670:	60a3      	str	r3, [r4, #8]
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	071a      	lsls	r2, r3, #28
 800b676:	d525      	bpl.n	800b6c4 <__swbuf_r+0x68>
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	b31b      	cbz	r3, 800b6c4 <__swbuf_r+0x68>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	6922      	ldr	r2, [r4, #16]
 800b680:	1a98      	subs	r0, r3, r2
 800b682:	6963      	ldr	r3, [r4, #20]
 800b684:	b2f6      	uxtb	r6, r6
 800b686:	4283      	cmp	r3, r0
 800b688:	4637      	mov	r7, r6
 800b68a:	dc04      	bgt.n	800b696 <__swbuf_r+0x3a>
 800b68c:	4621      	mov	r1, r4
 800b68e:	4628      	mov	r0, r5
 800b690:	f7ff fa2c 	bl	800aaec <_fflush_r>
 800b694:	b9e0      	cbnz	r0, 800b6d0 <__swbuf_r+0x74>
 800b696:	68a3      	ldr	r3, [r4, #8]
 800b698:	3b01      	subs	r3, #1
 800b69a:	60a3      	str	r3, [r4, #8]
 800b69c:	6823      	ldr	r3, [r4, #0]
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	6022      	str	r2, [r4, #0]
 800b6a2:	701e      	strb	r6, [r3, #0]
 800b6a4:	6962      	ldr	r2, [r4, #20]
 800b6a6:	1c43      	adds	r3, r0, #1
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d004      	beq.n	800b6b6 <__swbuf_r+0x5a>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	07db      	lsls	r3, r3, #31
 800b6b0:	d506      	bpl.n	800b6c0 <__swbuf_r+0x64>
 800b6b2:	2e0a      	cmp	r6, #10
 800b6b4:	d104      	bne.n	800b6c0 <__swbuf_r+0x64>
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	4628      	mov	r0, r5
 800b6ba:	f7ff fa17 	bl	800aaec <_fflush_r>
 800b6be:	b938      	cbnz	r0, 800b6d0 <__swbuf_r+0x74>
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f806 	bl	800b6d8 <__swsetup_r>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d0d5      	beq.n	800b67c <__swbuf_r+0x20>
 800b6d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d4:	e7f4      	b.n	800b6c0 <__swbuf_r+0x64>
	...

0800b6d8 <__swsetup_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4b2a      	ldr	r3, [pc, #168]	; (800b784 <__swsetup_r+0xac>)
 800b6dc:	4605      	mov	r5, r0
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	b118      	cbz	r0, 800b6ec <__swsetup_r+0x14>
 800b6e4:	6a03      	ldr	r3, [r0, #32]
 800b6e6:	b90b      	cbnz	r3, 800b6ec <__swsetup_r+0x14>
 800b6e8:	f7fc fd0c 	bl	8008104 <__sinit>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6f2:	0718      	lsls	r0, r3, #28
 800b6f4:	d422      	bmi.n	800b73c <__swsetup_r+0x64>
 800b6f6:	06d9      	lsls	r1, r3, #27
 800b6f8:	d407      	bmi.n	800b70a <__swsetup_r+0x32>
 800b6fa:	2309      	movs	r3, #9
 800b6fc:	602b      	str	r3, [r5, #0]
 800b6fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	f04f 30ff 	mov.w	r0, #4294967295
 800b708:	e034      	b.n	800b774 <__swsetup_r+0x9c>
 800b70a:	0758      	lsls	r0, r3, #29
 800b70c:	d512      	bpl.n	800b734 <__swsetup_r+0x5c>
 800b70e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b710:	b141      	cbz	r1, 800b724 <__swsetup_r+0x4c>
 800b712:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b716:	4299      	cmp	r1, r3
 800b718:	d002      	beq.n	800b720 <__swsetup_r+0x48>
 800b71a:	4628      	mov	r0, r5
 800b71c:	f7fd fc08 	bl	8008f30 <_free_r>
 800b720:	2300      	movs	r3, #0
 800b722:	6363      	str	r3, [r4, #52]	; 0x34
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	2300      	movs	r3, #0
 800b72e:	6063      	str	r3, [r4, #4]
 800b730:	6923      	ldr	r3, [r4, #16]
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	f043 0308 	orr.w	r3, r3, #8
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	b94b      	cbnz	r3, 800b754 <__swsetup_r+0x7c>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b74a:	d003      	beq.n	800b754 <__swsetup_r+0x7c>
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 f884 	bl	800b85c <__smakebuf_r>
 800b754:	89a0      	ldrh	r0, [r4, #12]
 800b756:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b75a:	f010 0301 	ands.w	r3, r0, #1
 800b75e:	d00a      	beq.n	800b776 <__swsetup_r+0x9e>
 800b760:	2300      	movs	r3, #0
 800b762:	60a3      	str	r3, [r4, #8]
 800b764:	6963      	ldr	r3, [r4, #20]
 800b766:	425b      	negs	r3, r3
 800b768:	61a3      	str	r3, [r4, #24]
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	b943      	cbnz	r3, 800b780 <__swsetup_r+0xa8>
 800b76e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b772:	d1c4      	bne.n	800b6fe <__swsetup_r+0x26>
 800b774:	bd38      	pop	{r3, r4, r5, pc}
 800b776:	0781      	lsls	r1, r0, #30
 800b778:	bf58      	it	pl
 800b77a:	6963      	ldrpl	r3, [r4, #20]
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	e7f4      	b.n	800b76a <__swsetup_r+0x92>
 800b780:	2000      	movs	r0, #0
 800b782:	e7f7      	b.n	800b774 <__swsetup_r+0x9c>
 800b784:	20000068 	.word	0x20000068

0800b788 <_raise_r>:
 800b788:	291f      	cmp	r1, #31
 800b78a:	b538      	push	{r3, r4, r5, lr}
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	d904      	bls.n	800b79c <_raise_r+0x14>
 800b792:	2316      	movs	r3, #22
 800b794:	6003      	str	r3, [r0, #0]
 800b796:	f04f 30ff 	mov.w	r0, #4294967295
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b79e:	b112      	cbz	r2, 800b7a6 <_raise_r+0x1e>
 800b7a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7a4:	b94b      	cbnz	r3, 800b7ba <_raise_r+0x32>
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 f830 	bl	800b80c <_getpid_r>
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7b6:	f000 b817 	b.w	800b7e8 <_kill_r>
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d00a      	beq.n	800b7d4 <_raise_r+0x4c>
 800b7be:	1c59      	adds	r1, r3, #1
 800b7c0:	d103      	bne.n	800b7ca <_raise_r+0x42>
 800b7c2:	2316      	movs	r3, #22
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	2001      	movs	r0, #1
 800b7c8:	e7e7      	b.n	800b79a <_raise_r+0x12>
 800b7ca:	2400      	movs	r4, #0
 800b7cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	4798      	blx	r3
 800b7d4:	2000      	movs	r0, #0
 800b7d6:	e7e0      	b.n	800b79a <_raise_r+0x12>

0800b7d8 <raise>:
 800b7d8:	4b02      	ldr	r3, [pc, #8]	; (800b7e4 <raise+0xc>)
 800b7da:	4601      	mov	r1, r0
 800b7dc:	6818      	ldr	r0, [r3, #0]
 800b7de:	f7ff bfd3 	b.w	800b788 <_raise_r>
 800b7e2:	bf00      	nop
 800b7e4:	20000068 	.word	0x20000068

0800b7e8 <_kill_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d07      	ldr	r5, [pc, #28]	; (800b808 <_kill_r+0x20>)
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	4608      	mov	r0, r1
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	f7f6 fba3 	bl	8001f40 <_kill>
 800b7fa:	1c43      	adds	r3, r0, #1
 800b7fc:	d102      	bne.n	800b804 <_kill_r+0x1c>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	b103      	cbz	r3, 800b804 <_kill_r+0x1c>
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	bd38      	pop	{r3, r4, r5, pc}
 800b806:	bf00      	nop
 800b808:	2000056c 	.word	0x2000056c

0800b80c <_getpid_r>:
 800b80c:	f7f6 bb90 	b.w	8001f30 <_getpid>

0800b810 <__swhatbuf_r>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	460c      	mov	r4, r1
 800b814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b818:	2900      	cmp	r1, #0
 800b81a:	b096      	sub	sp, #88	; 0x58
 800b81c:	4615      	mov	r5, r2
 800b81e:	461e      	mov	r6, r3
 800b820:	da0d      	bge.n	800b83e <__swhatbuf_r+0x2e>
 800b822:	89a3      	ldrh	r3, [r4, #12]
 800b824:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b828:	f04f 0100 	mov.w	r1, #0
 800b82c:	bf0c      	ite	eq
 800b82e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b832:	2340      	movne	r3, #64	; 0x40
 800b834:	2000      	movs	r0, #0
 800b836:	6031      	str	r1, [r6, #0]
 800b838:	602b      	str	r3, [r5, #0]
 800b83a:	b016      	add	sp, #88	; 0x58
 800b83c:	bd70      	pop	{r4, r5, r6, pc}
 800b83e:	466a      	mov	r2, sp
 800b840:	f000 f848 	bl	800b8d4 <_fstat_r>
 800b844:	2800      	cmp	r0, #0
 800b846:	dbec      	blt.n	800b822 <__swhatbuf_r+0x12>
 800b848:	9901      	ldr	r1, [sp, #4]
 800b84a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b84e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b852:	4259      	negs	r1, r3
 800b854:	4159      	adcs	r1, r3
 800b856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b85a:	e7eb      	b.n	800b834 <__swhatbuf_r+0x24>

0800b85c <__smakebuf_r>:
 800b85c:	898b      	ldrh	r3, [r1, #12]
 800b85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b860:	079d      	lsls	r5, r3, #30
 800b862:	4606      	mov	r6, r0
 800b864:	460c      	mov	r4, r1
 800b866:	d507      	bpl.n	800b878 <__smakebuf_r+0x1c>
 800b868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	2301      	movs	r3, #1
 800b872:	6163      	str	r3, [r4, #20]
 800b874:	b002      	add	sp, #8
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	ab01      	add	r3, sp, #4
 800b87a:	466a      	mov	r2, sp
 800b87c:	f7ff ffc8 	bl	800b810 <__swhatbuf_r>
 800b880:	9900      	ldr	r1, [sp, #0]
 800b882:	4605      	mov	r5, r0
 800b884:	4630      	mov	r0, r6
 800b886:	f7fd fbc7 	bl	8009018 <_malloc_r>
 800b88a:	b948      	cbnz	r0, 800b8a0 <__smakebuf_r+0x44>
 800b88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b890:	059a      	lsls	r2, r3, #22
 800b892:	d4ef      	bmi.n	800b874 <__smakebuf_r+0x18>
 800b894:	f023 0303 	bic.w	r3, r3, #3
 800b898:	f043 0302 	orr.w	r3, r3, #2
 800b89c:	81a3      	strh	r3, [r4, #12]
 800b89e:	e7e3      	b.n	800b868 <__smakebuf_r+0xc>
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	6020      	str	r0, [r4, #0]
 800b8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a8:	81a3      	strh	r3, [r4, #12]
 800b8aa:	9b00      	ldr	r3, [sp, #0]
 800b8ac:	6163      	str	r3, [r4, #20]
 800b8ae:	9b01      	ldr	r3, [sp, #4]
 800b8b0:	6120      	str	r0, [r4, #16]
 800b8b2:	b15b      	cbz	r3, 800b8cc <__smakebuf_r+0x70>
 800b8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f000 f81d 	bl	800b8f8 <_isatty_r>
 800b8be:	b128      	cbz	r0, 800b8cc <__smakebuf_r+0x70>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	f023 0303 	bic.w	r3, r3, #3
 800b8c6:	f043 0301 	orr.w	r3, r3, #1
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	431d      	orrs	r5, r3
 800b8d0:	81a5      	strh	r5, [r4, #12]
 800b8d2:	e7cf      	b.n	800b874 <__smakebuf_r+0x18>

0800b8d4 <_fstat_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d07      	ldr	r5, [pc, #28]	; (800b8f4 <_fstat_r+0x20>)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4608      	mov	r0, r1
 800b8de:	4611      	mov	r1, r2
 800b8e0:	602b      	str	r3, [r5, #0]
 800b8e2:	f7f6 fb8c 	bl	8001ffe <_fstat>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d102      	bne.n	800b8f0 <_fstat_r+0x1c>
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	b103      	cbz	r3, 800b8f0 <_fstat_r+0x1c>
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	bd38      	pop	{r3, r4, r5, pc}
 800b8f2:	bf00      	nop
 800b8f4:	2000056c 	.word	0x2000056c

0800b8f8 <_isatty_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4d06      	ldr	r5, [pc, #24]	; (800b914 <_isatty_r+0x1c>)
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4604      	mov	r4, r0
 800b900:	4608      	mov	r0, r1
 800b902:	602b      	str	r3, [r5, #0]
 800b904:	f7f6 fb8b 	bl	800201e <_isatty>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d102      	bne.n	800b912 <_isatty_r+0x1a>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	b103      	cbz	r3, 800b912 <_isatty_r+0x1a>
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	bd38      	pop	{r3, r4, r5, pc}
 800b914:	2000056c 	.word	0x2000056c

0800b918 <_init>:
 800b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b91a:	bf00      	nop
 800b91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91e:	bc08      	pop	{r3}
 800b920:	469e      	mov	lr, r3
 800b922:	4770      	bx	lr

0800b924 <_fini>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr
